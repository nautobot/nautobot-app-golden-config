# Generated by Django 3.2.24 on 2024-06-10 14:23

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.mixins
import uuid


class Migration(migrations.Migration):
    replaces = [
        ("nautobot_golden_config", "0031_dynamicremediationfunction_dynamicremediationmapping"),
        ("nautobot_golden_config", "0032_alter_dynamicremediationmapping_unique_together"),
        ("nautobot_golden_config", "0033_alter_dynamicremediationfunction_unique_together"),
    ]

    dependencies = [
        ("extras", "0099_remove_dangling_note_objects"),
        ("nautobot_golden_config", "0030_alter_goldenconfig_device"),
        ("dcim", "0052_fix_interface_redundancy_group_created"),
        ("extras", "0103_add_db_indexes_to_object_change"),
    ]

    operations = [
        migrations.CreateModel(
            name="DynamicRemediationFunction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("file_name", models.CharField(max_length=200)),
                (
                    "dynamic_remediation_repository",
                    models.ForeignKey(
                        limit_choices_to={
                            "provided_contents__contains": "nautobot_golden_config.hierconfigdynamicremedation"
                        },
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="dynamic_remediation_repository",
                        to="extras.gitrepository",
                    ),
                ),
                (
                    "tags",
                    nautobot.core.models.fields.TagsField(
                        help_text="A comma-separated list of tags.",
                        through="extras.TaggedItem",
                        to="extras.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("file_name", "dynamic_remediation_repository")},
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="DynamicRemediationMapping",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("expression_choice", models.CharField(max_length=50)),
                ("config_string", models.CharField(max_length=256)),
                ("enabled", models.BooleanField(default=True)),
                (
                    "platform",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dynamic_remediation_mapping",
                        to="dcim.platform",
                    ),
                ),
                (
                    "remediation_function",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nautobot_golden_config.dynamicremediationfunction",
                    ),
                ),
                (
                    "tags",
                    nautobot.core.models.fields.TagsField(
                        help_text="A comma-separated list of tags.",
                        through="extras.TaggedItem",
                        to="extras.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("expression_choice", "config_string", "remediation_function")},
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
    ]
