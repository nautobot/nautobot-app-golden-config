# Generated by Django 4.2.23 on 2025-09-10 20:40

import uuid

import django.core.serializers.json
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.mixins
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("dcim", "0067_controllermanageddevicegroup_tenant"),
        ("extras", "0122_add_graphqlquery_owner_content_type"),
        ("nautobot_golden_config", "0030_alter_goldenconfig_device"),
    ]

    operations = [
        migrations.CreateModel(
            name="ConfigHashGrouping",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("config_hash", models.CharField(blank=True, db_index=True, max_length=64)),
                ("config_content", models.JSONField(blank=True)),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="config_hash_groups",
                        to="nautobot_golden_config.compliancerule",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ["rule", "config_hash"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ConfigComplianceHash",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("config_type", models.CharField(max_length=20)),
                ("config_hash", models.CharField(blank=True, db_index=True, max_length=64)),
                (
                    "config_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="hash_records",
                        to="nautobot_golden_config.confighashgrouping",
                    ),
                ),
                ("device", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="dcim.device")),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="config_hashes",
                        to="nautobot_golden_config.compliancerule",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ["device", "rule", "config_type"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.AddIndex(
            model_name="confighashgrouping",
            index=models.Index(fields=["rule", "config_hash"], name="nautobot_go_rule_id_634624_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="confighashgrouping",
            unique_together={("rule", "config_hash")},
        ),
        migrations.AddIndex(
            model_name="configcompliancehash",
            index=models.Index(fields=["rule", "config_hash"], name="nautobot_go_rule_id_7178cb_idx"),
        ),
        migrations.AddIndex(
            model_name="configcompliancehash",
            index=models.Index(fields=["rule", "config_type", "config_hash"], name="nautobot_go_rule_id_23ac1a_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="configcompliancehash",
            unique_together={("device", "rule", "config_type")},
        ),
    ]
