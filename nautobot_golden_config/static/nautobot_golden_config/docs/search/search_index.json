{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Nautobot Golden Config","text":"<p>    An App for Nautobot. </p>"},{"location":"index.html#overview","title":"Overview","text":"<p>The Golden Config App is a Nautobot App that provides a NetDevOps approach to golden configuration and configuration compliance.</p> <p>Info</p> <p>Upgrading to Nautobot and Nautobot Golden Config 2.0, see our migration guide!</p>"},{"location":"index.html#key-use-cases","title":"Key Use Cases","text":"<p>This app enable six (6) key use cases.</p> <ol> <li>Configuration Backups - Is a Nornir process to connect to devices, optionally parse out lines/secrets, backup the configuration, and save to a Git repository.</li> <li>Intended Configuration - Is a Nornir process to generate configuration based on a Git repo of Jinja files to combine with a GraphQL generated data and a Git repo to store the intended configuration.</li> <li>Source of Truth Aggregation - Is a GraphQL query per device that creates a data structure used in the generation of configuration.</li> <li>Configuration Compliance - Is a process to run comparison of the actual (via backups) and intended (via Jinja file creation) CLI configurations upon saving the actual and intended configuration. This is started by either a Nornir process for cli-like configurations or calling the API for json-like configurations</li> <li>Configuration Remediation - Is a process of generating a partial device configuration that would get a configuration feature into a compliant state. </li> <li>Configuration Deployment - Is a process to generate a device configuration and push it to the network device. It supports compliance features, remediation engine and manual definitions.</li> </ol> <p>Notice: Configuration Postprocessing - (beta feature) This process renders a valid configuration artifact from an intended configuration, that can be pushed to devices. The current implementation renders this configuration; however, it doesn't push it to the target device.</p> <p>Notice: The operators of their own Nautobot instance are welcome to use any combination of these features. Though the appearance may seem like they are tightly coupled, this isn't actually the case. For example, one can obtain backup configurations from their current RANCID/Oxidized process and simply provide a Git Repo of the location of the backup configurations, and the compliance process would work the same way. Also, another user may only want to generate configurations, but not want to use other features, which is perfectly fine to do so.</p>"},{"location":"index.html#screenshots","title":"Screenshots","text":"<p>There are many features and capabilities the app provides into the Nautobot ecosystem. The following screenshots are intended to provide a quick visual overview of some of these features.</p> <p>The golden configuration is driven by jobs that run a series of tasks and the result is captured in this overview.</p> <p></p> <p>The compliance report provides a high-level overview on the compliance of your network. </p> <p>The compliance overview will provide a per device and feature overview on the compliance of your network devices. </p> <p>Drilling into a specific device and feature, you can get an immediate detailed understanding of your device. </p> <p></p>"},{"location":"index.html#try-it-out","title":"Try it out!","text":"<p>This App is installed in the Nautobot Community Sandbox found over at demo.nautobot.com!</p> <p>For a full list of all the available always-on sandbox environments, head over to the main page on networktocode.com.</p>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>Full web-based HTML documentation for this app can be found over on the Nautobot Docs website:</p> <ul> <li>User Guide - Overview, Using the App, Getting Started, Navigating compliance (cli, json, custom), backup, app usage, intended state creation.</li> <li>Administrator Guide - How to Install, Configure, Upgrade, or Uninstall the App.</li> <li>Developer Guide - Extending the App, Code Reference, Contribution Guide.</li> <li>Release Notes / Changelog</li> <li>Frequently Asked Questions</li> </ul>"},{"location":"index.html#contributing-to-the-docs","title":"Contributing to the Docs","text":"<p>You can find all the Markdown source for the App documentation under the <code>docs</code> folder in this repository. For simple edits, a Markdown capable editor is sufficient: clone the repository and edit away.</p> <p>If you need to view the fully generated documentation site, you can build it with mkdocs. A container hosting the docs will be started using the invoke commands (details in the Development Environment Guide) on http://localhost:8001. As your changes are saved, the live docs will be automatically reloaded.</p> <p>Any PRs with fixes or improvements are very welcome!</p>"},{"location":"index.html#questions","title":"Questions","text":"<p>For any questions or comments, please check the FAQ first. Feel free to also swing by the Network to Code Slack (channel <code>#nautobot</code>), sign up here if you don't have an account.</p>"},{"location":"admin/compatibility_matrix.html","title":"Compatibility Matrix","text":"<p>Changes to the support of upstream Nautobot releases will be announced 1 minor or major version ahead.</p> <p>The deprecation policy will be announced within the release notes, and updated in the table below. There will be a <code>stable-&lt;major&gt;.&lt;minor&gt;</code> branch that will be minimally maintained. Any security enhancements or major bugs in that branch will be supported for a limited time.</p> <p>While that last supported version will not be strictly enforced via the <code>max_version</code> setting, any issues with an updated Nautobot supported version in a minor release will require raising a bug and fixing it in Nautobot core, with no fixes expected in this app. This allows the Golden Config App the ability to quickly take advantage of the latest features in Nautobot.</p> Golden Config Version Nautobot First Support Version Nautobot Last Support Version 0.9.X 1.0.0 1.2.99 [Official] 0.10.X 1.0.0 1.2.99 [Official] 1.0.X 1.2.0 1.3.99 [Official] 1.1.X 1.2.0 1.3.99 [Official] 1.2.X 1.4.0 1.5.2 [Official] 1.3.X 1.4.0 1.5.2 [Official] 1.4.X 1.5.3 1.5.99 [Official] 1.5.X 1.6.1 1.6.99 [Official] 1.6.X 1.6.1 1.6.99 [Official] 2.0.x 2.0.0 2.3.99 [Official] 2.1.x 2.0.0 2.3.99 [Official] 2.2.x 2.0.0 2.3.99 [Official] 2.3.x 2.4.2 2.4.99"},{"location":"admin/install.html","title":"Installing the App in Nautobot","text":"<p>Here you will find detailed instructions on how to install and configure the App within your Nautobot environment.</p>"},{"location":"admin/install.html#prerequisites","title":"Prerequisites","text":"<ul> <li>The app relies on <code>nautobot_plugin_nornir</code> to be installed and both apps to be enabled in your configuration settings.</li> <li>The latest version of this app is compatible with Nautobot 2.0.0 and higher, see this dedicated page for a full compatibility matrix and the deprecation policy.</li> <li>Databases supported: PostgreSQL, MySQL</li> </ul>"},{"location":"admin/install.html#access-requirements","title":"Access Requirements","text":"<p>There are no access requirements from external systems to this app.</p>"},{"location":"admin/install.html#install-guide","title":"Install Guide","text":"<p>Note</p> <p>Apps can be installed from the Python Package Index or locally. See the Nautobot documentation for more details. The pip package name for this app is <code>nautobot-golden-config</code>.</p> <p>The app is available as a Python package via PyPI and can be installed with <code>pip</code>:</p> <pre><code>pip install nautobot-golden-config\n</code></pre> <p>To ensure Nautobot Golden Config is automatically re-installed during future upgrades, create a file named <code>local_requirements.txt</code> (if not already existing) in the Nautobot root directory (alongside <code>requirements.txt</code>) and list the <code>nautobot-golden-config</code> package:</p> <pre><code>echo nautobot-golden-config &gt;&gt; local_requirements.txt\n</code></pre> <p>Once installed, the app needs to be enabled in your Nautobot configuration. The following block of code below shows the additional configuration required to be added to your <code>nautobot_config.py</code> file:</p> <ul> <li>Append <code>\"nautobot_golden_config\"</code> to the <code>PLUGINS</code> list, and <code>\"nautobot_plugin_nornir\"</code> if it was not already there (more info here).</li> <li>Append the <code>\"nautobot_golden_config\"</code> dictionary to the <code>PLUGINS_CONFIG</code> dictionary as shown the sample below with your appropriate configs.</li> <li>Append the <code>\"nautobot_plugin_nornir\"</code> dictionary to the <code>PLUGINS_CONFIG</code> dictionary as shown the sample below with your appropriate configs (Note: this may already be in your configs).</li> </ul> <pre><code>PLUGINS = [\"nautobot_plugin_nornir\", \"nautobot_golden_config\"]\n\nPLUGINS_CONFIG = {\n    \"nautobot_plugin_nornir\": {\n        \"nornir_settings\": {\n            \"credentials\": \"nautobot_plugin_nornir.plugins.credentials.env_vars.CredentialsEnvVars\",\n            \"runner\": {\n                \"plugin\": \"threaded\",\n                \"options\": {\n                    \"num_workers\": 20,\n                },\n            },\n        },\n    },\n    \"nautobot_golden_config\": {\n        \"per_feature_bar_width\": 0.15,\n        \"per_feature_width\": 13,\n        \"per_feature_height\": 4,\n        \"enable_backup\": True,\n        \"enable_compliance\": True,\n        \"enable_intended\": True,\n        \"enable_sotagg\": True,\n        \"enable_plan\": True,\n        \"enable_deploy\": True,\n        \"enable_postprocessing\": False,\n        \"sot_agg_transposer\": None,\n        \"postprocessing_callables\": [],\n        \"postprocessing_subscribed\": [],\n        \"jinja_env\": {\n            \"undefined\": \"jinja2.StrictUndefined\",\n            \"trim_blocks\": True,\n            \"lstrip_blocks\": False,\n        },\n        # \"default_deploy_status\": \"Not Approved\",\n        # \"get_custom_compliance\": \"my.custom_compliance.func\"\n    },\n}\n</code></pre> <p>Once the Nautobot configuration is updated, run the Post Upgrade command (<code>nautobot-server post_upgrade</code>) to run migrations and clear any cache:</p> <pre><code>nautobot-server post_upgrade\n</code></pre> <p>Then restart (if necessary) the Nautobot services which may include:</p> <ul> <li>Nautobot</li> <li>Nautobot Workers</li> <li>Nautobot Scheduler</li> </ul> <pre><code>sudo systemctl restart nautobot nautobot-worker nautobot-scheduler\n</code></pre>"},{"location":"admin/install.html#app-configuration","title":"App Configuration","text":"<p>The app behavior can be controlled with the following list of settings:</p> <p>Note</p> <p>The <code>enable_backup</code>, <code>enable_compliance</code>, <code>enable_intended</code>, <code>enable_sotagg</code>, <code>enable_plan</code>, <code>enable_deploy</code>, and <code>enable_postprocessing</code> will toggle inclusion of the entire component.</p> Key Example Default Description enable_backup True True A boolean to represent whether or not to run backup configurations within the app. enable_compliance True True A boolean to represent whether or not to run the compliance process within the app. enable_intended True True A boolean to represent whether or not to generate intended configurations within the app. enable_sotagg True True A boolean to represent whether or not to provide a GraphQL query per device to allow the intended configuration to provide data variables to the app. enable_plan True True A boolean to represent whether or not to allow the config plan job to run. enable_deploy True True A boolean to represent whether or not to be able to deploy configs to network devices. enable_postprocessing True False A boolean to represent whether or not to generate intended configurations to push, with extra processing such as secrets rendering. default_deploy_status \"Not Approved\" \"Not Approved\" A string that will be the name of the status you want as the default when create new config plans, you MUST create the status yourself before starting the app. postprocessing_callables ['mypackage.myfunction'] [] A list of function paths, in dotted format, that are appended to the available methods for post-processing the intended configuration, for instance, the <code>render_secrets</code>. postprocessing_subscribed ['mypackage.myfunction'] [] A list of function paths, that should exist as postprocessing_callables, that defines the order of application of during the post-processing process. sot_agg_transposer \"mypkg.transposer\" None A string representation of a function that can post-process the graphQL data. per_feature_bar_width 0.15 0.15 The width of the table bar within the overview report per_feature_width 13 13 The width in inches that the overview table can be. per_feature_height 4 4 The height in inches that the overview table can be. jinja_env {\"lstrip_blocks\": False} See Note Below A dictionary of Jinja2 Environment options compatible with Jinja2.SandboxEnvironment() <p>Note</p> <p><code>platform_slug_map</code> configuration was removed as of the <code>v2.0.0</code> release of Golden Config, for more information please review the v2 Migration Guide</p> <p>Note</p> <p>Over time the compliance report will become more dynamic, but for now allow users to configure the <code>per_*</code> configs in a way that fits best for them.</p> <p>Note</p> <p>Defaults for Jinja2 environment settings (<code>jinja_env</code>) are as follows:</p> <pre><code>    jinja_env = {\n        \"undefined\": \"jinja2.StrictUndefined\",\n        \"trim_blocks\": True,\n        \"lstrip_blocks\": False,\n    }\n</code></pre>"},{"location":"admin/install.html#custom-dispatcher","title":"Custom Dispatcher","text":"<p>Please note, that this should only be used in rare circumstances not covered in the previous constance settings, when you are truly \"rolling your own\" dispatcher. Previously, the <code>dispatcher_mapping</code> covered use cases that are now more easily handled. The only two use cases that should be required are.</p> <ul> <li>Provide support for network drivers not currently supported.</li> <li>Provide some custom business logic you need.</li> </ul> <p>That being said, if you do fall into one of those use cases, you can set the dispatcher as followed:</p> <pre><code>PLUGINS_CONFIG = {\n    \"nautobot_plugin_nornir\": {\n    },\n    \"nautobot_golden_config\": {\n        \"custom_dispatcher\": {\n            \"arista_eos\": \"my_custom.dispatcher.NornirDriver\",\n            \"arbitrary_platform_name\": \"my_custom.dispatcher.OtherNornirDriver\",\n        },\n\n    },\n}\n</code></pre> <p>The format for defining these methods is via the dotted string format that will be imported by Django. For example, the Netmiko Cisco IOS dispatcher is defined as <code>nornir_nautobot.plugins.tasks.dispatcher.cisco_ios.NetmikoCiscoIos</code>. You also must hand any installation of the packaging and assurance that the value you provide is importable in the environment you run it on.</p>"},{"location":"admin/migrating_to_v2.html","title":"Migrating to v2","text":"<p>While not a replacement of the Nautobot Migration guide these migration steps specifically for Golden Config are pretty straight forward, here is a quick overview with details information below.</p> <ol> <li>Ensure <code>Platform.network_driver</code> is set on every <code>Platform</code> object you have, in most circumstances running <code>nautobot-server populate_platform_network_driver</code> will take care of it.</li> <li>Remove any reference to <code>slug</code> as well as to the models <code>Region</code>, <code>Site</code>, <code>DeviceRole</code>, or <code>RackRole</code> in your Dynamic Group definition, in most circumstances running <code>nautobot-server audit_dynamic_groups</code> will guide you to what needs to change.</li> <li>Remove any reference to <code>slug</code> (or change to network_driver) as well as to the models <code>Region</code>, <code>Site</code>, <code>DeviceRole</code>, or <code>RackRole</code> in your GraphQL definition and reflect those changes in your Jinja files.</li> <li>Remove any reference to <code>slug</code> as well as to the models <code>Region</code>, <code>Site</code>, <code>DeviceRole</code>, or <code>RackRole</code> in your Golden Config Setting definition in all of <code>Backup Path</code>, <code>Intended Path</code>, and <code>Template Path</code>. </li> <li>Remove any <code>dispatcher_mapping</code> settings you have in your <code>nautobot_config.py</code> settings, see Golden Config for alternative options.</li> <li>Update your Git Repositories to use Nautobot Secrets.</li> </ol> <p>Warning</p> <p>Before you start, please note the <code>nautobot-server populate_platform_network_driver</code> command must be ran in Nautobot 1.6.2 -&gt; 1.6.X as it will not work once on Nautobot 2.0.</p> <p>These steps may range from no change (though unlikely) to large amount of change with your environment in order to successfully upgrade Golden Config. To help guide you, there is a detailed explanation and question to ask yourself if these changes will effect you or not.</p> <p>Providing Context</p> <p>There are 3 primary pieces of information that will effect most of the changes that will need to be made, here is a recap of them.</p> <ul> <li>In Nautobot 2.0.0, all the <code>Region</code> and <code>Site</code> related data models are being migrated to use <code>Location</code>. </li> <li>The <code>ipam.Role</code>, <code>dcim.RackRole</code>, and <code>dcim.DeviceRole</code> models have been removed and replaced by a single <code>extras.Role</code> model. This means that any references to the removed models in the code now use the <code>extras.Role</code> model instead.</li> <li>Slugs were used to identify unique objects in the database for various models in Nautobot v1.x and they are now replaced by Natural Keys or can often get the same effect adding the <code>|slugify</code> filter to your data.</li> </ul>"},{"location":"admin/migrating_to_v2.html#platform-network-driver","title":"Platform Network Driver","text":"<p>Tip</p> <p>You can safely skip this section if you already have your <code>Platform.network_driver</code> set and were not using either <code>platform_slug_map</code> nor <code>dispatcher_mapping</code> settings.</p> <p>The <code>Platform.slug</code> has been replace by Nautobot's <code>Platform.network_driver</code>. The nice thing about this feature is it provides mappings to all of the major network library (or frameworks) such as Netmiko and NAPALM to properly map between the slightly different names each library provides, such as <code>cisco_ios</code> vs <code>ios</code>. However, that means that you must now provide the network_driver on the the Platform object.</p> <p>While still on the a Nautobot 1.6 instance, run the command <code>nautobot-server populate_platform_network_driver</code>, this will help map all of your <code>Platform.slug</code>'s to <code>Platform.network_driver</code>. If there are any Platform's missed, you must update the Platform definitions that will be used by Golden Config.</p> <p>If previously you have leveraged the <code>platform_slug_map</code> you likely only have to assign the <code>network_driver</code> to your multiple current platforms. In the unlikely chance that you have a requirement to override the default network_driver_mappings, you can do so with the NETWORK_DRIVERS settings via UI with the constance settings.</p> <p>If previously you have leveraged the <code>dispatcher_mapping</code> to use your preferred network library or framework such as Netmiko or NAPALM, you can how use the constance settings via the UI.</p> <p>Info</p> <p>If you were using the <code>dispatcher_mapping</code> for other reasons, see the section below for Custom Dispatcher.</p>"},{"location":"admin/migrating_to_v2.html#dynamic-group","title":"Dynamic Group","text":"<p>Tip</p> <p>You can safely skip this section if your Dynamic Groups was not using slugs/Site/Region/DeviceRole or your Dynamic Groups are currently in the required state.</p> <p>In an effort to guide you along, you are highly encouraged to leverage the <code>nautobot-server audit_dynamic_groups</code> as documented. You will know you have completed this step, when the scope of devices in your Dynamic Group match your expectations.</p>"},{"location":"admin/migrating_to_v2.html#graphql","title":"GraphQL","text":"<p>Tip</p> <p>You can safely skip this section if your GraphQL Query was not using slugs/Site/Region/DeviceRole or your saved GraphQL Query currently renders to the appropriate state.</p> <p>As mentioned, any reference to slug or to one of the removed models will need to be updated to reflect Nautobot 2.0 standards, in this example we will review what would need to change.</p> <pre><code>query ($device_id: ID!) {\n  device(id: $device_id) {\n    hostname: name\n    tenant {\n      name\n      slug          &lt;----- Remove slug\n    }\n    tags {\n      name\n      slug          &lt;----- Remove slug\n    }\n    device_role {   &lt;----- Change to role vs device_role\n      name\n    }\n    platform {\n      name\n      slug          &lt;----- change to network_driver and potentially add network_driver_mappings\n    }\n    site {\n      name\n      slug          &lt;----- Remove slug\n    }\n  }\n}\n</code></pre> <p>The new query would end up being:</p> <pre><code>query ($device_id: ID!) {\n  device(id: $device_id) {\n    hostname: name\n    tenant {\n      name\n    }\n    tags {\n      name\n    }\n    role {\n      name\n    }\n    platform {\n      name\n      network_driver\n    }\n    site {\n      name\n      slug\n    }\n  }\n}\n</code></pre> <p>Additionally, your Jinja 2 templates will need to be updated to reflect the new updates to the data. Fortunately, if you have accepted the default that <code>SlugField</code> returns, this may be as simple as adding as the <code>| slugify</code> Jinja filter to the name equivalent. Let's take a quick look at a few examples of Jinja file change you may need to make:</p> <p>Using slugify</p> <p><pre><code>snmp-server location {{ site.slug }}             &lt;---- old way of doing it\nsnmp-server location {{ site.name | slugify }}   &lt;---- new way of doing it\n</code></pre> Update model</p> <pre><code>{% if device_role.name == 'spine' %}             &lt;---- old way of doing it\n{% if role.name == 'spine' %}                    &lt;---- new way of doing it\n</code></pre> <p>Use network_driver</p> <pre><code>{% if platform.slug == 'cisco_ios' %}            &lt;---- old way of doing it\n{% if platform.network_driver == 'cisco_ios' %}  &lt;---- new way of doing it\n</code></pre>"},{"location":"admin/migrating_to_v2.html#golden-config-settings","title":"Golden Config Settings","text":"<p>Tip</p> <p>You can safely skip this section if you are not using slug or one of the Models in your <code>Backup Path</code>, <code>Intended Path</code>, and <code>Template Path</code> settings.</p> <p>Similar to the the jinja examples above, you must ensure that the slug and legacy models are not referenced, using the previous recommendations and comparing to the current recommendations we can see how to make these changes.</p> <p>Path for backup and intended</p> <pre><code>{{obj.site.slug}}/{{obj.name}}                   &lt;---- old way of doing it\n{{obj.location.name|slugify}}/{{obj.name}}       &lt;---- new way of doing it\n</code></pre> <p>Path for templates</p> <pre><code>{{obj.platform.slug}}.j2                         &lt;---- old way of doing it\n{{obj.platform.network_driver}}.j2               &lt;---- new way of doing it\n</code></pre>"},{"location":"admin/migrating_to_v2.html#custom-dispatcher","title":"Custom Dispatcher","text":"<p>Tip</p> <p>You can safely skip this section if you have not been using <code>dispatcher_mapping</code> settings.</p> <p>If you have previously used the <code>dispatcher_mapping</code> settings to prefer the framework (such as netmiko or napalm), please see the Platform Network Driver section above. If you were truly \"rolling your own dispatcher\", then it is simply a matter of updating your settings.</p> <p>The <code>custom_dispatcher</code> settings are Golden Config settings (and NOT Nautobot Plugin Nornir settings), and the key name is <code>custom_dispatcher</code>. For your protection, the application will not start if you have either <code>dispatcher_mapping</code> or <code>custom_dispatcher</code> in Nautobot Plugin Nornir.</p> <p>Previous relevant Settings:</p> <pre><code>PLUGINS_CONFIG = {\n    \"nautobot_plugin_nornir\": {\n        \"dispatcher_mapping\": {\n            \"arista_eos\": \"my_custom.dispatcher.NornirDriver\",\n            \"arbitrary_platform_name\": \"my_custom.dispatcher.OtherNornirDriver\",\n        },\n    },\n    \"nautobot_golden_config\": {\n    },\n}\n</code></pre> <p>Current relevant Settings:</p> <pre><code>PLUGINS_CONFIG = {\n    \"nautobot_plugin_nornir\": {\n    },\n    \"nautobot_golden_config\": {\n        \"custom_dispatcher\": {            # &lt;---- Nested under nautobot_golden_config\n            \"arista_eos\": \"my_custom.dispatcher.NornirDriver\",\n            \"arbitrary_platform_name\": \"my_custom.dispatcher.OtherNornirDriver\",\n        },\n\n    },\n}\n</code></pre> <p>The custom dispatcher docs will provide further clarification if needed.</p>"},{"location":"admin/migrating_to_v2.html#secrets","title":"Secrets","text":"<p>Tip</p> <p>You can safely skip this section if you have already been using Nautobot Secrets and not Git Repository Token.</p> <p>Nautobot initially had the ability to store some secrets, this was deprecated when Secrets framework was added in Nautobot 1.2. The feature to directly store Secrets in the database has been removed in 2.0.</p> <p>The documentation has been updated in docs covering secret groups.</p>"},{"location":"admin/uninstall.html","title":"Uninstall the App from Nautobot","text":"<p>Here you will find any steps necessary to cleanly remove the App from your Nautobot environment.</p>"},{"location":"admin/uninstall.html#database-cleanup","title":"Database Cleanup","text":"<p>Prior to removing the app from the <code>nautobot_config.py</code>, run the following command to roll back any migration specific to this app.</p> <pre><code>nautobot-server migrate nautobot_golden_config zero\n</code></pre>"},{"location":"admin/uninstall.html#remove-app-configuration","title":"Remove App configuration","text":"<p>Remove the configuration you added in <code>nautobot_config.py</code> from <code>PLUGINS</code> &amp; <code>PLUGINS_CONFIG</code>.</p>"},{"location":"admin/uninstall.html#uninstall-the-package","title":"Uninstall the package","text":"<pre><code>$ pip3 uninstall nautobot-golden-config\n</code></pre>"},{"location":"admin/upgrade.html","title":"Upgrading the App","text":"<p>Here you will find any steps necessary to upgrade the App in your Nautobot environment.</p>"},{"location":"admin/upgrade.html#upgrade-guide","title":"Upgrade Guide","text":"<p>When a new release comes out it may be necessary to run a migration of the database to account for any changes in the data models used by this app. Execute the command <code>nautobot-server post-upgrade</code> within the runtime environment of your Nautobot installation after updating the <code>nautobot-golden-config</code> package via <code>pip</code>.</p>"},{"location":"admin/upgrade.html#v100","title":"v1.0.0","text":"<p><code>v1.0.0</code> Provides a breaking change for the users running pre <code>1.0.0</code> code sourced from <code>develop</code> branch of the app. Only users of the <code>Backup Repository Matching Rule</code> and <code>Intended Repository Matching Rule</code> features are affected by following behavior: migration script will only migrate the first repository from the list into the new default settings.</p> <p>Because of this specific behavior, please review your configuration and capture it before attempting to upgrade if using above features.</p> <p>Users running the released packages are not affected by this behavior.</p>"},{"location":"admin/release_notes/index.html","title":"Release Notes","text":"<p>All the published release notes can be found via the navigation menu. All patch releases are included in the same minor release (e.g. <code>v1.2</code>) document.</p>"},{"location":"admin/release_notes/version_0.10.html","title":"v0.10 Release Notes","text":"<ul> <li>Cherry Pick the custom compliance feature</li> </ul>"},{"location":"admin/release_notes/version_0.10.html#v0100-2022-09","title":"v0.10.0 - 2022-09","text":""},{"location":"admin/release_notes/version_0.10.html#added","title":"Added","text":"<ul> <li>#163 Create custom compliance feature</li> </ul>"},{"location":"admin/release_notes/version_0.9.html","title":"v0.9 Release Notes","text":"<ul> <li>Initial release</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#announcements","title":"Announcements","text":"<ul> <li>Nautobot Golden Config 0.9.X will officially not support versions after 1.2.X</li> <li>Nautobot Golden Config 1.0.X will tentatively not support versions after 1.2.X</li> <li>Nautobot Golden Config will maintain a <code>stable-&lt;major&gt;.&lt;minor&gt;</code> branch name</li> <li>Nautobot Golden Config branching policy created</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#v0910-2021-11","title":"v0.9.10 - 2021-11","text":""},{"location":"admin/release_notes/version_0.9.html#added","title":"Added","text":"<ul> <li>#155 Contribution policy updated in Readme</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#fixed","title":"Fixed","text":"<ul> <li>#129 Update filters, forms, add filters to api.</li> <li>#148 move diff2html to be locally served</li> <li>#154 Fix report bar chart overlap</li> <li>#161 Fix configuration compliance export gives traceback</li> <li>#164 Fixes the export functionality for configuration compliance list view.</li> <li>#166 fix configuration and overview reporting csv exports</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#v099-2021-10","title":"v0.9.9 - 2021-10","text":""},{"location":"admin/release_notes/version_0.9.html#fixed_1","title":"Fixed","text":"<ul> <li>#146 Removed custom fields from showing in Configuration Overview ListView.</li> <li>#145 Rename all Filterset to be compliant with Nautobot naming convention.</li> <li>#143 Added appropriate metadata tag to jobs.</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#v098-2021-10","title":"v0.9.8 - 2021-10","text":""},{"location":"admin/release_notes/version_0.9.html#fixed_2","title":"Fixed","text":"<ul> <li>#139 Fixing missing and extra fields, for edge cases.</li> <li>#134 Replace enable_golden with enable_intended in default settings.</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#v097-2021-09","title":"v0.9.7 - 2021-09","text":""},{"location":"admin/release_notes/version_0.9.html#fixed_3","title":"Fixed","text":"<ul> <li>#130 SSH Sessions does not die with celery workers, by adding context manager #128</li> <li>#125 Update search filterset</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#added_1","title":"Added","text":"<ul> <li>#126 Add more robust checking for platform</li> <li>#115 Update docs to be more clear on how to use config context</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#v096-2021-09","title":"v0.9.6 - 2021-09","text":""},{"location":"admin/release_notes/version_0.9.html#fixed_4","title":"Fixed","text":"<ul> <li>#95 Fix credential escaping issues on Git</li> <li>#113 Clean up and normalize GraphQL decorator</li> <li>#41 Fail Gracefully when platform is missing or wrong, bump nautobot-plugin-nornir version</li> <li>#104 Fail Gracefully when Device queryset is empty</li> <li>#109 Account for Nautobot 1.0/1.1 template change</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#added_2","title":"Added","text":"<ul> <li>#103 Add manage commands for jobs</li> <li>#108 Update docs and add quick start guide</li> <li>#105 Added structure data config compliance</li> <li>#119 Migrate to Github Actions</li> <li>#121 Moved to Celery for development environment<ul> <li>Added Mysql to development environment</li> </ul> </li> </ul>"},{"location":"admin/release_notes/version_0.9.html#v095-2021-07","title":"v0.9.5 - 2021-07","text":""},{"location":"admin/release_notes/version_0.9.html#fixed_5","title":"Fixed","text":"<ul> <li>#90 Loosen Nautobot version</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#v094-2021-06","title":"v0.9.4 - 2021-06","text":""},{"location":"admin/release_notes/version_0.9.html#added_3","title":"Added","text":"<ul> <li>#87 Added the ability to map arbitrary slug to proper netutils expected network_os</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#fixed_6","title":"Fixed","text":"<ul> <li>#87 Dispatcher docs and update dependency for nautobot-plugin-nornir</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#v093-2021-06-19","title":"v0.9.3 - 2021-06-19","text":""},{"location":"admin/release_notes/version_0.9.html#added_4","title":"Added","text":"<ul> <li>#81 Added changelog</li> <li>#74 Added hover text to icon on app home screen</li> <li>#84 Added auto-deploy to PyPI</li> </ul>"},{"location":"admin/release_notes/version_0.9.html#fixed_7","title":"Fixed","text":"<ul> <li>#72 Fix uniqueness constraint on update_or_create of config compliance model</li> <li>#75 Updated doc for various images and links</li> <li>#80 Fix navigation when not using compliance</li> <li>#81 Fix settings to set to null instead cascade on delete when removing git repo</li> </ul>"},{"location":"admin/release_notes/version_1.0.html","title":"v1.0 Release Notes","text":"<ul> <li>Added support for Jinja2Filters to be be used in configuration generation</li> <li>Added support for multiple repos</li> <li>Add Git datasource to load GC properties</li> <li>Added support for nautobot secrets group on git repos</li> <li>Changed the release policy</li> <li>Updated navigation to a dedicated top level menu</li> </ul>"},{"location":"admin/release_notes/version_1.0.html#v103-2022-06","title":"v1.0.3 - 2022-06","text":""},{"location":"admin/release_notes/version_1.0.html#fixed","title":"Fixed","text":"<ul> <li>#257 Resolved template_content displaying SoT AGG link on Device detail page if Device not in scope of GoldenConfigSetting<ul> <li>Change to pull version from package instead of static variable</li> </ul> </li> </ul>"},{"location":"admin/release_notes/version_1.0.html#v102-2022-05","title":"v1.0.2 - 2022-05","text":""},{"location":"admin/release_notes/version_1.0.html#fixed_1","title":"Fixed","text":"<ul> <li>#246 Dependabot update to Docker redis-7.x</li> <li>#233 Dependabot update to paramiko-2.10.1</li> <li>#251 Add description to CSV config replace export</li> </ul>"},{"location":"admin/release_notes/version_1.0.html#v101-2022-05","title":"v1.0.1 - 2022-05","text":""},{"location":"admin/release_notes/version_1.0.html#fixed_2","title":"Fixed","text":"<ul> <li>#238 Fixed repo/docs/homepage links for PyPI</li> <li>#243 Removing unneed javascript source as it is part of #243</li> </ul>"},{"location":"admin/release_notes/version_1.0.html#v100-2022-04","title":"v1.0.0 - 2022-04","text":""},{"location":"admin/release_notes/version_1.0.html#added","title":"Added","text":"<ul> <li>#180 Added Renovate for proactive package management</li> <li>#158 Allow for Jinja2 Filters to be used by GoldenConfig templates</li> <li>#167 Added support for multiple repos</li> <li>#205 Added support for multiple repos via multiple golden config settings</li> <li>#206 Add Git datasource to load GC properties</li> <li>#218 Added ability to storre SoTAgg field leveraging Nautobot saved GraphQl query</li> <li>#225 Added support for nautobot secrets group on git repos</li> <li>#234 Minor update to FAQ</li> </ul>"},{"location":"admin/release_notes/version_1.0.html#changed","title":"Changed","text":"<ul> <li>#171 Changed the release policy</li> <li>#158 Changed variable job_result to nautobot_job</li> <li>#186 Update mariadb Docker tag to v10.7</li> <li>#187 Update postgres Docker tag to v14</li> <li>#188 Update Markdown dependency</li> <li>#190 Update to Nautobot 1.2.0</li> <li>#190 Remove Nautobot 1.0 specific code</li> <li>#211 Update dependency mariadb to v10.8</li> <li>#229 Updated navigation to a dedicated top level menu</li> </ul>"},{"location":"admin/release_notes/version_1.0.html#fixed_3","title":"Fixed","text":"<ul> <li>#176 Fixed Pylint issue</li> <li>#182 Add reference to Nornir app for installation</li> <li>#183 Fixed documentation for sot_agg_transposer default</li> <li>#184 Fix markdown links in quick-start</li> <li>#194 Detailed Error Handling in get_job_filter helper</li> <li>#229 Fixed #165, Configuration Compliance List View \"Device\" filter doesn't work</li> </ul>"},{"location":"admin/release_notes/version_1.1.html","title":"v1.1 Release Notes","text":"<ul> <li>Updates to filters and bug fixes</li> </ul>"},{"location":"admin/release_notes/version_1.1.html#announcements","title":"Announcements","text":"<ul> <li>Nautobot Golden Config <code>1.2.X</code> will remove scope as a JSON payload in GoldenConfigSetting to be replaced with DynamicGroups</li> <li>Nautobot Golden Config <code>1.2.X</code> will require Nautobot <code>v1.4.X</code> or greater</li> </ul>"},{"location":"admin/release_notes/version_1.1.html#v113-2022-08","title":"v1.1.3 - 2022-08","text":""},{"location":"admin/release_notes/version_1.1.html#fixed","title":"Fixed","text":"<ul> <li>#329 Change the pivot to use slug as name could have special characters that cause failures: Cherry picked</li> </ul>"},{"location":"admin/release_notes/version_1.1.html#v112-2022-08","title":"v1.1.2 - 2022-08","text":""},{"location":"admin/release_notes/version_1.1.html#changed","title":"Changed","text":"<ul> <li>#322 Create release v1.1.2 and remove restrictions enforcing non-usage of beyond Nautobot 1.3.</li> </ul>"},{"location":"admin/release_notes/version_1.1.html#v111-2022-08","title":"v1.1.1 - 2022-08","text":""},{"location":"admin/release_notes/version_1.1.html#fixed_1","title":"Fixed","text":"<ul> <li>#260 Server Error when viewing Compliance Report : Cherry picked <li>#309 Fix duplicate entries on home view:  Cherry picked</li>"},{"location":"admin/release_notes/version_1.1.html#v110-2022-06","title":"v1.1.0 - 2022-06","text":""},{"location":"admin/release_notes/version_1.1.html#fixed_2","title":"Fixed","text":"<ul> <li>#281 Fixes Views for Nautobot 1.3 Settings, backwards compatible with Nautobot 1.2</li> <li>#270 Optimize GoldenConfig home view to improve scaling with &gt; 1 GoldenConfigSetting via query annotations</li> </ul>"},{"location":"admin/release_notes/version_1.1.html#added","title":"Added","text":"<ul> <li>#267 Add filterset to the GoldenConfigSettingViewSet</li> <li>#262 Add filter for slug on ComplianceFeature</li> </ul>"},{"location":"admin/release_notes/version_1.2.html","title":"v1.2 Release Notes","text":"<ul> <li>Move GoldenConfigSetting scope to the use of DynamicGroups</li> <li>Drop support of Nautobot &lt;1.4.X</li> <li>Update docs to mkdocs and read the docs hosting</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#v124-2022-12","title":"v1.2.4 - 2022-12","text":""},{"location":"admin/release_notes/version_1.2.html#fixed","title":"Fixed","text":"<ul> <li>#382 Fixed issue on Golden Config Home Export Inconsistent on filtering.</li> <li>#390 Update ordered compliant view to only show \"config\" vs both intended and actual.</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#v123-2022-11","title":"v1.2.3 - 2022-11","text":""},{"location":"admin/release_notes/version_1.2.html#fixed_1","title":"Fixed","text":"<ul> <li>#356 Fix Compliance Rule list view filtering on platform is broken.</li> <li>#385 Fix Compliance Export not working.</li> <li>#384 Fix issue where not correctly rendering intended actual configs on compliance view</li> <li>#387 Fix filter to be in line with Nautobot 1.4, make logging optional in testing.</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#v122-2022-10","title":"v1.2.2 - 2022-10","text":""},{"location":"admin/release_notes/version_1.2.html#fixed_2","title":"Fixed","text":"<ul> <li>#369 Using of runner app serial is causing an \"InterfaceError: connection already closed\" error.</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#changed","title":"Changed","text":"<ul> <li>#367 Add suggested custom CSS for mkdocstrings indentation.</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#v121-2022-10","title":"v1.2.1 - 2022-10","text":""},{"location":"admin/release_notes/version_1.2.html#fixed_3","title":"Fixed","text":"<ul> <li>#350 Fix lingering ssh connections by adding a close_connections in completed stage of processor.</li> <li>#317 Fix The CI builds the Nautobot container two times in the unittests step.</li> <li>#307 Fix <code>Bulk Delete</code> not always working on config compliance objects.</li> <li>#358 Fix code block formatting in app_getting_started.md.</li> <li>#352 Fix clearing DB connections between threads.</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#changed_1","title":"Changed","text":"<ul> <li>#361 Adds environment variable to disable git prompts.</li> <li>#362 Optimizing refreshing of repos when running jobs.</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#v120-2022-08","title":"v1.2.0 - 2022-08","text":""},{"location":"admin/release_notes/version_1.2.html#changed_2","title":"Changed","text":"<ul> <li>#323 Disable enforcement of <code>max_version</code> check and update admin install policy to indicate the same.</li> <li>#321 Change source class to align with nautobot v1.4.0.</li> <li>#324 Performance enhancements for dynamic groups.</li> <li>#325 Doc updates.</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#fixed_4","title":"Fixed","text":"<ul> <li>#314 Fixed Tag filtering not working in job launch form</li> <li>#316 &amp; #313 Update doc links for new read the docs</li> <li>#306 Fix ability to run docs locally</li> <li>#304 &amp; #305 Fix yaml line issues</li> <li>#321 Resolving deprecation warning from upgrading to Nautobot v1.4.0.</li> <li>#324 Provide performance enhancements to querying DynamicGroup members.</li> <li>#328 Update container to be variable rather than hard code to py3.7.</li> <li>#327 Change the pivot to use slug as name could have special characters that cause failures</li> <li>#323 Convert to slug to match view</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#v120b1-2022-08","title":"v1.2.0b1 - 2022-08","text":""},{"location":"admin/release_notes/version_1.2.html#added","title":"Added","text":"<ul> <li>#291 Updated codeowners</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#changed_3","title":"Changed","text":"<ul> <li>#288 DynamicGroup Support</li> <li>#288 Updated invoke tasks to current standards</li> <li>#288 Initial changes for CI to work with latest pattern</li> <li>#288 GoldenConfigSetting.scope is not a property that maps to GoldenConfigSetting.dynamic_group.filter</li> <li>#288 GoldenConfigSetting.scope now has a setter method to create a DynamicGroup<ul> <li>Scope of Device objects can only be updated via the DynamicGroup is using the UI</li> <li>The setter is for backwards compantibility for existing automation against the API</li> </ul> </li> <li>#280 Updated docs in preparation for doc centralization process</li> <li>#289 Update Environment setup to NTC Standards</li> <li>#287 Updated copy button to use Nautobot's standard copy functionality rather than one off</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#fixed_5","title":"Fixed","text":"<ul> <li>#260 Fixed issue with Compliance Report when values were None</li> <li>#299 Updated Readme images to render properly on PyPi, fixed other links</li> </ul>"},{"location":"admin/release_notes/version_1.2.html#removed","title":"Removed","text":"<ul> <li>#288 Nautobot &lt;1.4.0 support</li> </ul>"},{"location":"admin/release_notes/version_1.3.html","title":"v1.3 Release Notes","text":"<ul> <li>Add the ability to update Intended Configuration for multiple use cases, supporting rendering of secrets out of the box.</li> <li>Enable Routine Testing Against Upstream Nautobot versions to ensure continuous compatibility.</li> </ul>"},{"location":"admin/release_notes/version_1.3.html#v131-2022-12","title":"v1.3.1 - 2022-12","text":"<ul> <li>#411 - Fix issue where logs were causing an issue.</li> </ul>"},{"location":"admin/release_notes/version_1.3.html#v130-2022-12","title":"v1.3.0 - 2022-12","text":""},{"location":"admin/release_notes/version_1.3.html#added","title":"Added","text":"<ul> <li>#344 - Enable routine testing against upstream Nautobot versions to ensure continuous compatibility.</li> <li>#339 - Add the ability to post-process Intended Configuration for multiple use cases, supporting rendering of secrets out of the box.</li> </ul>"},{"location":"admin/release_notes/version_1.3.html#changed","title":"Changed","text":"<ul> <li>#378 - Update nornir job logging to provide more feedback on the steps that are taking place.</li> <li>#365 - Add slack notify after release to Github Actions workflow.</li> </ul>"},{"location":"admin/release_notes/version_1.3.html#fixed","title":"Fixed","text":"<ul> <li>#369 - Fix issue with runner serial resulting in <code>InterfaceError: connection already closed</code> error.</li> <li>#398 - Fix incorrect relative link in app_feature_compliance.md.</li> </ul>"},{"location":"admin/release_notes/version_1.4.html","title":"v1.4 Release Notes","text":"<ul> <li>Change min version of Nautobot from 1.4.0 to 1.5.3 which is required for the use of NautobotUIViewset, Notes mixins etc.</li> </ul>"},{"location":"admin/release_notes/version_1.4.html#v142-2023-08","title":"v1.4.2 - 2023-08","text":""},{"location":"admin/release_notes/version_1.4.html#changed","title":"Changed","text":"<ul> <li>#519 - docs-only: large fixes and template troubleshooting section.</li> </ul>"},{"location":"admin/release_notes/version_1.4.html#fixed","title":"Fixed","text":"<ul> <li>#492 - Fix count of in scope devices on settings detail view.</li> <li>#498 - Fix deepdiff dependency.</li> <li>#501 - Update docs for adding CustomField data with datasources.</li> <li>#503 - Switch from deprecated FilterSet to new FilterSetMixin.</li> <li>#504 - Fix extend queryfilter to export.</li> <li>#511 - Fix <code>log_failure</code> function missing argument.</li> <li>#523 - Fix docs site by pinning dev dependencies.</li> <li>#530 - Fix, removing ConfigCompliance model import from 0005 migration.</li> </ul>"},{"location":"admin/release_notes/version_1.4.html#v141-2023-05","title":"v1.4.1 - 2023-05","text":""},{"location":"admin/release_notes/version_1.4.html#fixed_1","title":"Fixed","text":"<ul> <li>#488 - Fix Golden Config Settings Buttons.</li> </ul>"},{"location":"admin/release_notes/version_1.4.html#v140-2023-05","title":"v1.4.0 - 2023-05","text":""},{"location":"admin/release_notes/version_1.4.html#added","title":"Added","text":"<ul> <li>#445 - Add validation for Settings sot_agg_query.</li> <li>#449 - Allows for custom kwargs to <code>get_secret_by_secret_group_slug</code>.</li> <li>#470 - Enhance UI settings detail object view.</li> <li>#473 - Add status selection field to job filtering.</li> <li>#480 - Add compliance summary to default tenant view.</li> </ul>"},{"location":"admin/release_notes/version_1.4.html#changed_1","title":"Changed","text":"<ul> <li>#414 - Update application description for UI.</li> <li>#407 - Update branching policy in contributing docs.</li> <li>#417 - Changed extends base.html to extends generic/object_detail.html.</li> <li>#434 - Upgrade deepdiff dependency to 6.2.0.</li> <li>#451 - Tune Dependabot.</li> <li>#459 - Update tasks.py to meet current standards.</li> <li>#464 - Update ordering on compliance views.</li> <li>#471 - Migrate to using NautobotUIViewset and other initial 2.x prep work.</li> <li>#481 - Update filtersets for rack-group to extend proper TreeNode parent.</li> </ul>"},{"location":"admin/release_notes/version_1.4.html#fixed_2","title":"Fixed","text":"<ul> <li>#436 - Update FAQ for how compliance works.</li> <li>#444 - <code>app_faq.md</code> references incorrect <code>Cisco IOS XR</code> platform slug.</li> <li>#446 - Fix mysql not working in github actions.</li> <li>#450 - Make ConfigReplace export match import.</li> <li>#456 - Fix postprocessing to use Sandbox Jinja2 environment.</li> <li>#461 - Moves dependabot config to proper location.</li> <li>#463 - Fix Json render in compliance reporting template.</li> <li>#468 - Fix GoldenConfig list view and csv export.</li> <li>#474 - Docs update: Fix multiple typos.</li> </ul>"},{"location":"admin/release_notes/version_1.5.html","title":"v1.5 Release Notes","text":"<ul> <li>Add ability to update JSON based compliance via a job and have git integrations.</li> <li>Made custom compliance a boolean to support both JSON or CLI custom compliance types.</li> <li>Add metrics for Golden Config app.</li> <li>Add jinja settings support.</li> <li>Updated Filters for various models, including adding an experimental <code>_isnull</code> on DateTime objects.</li> <li>Supports Nautobot &gt;=1.6.1,&lt;2.0.0.</li> </ul>"},{"location":"admin/release_notes/version_1.5.html#v150-2023-08","title":"v1.5.0 - 2023-08","text":""},{"location":"admin/release_notes/version_1.5.html#added","title":"Added","text":"<ul> <li>#455 - Add metrics for Golden Config app.</li> <li>#485 - Custom compliance for CLI and JSON rules.</li> <li>#487 - Implement native JSON support.</li> <li>#527 - Add the ability to update Jinja environment setting from nautobot_config.</li> <li>#558 - Updated Filters for various models, including adding an experimental <code>_isnull</code> on DateTime objects.</li> </ul>"},{"location":"admin/release_notes/version_1.5.html#changed","title":"Changed","text":"<ul> <li>#485 - Changed the behavior of custom compliance to a boolean vs toggle between cli, json, and custom.</li> </ul>"},{"location":"admin/release_notes/version_1.5.html#fixed","title":"Fixed","text":"<ul> <li>#505 - fixes imports and choice definitions in the compliance nornir play.</li> <li>#513 - Fixed issue with native JSON support with <code>get_config_element</code> function.</li> </ul>"},{"location":"admin/release_notes/version_1.6.html","title":"v1.6 Release Notes","text":"<ul> <li>Add ability to generate ConfigPlans for configurations that need to be deployed, based on multiple plan types.</li> <li>Add a job that can deploy config_set based on a generated ConfigPlan object.</li> <li>Add functionality to compliance result to provide a Remediation plan.</li> <li>Supports Nautobot &gt;=1.6.1,&lt;2.0.0.</li> </ul>"},{"location":"admin/release_notes/version_1.6.html#v163-2023-10","title":"v1.6.3 - 2023-10","text":""},{"location":"admin/release_notes/version_1.6.html#fixed","title":"Fixed","text":"<ul> <li>#668 - Removed unneeded lookup for GoldenConfigSetting</li> </ul>"},{"location":"admin/release_notes/version_1.6.html#v162-2023-09","title":"v1.6.2 - 2023-09","text":""},{"location":"admin/release_notes/version_1.6.html#fixed_1","title":"Fixed","text":"<ul> <li>#621 - Moved jinja to be locally scoped, this was causing issues with Jinja filters based on import order.</li> </ul>"},{"location":"admin/release_notes/version_1.6.html#v161-2023-09","title":"v1.6.1 - 2023-09","text":""},{"location":"admin/release_notes/version_1.6.html#changed","title":"Changed","text":"<ul> <li>#600 - Updated readme to include the additional use cases covered.</li> </ul>"},{"location":"admin/release_notes/version_1.6.html#fixed_2","title":"Fixed","text":"<ul> <li>#603 - Fix missing fields from the \"AllDevicesGoldenConfig\" Job.</li> <li>#609 - Fixed issue where not all jinja filers, specifically netutils were being loaded into Jinja environment.</li> <li>#609 - Fixed issues if a Job was never created since the feature was disabled, it would cause a stacktrace.</li> <li>#609 - Fixed issue where in GoldenConfigSetting page, dynamic group selection would not show all of the eligible options.</li> <li>#609 - Fixed issue where you could not fill in <code>jinja_env['undefined']</code> vars as a string, only a complex class.</li> <li>#609 - Added the ability to generate remediation configurations and store in ConfigRemediation model</li> </ul>"},{"location":"admin/release_notes/version_1.6.html#v160-2023-09","title":"v1.6.0 - 2023-09","text":""},{"location":"admin/release_notes/version_1.6.html#added","title":"Added","text":"<ul> <li>#573 - Added the ability to generate remediation configurations and store in ConfigRemediation model</li> <li>#573 - Added the ability to generate configurations that you plan to deploy from a variety of methods, such as Remediation, intended, manual, etc. via the ConfigPlan model.</li> <li>#573 - Added the ability to Deploy configurations from the ConfigPlan configurations to your network devices.</li> <li>#578 - Updated ComplianceRule and ComplianceRule forms to include tags.</li> </ul>"},{"location":"admin/release_notes/version_1.6.html#fixed_3","title":"Fixed","text":"<ul> <li>#585 - Remove Jquery dependency from Google APIs, inherit from Nautobot core instead.</li> <li>#577 - Fixed various forms fields and filters fields.</li> <li>#577 - Updated default has_sensitive_data boolean to False.</li> <li>#577 - Added warning message on views when required jobs are not enabled.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html","title":"v2.0 Release Notes","text":"<ul> <li>Updated <code>nautobot</code> to <code>2.0.0</code> and made associated changes.</li> <li>Integrated all relevant sections with <code>Platform.network_driver</code>.</li> <li>Added a standard way to provide error codes.</li> <li>Changed Config Compliance view to be based on model, not dynamic group and provide a <code>message</code> when they have drifted.</li> <li>Added constance settings (<code>DEFAULT_FRAMEWORK</code>, <code>GET_CONFIG_FRAMEWORK</code>, <code>MERGE_CONFIG_FRAMEWORK</code>, and <code>REPLACE_CONFIG_FRAMEWORK</code>) and customer_dispatcher to remove dispatcher_mapping.</li> <li>Moved config compliance view to be a tab within device instead of a dedicated page.</li> <li>Removed management command in favor of Nautobot Core's.</li> </ul> <p>Note</p> <p>Please see migrating guide for details on migration.</p>"},{"location":"admin/release_notes/version_2.0.html#v205-2024-05","title":"v2.0.5 2024-05","text":""},{"location":"admin/release_notes/version_2.0.html#fixed","title":"Fixed","text":"<ul> <li>#759 - Fix issue with Git Repo not syncing by changing to explicitly use class_path property.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#v204-2024-04","title":"v2.0.4 2024-04","text":""},{"location":"admin/release_notes/version_2.0.html#fixed_1","title":"Fixed","text":"<ul> <li>#749 - Corrected issue where consecutive Golden Config Jobs in All Golden Configs Job wouldn't execute if prior Job had an Exception raised.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#741 - Re-baked from the latest template.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#v203-2024-03","title":"v2.0.3 2024-03","text":""},{"location":"admin/release_notes/version_2.0.html#added","title":"Added","text":"<ul> <li>#736 - Add a boolean job parameter <code>fail_job_on_task_failure</code> which will determine whether a single task failure anywhere in the job-result should result in job-result status of failed vs successful.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#fixed_2","title":"Fixed","text":"<ul> <li>#736 - Fixes repo push and commit not executing if a exception was raised on any task inside a job.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#v202-2024-03","title":"v2.0.2 - 2024-03","text":""},{"location":"admin/release_notes/version_2.0.html#added_1","title":"Added","text":"<ul> <li>#707 - Added autoformat invoke command.</li> <li>#730 - Added app config schema generator and validator.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#fixed_3","title":"Fixed","text":"<ul> <li>#699 - Fixed stale reference to platform_slug_map.</li> <li>#719 - Fixed generate config plans Status filter.</li> <li>#715 - Fixed close threaded db connections during config deployment.</li> <li>#726 - Fixed objectchange log excludes for object_data_v2 data as well.</li> <li>#718 - Fixed logic to handle jobs requiring approvals.</li> <li>#724 - Fixed performance issue on UNIX file diff view.</li> <li>#724 - Fixed non-working repos list creation and syncing.</li> <li>#731 - Fixed missing right panel with config types.</li> <li>#734 - Fixed incorrect netutils_parser lookup.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#changed","title":"Changed","text":"<ul> <li>#691 - Changed repo name and references to nautobot-app-golden-config.</li> <li>#707 - Changed from pydocstyle to ruff.</li> <li>#707 - Changed release notes to towncrier based.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#v201-2023-12","title":"v2.0.1 - 2023-12","text":""},{"location":"admin/release_notes/version_2.0.html#fixed_4","title":"Fixed","text":"<ul> <li>#676 - Fixes docs for running config plan job in 2.0.</li> <li>#680 - Resolve RTD build issue.</li> <li>#684 - Fix repo sync not executing on any task failure.</li> <li>#685 - Cherry-pick #669 - Removed unneeded lookup for GoldenConfigSetting.</li> <li>#686 - Fix incorrect permissions.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#changed_1","title":"Changed","text":"<ul> <li>#658 - Cookie updated by NetworkToCode Cookie Drift Manager Tool.</li> <li>#671 - Finish Documentation Updates from Drift Manager.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#v200-2023-09","title":"v2.0.0 - 2023-09","text":""},{"location":"admin/release_notes/version_2.0.html#changed_2","title":"Changed","text":"<ul> <li>#575 - Updated <code>nautobot</code> to <code>2.0.0</code> and made associated changes.</li> <li>#575 - Changed dispatcher_mapping to custom_dispatcher and constance settings.</li> <li>#575 - Changed Config Compliance view to be based on model, not dynamic group and provide a <code>message</code> when they have drifted.</li> <li>#575 - Changed the location of the config compliance view to be a tab on device objects.</li> <li>#575 - Changed the linking on Configuration Overview to point to the detailed object to align with Nautobot standards.</li> <li>#575 - Inverted Config Plan logic to not show Completed Config Plans by default and have a button to see them.</li> <li>#575 - Change logic to always include jobs, regardless of which features are in use.</li> <li>#575 - Changed several of the URL locations of views, based on migration to viewsets and overall simplification of code.</li> <li>#575 - Changed models to better reflect actual state, such as not to allow nullable on characters and one-to-one from config compliance to device model.</li> <li>#575 - Changed any date/time reference to be django's <code>make_aware</code>.</li> <li>#575 - Changed Nornir Processor logic on failures to be recursive lookups.</li> <li>#575 - Updated diff2html to 3.4.43.</li> <li>#575 - Changed booleans to be consistent with Nautobot UI.</li> <li>#575 - Pinned django-pivot to 1.8.1 as that returns a  queryset.</li> <li>#575 - Various cleanup updates such as moving to viewsets, hyperlinked_text, moving matplot code, using Nautobot provided Git capabilities, updating development environment to NTC standards, etc.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#added_2","title":"Added","text":"<ul> <li>#575 - Introduced constance settings for DEFAULT_FRAMEWORK, GET_CONFIG_FRAMEWORK, MERGE_CONFIG_FRAMEWORK, and REPLACE_CONFIG_FRAMEWORK.</li> <li>#575 - Added error code framework.</li> <li>#575 - Added a setting for default_deploy_status to allow that to be configurable.</li> <li>#575 - Added a job to sync dynamic group and config compliance model.</li> <li>#575 - Added a custom logger capability to be able to handle stdout as well as nautobot job logs.</li> <li>#575 - Added copy buttons in several locations to allow for getting configurations easier.</li> <li>#575 - Added datasources yaml key to use network_driver but still backwards compatible to _slug.</li> </ul>"},{"location":"admin/release_notes/version_2.0.html#removed","title":"Removed","text":"<ul> <li>#575 - Remove the already deprecated \"Scope\" in favor of dynamic groups.</li> <li>#575 - Removed references to git repository tokens.</li> <li>#575 - Removed management command to run jobs in favor of Nautobot Core's usage.</li> <li>#575 - Removed platform_slug_map in favor of constance settings.</li> </ul>"},{"location":"admin/release_notes/version_2.1.html","title":"v2.1 Release Notes","text":"<ul> <li>Added support for XML Compliance.</li> <li>Hide Compliance tab if no compliance result exists.</li> </ul>"},{"location":"admin/release_notes/version_2.1.html#v212-2024-08","title":"v2.1.2 2024-08","text":""},{"location":"admin/release_notes/version_2.1.html#fixed","title":"Fixed","text":"<ul> <li>#792 - Fixed issue with dynamic groups not being called in 2.3.0.</li> <li>#800 - Fixed issue where compliance amongst other fields were not being updated when Django 4.2 was installed.</li> </ul>"},{"location":"admin/release_notes/version_2.1.html#changed","title":"Changed","text":"<ul> <li>#792 - Added an experimental <code>_manual_dynamic_group_mgmt</code> config to collect feedback on appropriate methodology, use at your own risk!!.</li> </ul>"},{"location":"admin/release_notes/version_2.1.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#786 - Fixed incorrect test data setup for <code>test_tags_filter()</code> test for <code>ConfigPlanFilterTestCase</code>.</li> <li>#788 - Rebaked from the cookie <code>nautobot-app-v2.3.0</code>.</li> </ul>"},{"location":"admin/release_notes/version_2.1.html#v211-2024-07","title":"v2.1.1 - 2024-07","text":""},{"location":"admin/release_notes/version_2.1.html#fixed_1","title":"Fixed","text":"<ul> <li>#773 - Fixed deepdiff dependency range.</li> </ul>"},{"location":"admin/release_notes/version_2.1.html#dependencies","title":"Dependencies","text":"<ul> <li>#769 - Updated django-pivot to ~1.9.0.</li> </ul>"},{"location":"admin/release_notes/version_2.1.html#documentation","title":"Documentation","text":"<ul> <li>#771 - Updated navigation tree for documentation updates for 2.1 release notes and XML compliance.</li> <li>#775 - Add FAQ for deepdiff and numpy dependency issue.</li> <li>#776 - Updated app config and urls config for providing link to documentation.</li> </ul>"},{"location":"admin/release_notes/version_2.1.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#769 - Added view tests for ConfigComplianceUIViewSet.</li> </ul>"},{"location":"admin/release_notes/version_2.1.html#v210-2024-05","title":"v2.1.0 - 2024-05","text":""},{"location":"admin/release_notes/version_2.1.html#added","title":"Added","text":"<ul> <li>#708 - Add Support for XML Compliance</li> </ul>"},{"location":"admin/release_notes/version_2.1.html#fixed_2","title":"Fixed","text":"<ul> <li>#723 - Hide compliance tab in device view if no compliance results exist.</li> </ul>"},{"location":"admin/release_notes/version_2.2.html","title":"v2.2 Release Notes","text":"<p>This document describes all new features and changes in the release. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"admin/release_notes/version_2.2.html#release-overview","title":"Release Overview","text":"<ul> <li>Added Python 3.12 support.</li> <li>Added REST API endpoint for Jinja as first part of journey towards a jinja live editor.</li> </ul>"},{"location":"admin/release_notes/version_2.2.html#v222-2024-12-17","title":"v2.2.2 (2024-12-17)","text":""},{"location":"admin/release_notes/version_2.2.html#added","title":"Added","text":"<ul> <li>#840 - Added GraphQL output to the \"Generate Intended Config\" view.</li> <li>#841 - Added GraphQL query form field to the \"Generate Intended Config\" view.</li> <li>#844 - Added a diff output to the \"Generate Intended Config\" view and associated REST API.</li> </ul>"},{"location":"admin/release_notes/version_2.2.html#fixed","title":"Fixed","text":"<ul> <li>#849 - Fixed failing tests in Nautobot v2.3.13.</li> </ul>"},{"location":"admin/release_notes/version_2.2.html#v221-2024-11-27","title":"v2.2.1 (2024-11-27)","text":""},{"location":"admin/release_notes/version_2.2.html#added_1","title":"Added","text":"<ul> <li>#827 - Added a web ui for Jinja template developers to render intended configurations.</li> </ul>"},{"location":"admin/release_notes/version_2.2.html#fixed_1","title":"Fixed","text":"<ul> <li>#831 - Resolved issue with tests failing in Nautobot 2.3.11.</li> <li>#835 - Resolved error when accessing the Golden Config Settings list view in Nautobot v2.3.11 and higher.</li> </ul>"},{"location":"admin/release_notes/version_2.2.html#v220-2024-11-04","title":"v2.2.0 (2024-11-04)","text":""},{"location":"admin/release_notes/version_2.2.html#added_2","title":"Added","text":"<ul> <li>#803 - Added Python 3.12 support.</li> <li>#824 - Added a REST API endpoint for Jinja template developers to render intended configurations from templates in an arbitrary git repository.</li> </ul>"},{"location":"admin/release_notes/version_2.2.html#changed","title":"Changed","text":"<ul> <li>#814 - Changed the Git commit message of GC Jobs to be configurable.</li> </ul>"},{"location":"admin/release_notes/version_2.2.html#fixed_2","title":"Fixed","text":"<ul> <li>#743 - Fixed improperly rendered panels in device and location views.</li> <li>#810 - Fixed custom compliance to work with non-string objects.</li> </ul>"},{"location":"admin/release_notes/version_2.2.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#0 - Rebaked from the cookie <code>nautobot-app-v2.4.0</code>.</li> <li>#803 - Rebaked from the cookie <code>nautobot-app-v2.3.2</code>.</li> <li>#823 - Changed model_class_name in .cookiecutter.json to a valid model to help with drift management.</li> <li>#824 - Updated multiple tests to use the faster <code>setUpTestData</code> instead of <code>setUp</code>. Fixed incorrect base class on <code>ConfigPlanTest</code>.</li> </ul>"},{"location":"admin/release_notes/version_2.3.html","title":"v2.3 Release Notes","text":"<p>This document describes all new features and changes in the release. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"admin/release_notes/version_2.3.html#release-overview","title":"Release Overview","text":"<ul> <li>Added a <code>branch</code> parameter to the \"Generate Intended Config\" view.</li> <li>Fixed some bugs in the UI for device compliance and config compliance views.</li> </ul>"},{"location":"admin/release_notes/version_2.3.html#v230-2025-02-03","title":"v2.3.0 (2025-02-03)","text":""},{"location":"admin/release_notes/version_2.3.html#added","title":"Added","text":"<ul> <li>#828 - Added <code>branch</code> parameter to generate intended config view.</li> </ul>"},{"location":"admin/release_notes/version_2.3.html#changed","title":"Changed","text":"<ul> <li>#860 - Added a scroll bar and maximum height to the \"Configuration\" text boxes on the device configuration compliance tabs.</li> </ul>"},{"location":"admin/release_notes/version_2.3.html#fixed","title":"Fixed","text":"<ul> <li>#812 - Fixed a bug in the config compliance list view when customizing the table columns.</li> </ul>"},{"location":"admin/release_notes/version_2.3.html#housekeeping","title":"Housekeeping","text":"<ul> <li>Rebaked from the cookie <code>nautobot-app-v2.4.1</code>.</li> <li>#873 - Fixed failing tests in Nautobot v2.3.11 and higher.</li> <li>#857 - Fixed installation docs to make clear that configurations are sample configurations.</li> </ul>"},{"location":"admin/release_notes/version_2.4.html","title":"v2.4 Release Notes","text":"<p>This document describes all new features and changes in the release. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"admin/release_notes/version_2.4.html#release-overview","title":"Release Overview","text":"<ul> <li>Add the first iteration of Config Plans that support post processing functionality.<ul> <li>Provides the ability to view and approve config plans with post processing functions.</li> <li>Adds a pre deployment method to render the post processed config before deploying to network devices.</li> </ul> </li> <li>Fixes multiple permissions in the application views.</li> <li>Drop Python 3.8 support.</li> <li>Changed supported Nautobot to 2.4.2.</li> <li>Updated nautobot-plugin-nornir dependency minimum to 2.2.1.</li> <li>Changed multiple detail views to use new component UI functionality.</li> </ul>"},{"location":"admin/release_notes/version_2.4.html#v241-2025-05-09","title":"v2.4.1 (2025-05-09)","text":""},{"location":"admin/release_notes/version_2.4.html#added","title":"Added","text":"<ul> <li>#898 - Added tests to ensure that mkdocs release notes are properly set.</li> <li>#921 - Add testing for the two issues with mkdocs versus markdown rendering and associated fixes.</li> </ul>"},{"location":"admin/release_notes/version_2.4.html#changed","title":"Changed","text":"<ul> <li>#886 - Updated the generate intended config api to perform a shallow git clone.</li> </ul>"},{"location":"admin/release_notes/version_2.4.html#fixed","title":"Fixed","text":"<ul> <li>#794 - Fixed Git Repo Sync issue when multiple platforms use the same network_driver.</li> <li>#881 - Fixed generate intended config view to use Golden Config <code>sot_agg_transposer</code>.</li> <li>#887 - Fixed copy button not hidden on diff tab in generate intended config tool.</li> <li>#924 - Fixed copy button not working on detail views.</li> <li>#906 - Fix missing post processing enable check in deploy task.</li> </ul>"},{"location":"admin/release_notes/version_2.4.html#housekeeping","title":"Housekeeping","text":"<ul> <li>Rebaked from the cookie <code>nautobot-app-v2.4.2</code>.</li> </ul>"},{"location":"admin/release_notes/version_2.4.html#v240-2025-02-20","title":"v2.4.0 (2025-02-20)","text":""},{"location":"admin/release_notes/version_2.4.html#added_1","title":"Added","text":"<ul> <li>#875 - Added Config Plan Post Processing to Config plan detail view.</li> <li>#875 - Added Config plan post processing to configuration deployment stage.</li> <li>#875 - Drop Python 3.8 support.</li> </ul>"},{"location":"admin/release_notes/version_2.4.html#changed_1","title":"Changed","text":"<ul> <li>#866 - Changed compliance_feature, compliance_rule, config_remove, config_replace, and config_remediation detail views to new component UI.</li> <li>#866 - Changed the supported Nautobot to 2.4.2.</li> </ul>"},{"location":"admin/release_notes/version_2.4.html#fixed_1","title":"Fixed","text":"<ul> <li>#706 - Fixed filtering when using a dynamic group of groups</li> <li>#781 - Fixed UniqueViolation error when applying migration 0029 with multiple config plans sharing same device, date and plan_type.</li> <li>#846 - Fixed missing provides content check for GC settings syncing from Git Repo.</li> <li>#863 - Updated the queryset altering to be after permissions restriction for config compliance list view.</li> <li>#863 - Updated the queryset before rendering the compliance reporting to be after permissions restriction.</li> </ul>"},{"location":"admin/release_notes/version_2.4.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#809 - Added management command <code>generate_app_test_data</code> to generate sample data for development environments.</li> <li>#890 - Added upper bound for Nautobot version so that Nautobot does not get upgraded automatically to an unsupported version.</li> </ul>"},{"location":"admin/troubleshooting/index.html","title":"Troubleshooting Overview","text":"<p>In an effort to help with troubleshooting, each expected error, will now emit an error ID, in the format of <code>E3XXX</code>, such as <code>E3003: There is currently no CLI-config parser support for platform network_driver</code><code>, preemptively failed.</code>. The idea will be to define the error, the error message and some recommended troubleshooting steps or even potentially some fixes.</p> <p>This is an ongoing effort, but the foundation has been built.</p> <p>Within the Nautobot ecosystem, you may see various errors, they are distributed between 3 libraries as followed.</p> Error Range App Docs E1001-E1999 Nornir Nautobot E2001-E2999 Nautobot Plugin Nornir E3001-E3999 Nautobot Golden Config"},{"location":"admin/troubleshooting/E3001.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3001.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3001.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3001.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3001.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3002.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3002.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3002.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3002.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3002.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3003.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3003.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3003.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3003.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3003.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3004.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3004.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3004.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3004.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3004.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3005.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3005.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3005.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3005.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3005.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3006.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3006.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3006.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3006.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3006.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3007.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3007.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3007.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3007.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3007.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3008.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3008.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3008.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3008.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3008.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3009.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3009.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3009.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3009.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3009.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3010.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3010.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3010.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3010.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3010.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3011.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3011.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3011.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3011.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3011.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3012.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3012.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3012.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3012.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3012.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3013.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3013.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3013.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3013.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3013.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3014.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3014.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3014.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3014.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3014.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3015.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3015.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3015.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3015.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3015.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3016.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3016.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3016.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3016.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3016.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3017.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3017.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3017.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3017.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3017.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3018.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3018.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3018.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3018.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3018.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3019.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3019.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3019.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3019.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3019.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3020.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3020.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3020.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3020.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3020.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3021.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3021.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3021.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3021.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3021.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3022.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3022.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3022.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3022.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3022.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3023.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3023.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3023.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3023.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3023.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3024.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3024.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3024.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3024.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3024.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3025.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3025.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3025.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3025.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3025.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3026.html","title":"E30XX Details","text":""},{"location":"admin/troubleshooting/E3026.html#message-emitted","title":"Message emitted:","text":"<p><code>E30XX: Details coming soon</code></p>"},{"location":"admin/troubleshooting/E3026.html#description","title":"Description:","text":"<p>Description that is coming soon.</p>"},{"location":"admin/troubleshooting/E3026.html#troubleshooting","title":"Troubleshooting:","text":"<p>Troubleshooting that is coming soon.</p>"},{"location":"admin/troubleshooting/E3026.html#recommendation","title":"Recommendation:","text":"<p>Recommendation that is coming soon.</p>"},{"location":"admin/troubleshooting/E3027.html","title":"E3027 Details","text":""},{"location":"admin/troubleshooting/E3027.html#message-emitted","title":"Message emitted:","text":"<p><code>E3027: NornirNautobotException raised during backup tasks. Original exception message</code></p>"},{"location":"admin/troubleshooting/E3027.html#description","title":"Description:","text":"<p>A NornirNautobotException is raised during a Backup Job.</p>"},{"location":"admin/troubleshooting/E3027.html#troubleshooting","title":"Troubleshooting:","text":"<p>Review the exception message and worker logs to determine the cause of the failure.</p>"},{"location":"admin/troubleshooting/E3027.html#recommendation","title":"Recommendation:","text":"<p>This type of error is usually resource related or caused by a misconfiguration and should be logged as such.</p>"},{"location":"admin/troubleshooting/E3028.html","title":"E3028 Details","text":""},{"location":"admin/troubleshooting/E3028.html#message-emitted","title":"Message emitted:","text":"<p><code>E3028: NornirNautobotException raised during compliance tasks. Original exception message</code></p>"},{"location":"admin/troubleshooting/E3028.html#description","title":"Description:","text":"<p>A NornirNautobotException is raised during a Compliance Job.</p>"},{"location":"admin/troubleshooting/E3028.html#troubleshooting","title":"Troubleshooting:","text":"<p>Review the exception message and worker logs to determine the cause of the failure.</p>"},{"location":"admin/troubleshooting/E3028.html#recommendation","title":"Recommendation:","text":"<p>This type of error is usually resource related or caused by a misconfiguration and should be logged as such.</p>"},{"location":"admin/troubleshooting/E3029.html","title":"E3029 Details","text":""},{"location":"admin/troubleshooting/E3029.html#message-emitted","title":"Message emitted:","text":"<p><code>E3029: NornirNautobotException raised during intended tasks. Original exception message</code></p>"},{"location":"admin/troubleshooting/E3029.html#description","title":"Description:","text":"<p>A NornirNautobotException is raised during an Intended Job.</p>"},{"location":"admin/troubleshooting/E3029.html#troubleshooting","title":"Troubleshooting:","text":"<p>Review the exception message and worker logs to determine the cause of the failure.</p>"},{"location":"admin/troubleshooting/E3029.html#recommendation","title":"Recommendation:","text":"<p>This type of error is usually resource related or caused by a misconfiguration and should be logged as such.</p>"},{"location":"admin/troubleshooting/E3030.html","title":"E3030 Details","text":""},{"location":"admin/troubleshooting/E3030.html#message-emitted","title":"Message emitted:","text":"<p><code>E3030: Failure during (Backup, Intended, Compliance) Job(s).</code></p>"},{"location":"admin/troubleshooting/E3030.html#description","title":"Description:","text":"<p>A NornirNautobotException is raised during a Backup, Intended, or Compliance Job.</p>"},{"location":"admin/troubleshooting/E3030.html#troubleshooting","title":"Troubleshooting:","text":"<p>Review the exception message and worker logs to determine the cause of the failure.</p>"},{"location":"admin/troubleshooting/E3030.html#recommendation","title":"Recommendation:","text":"<p>This type of error is usually resource related or caused by a misconfiguration and should be logged as such.</p>"},{"location":"admin/troubleshooting/E3031.html","title":"E3031 Details","text":""},{"location":"admin/troubleshooting/E3031.html#message-emitted","title":"Message emitted:","text":"<p><code>E3031: Invalid XPath expression.</code></p>"},{"location":"admin/troubleshooting/E3031.html#description","title":"Description:","text":"<p>This error occurs when an invalid XPath expression is used in a Compliance Job, causing a <code>NornirNautobotException</code> to be raised.</p>"},{"location":"admin/troubleshooting/E3031.html#troubleshooting","title":"Troubleshooting:","text":"<p>Review the exception message and worker logs to determine the cause of the failure.</p>"},{"location":"admin/troubleshooting/E3031.html#recommendation","title":"Recommendation:","text":"<p>Ensure that you are using a valid XPath expression in the \"Config to Match\" section of your Compliance Rule.</p>"},{"location":"admin/troubleshooting/E3032.html","title":"E3032 Details","text":""},{"location":"admin/troubleshooting/E3032.html#message-emitted","title":"Message emitted:","text":"<p><code>E3032: Reference to {yaml_attr_name}: {yaml_attr_value}, is not unique. Please use platform_name key instead.</code></p>"},{"location":"admin/troubleshooting/E3032.html#description","title":"Description:","text":"<p>Syncing Golden Config properties using Datasource feature, but using non-unique key..</p>"},{"location":"admin/troubleshooting/E3032.html#troubleshooting","title":"Troubleshooting:","text":"<p>Check the YAML file for the <code>platform_slug</code> or <code>platform_network_driver</code> key. If it is not unique, then you need to use the <code>platform_name</code> key instead.</p>"},{"location":"admin/troubleshooting/E3032.html#recommendation","title":"Recommendation:","text":"<p>Migrate the YAML file keys from <code>platform_slug</code> or <code>platform_network_driver</code> to <code>platform_name</code>.</p>"},{"location":"admin/troubleshooting/E3033.html","title":"E3033 Details","text":""},{"location":"admin/troubleshooting/E3033.html#message-emitted","title":"Message emitted:","text":"<p><code>E3033: Reference to {yaml_attr_name}: {yaml_attr_value} is not available.</code></p>"},{"location":"admin/troubleshooting/E3033.html#description","title":"Description:","text":"<p>Searching for the platform key in the YAML file and it cannot be found in the database.</p>"},{"location":"admin/troubleshooting/E3033.html#troubleshooting","title":"Troubleshooting:","text":"<p>The platform key used in the YAML file cannot be found.</p>"},{"location":"admin/troubleshooting/E3033.html#recommendation","title":"Recommendation:","text":"<p>Check the YAML file for misspellings or incorrect values, if using <code>platform_slug</code> or <code>platform_network_driver</code>, then migrate to <code>platform_name</code> key instead.</p>"},{"location":"admin/troubleshooting/E3XXX.html","title":"E3XXX Details","text":""},{"location":"admin/troubleshooting/E3XXX.html#message-emitted","title":"Message emitted:","text":"<p><code>E3XXX: Un-Registered Error Code used.</code></p>"},{"location":"admin/troubleshooting/E3XXX.html#description","title":"Description:","text":"<p>This means a code snippet was calling get_error_code() with an error code that is not registered.</p>"},{"location":"admin/troubleshooting/E3XXX.html#troubleshooting","title":"Troubleshooting:","text":"<p>Find the error code in the traceback, and search for it in the codebase.</p>"},{"location":"admin/troubleshooting/E3XXX.html#recommendation","title":"Recommendation:","text":"<p>Add the error code to the <code>error_codes.py</code> file.</p>"},{"location":"dev/arch_decision.html","title":"Architecture Decision Records","text":"<p>The intention is to document deviations from a standard Model View Controller (MVC) design.</p>"},{"location":"dev/arch_decision.html#pivoting-compliance-view","title":"Pivoting Compliance View","text":"<p>The view that was preferred for compliance would be devices on y-axis but the features on the x-axis. However, the x-axis (features) cannot be known when building the Django model. The model ends up looking like:</p> Device feature Compliance nyc-rt01 aaa True nyc-rt01 ntp False nyc-rt01 dns False nyc-rt02 aaa True nyc-rt02 dns False <p>The expected view required expected is something like:</p> Device aaa dns ntp nyc-rt01 True False False nyc-rt02 True False <p>In order to accommodate this, <code>django-pivot</code> is used, which greatly simplifies building the query. However, <code>django-pivot</code> requires the ability to \"count\" versus a boolean. Because of that, there is a \"shadow\" field created that is set to 0 if False, and 1 if True. This is enforced on the <code>save</code> method of the <code>ConfigCompliance</code> model.</p>"},{"location":"dev/arch_decision.html#compliance-view","title":"Compliance View","text":"<p>Important to understand <code>Pivoting Compliance View</code> first. There is additional context for how to handle bulk deletes. The logic is to find all of the <code>ConfigCompliance</code> data, given a set of <code>Device</code> objects.</p> <p>Additionally, this makes use of the <code>alter_queryset</code> method, as at start time of the application all features are not necessarily set and needs to be a runtime query that sets the x and y axis correctly.</p> <p>The absence of data, meaning, a device that is does not have a feature, is the equivalent of a None.</p>"},{"location":"dev/arch_decision.html#dynamic-application-features","title":"Dynamic Application Features","text":"<p>There are features within the application that can be turned on/off for backup, compliance, and intended. When they are toggled, this will update what is shown in:</p> <ul> <li>Navigation</li> <li>Jobs</li> <li>Data Sources</li> <li>Tables</li> <li>Template Contents</li> </ul> <p>This is generally handled with a pattern similar to:</p> <pre><code>jobs = []\nif ENABLE_BACKUP:\n    jobs.append(BackupJob)\nif ENABLE_INTENDED:\n    jobs.append(IntendedJob)\nif ENABLE_COMPLIANCE:\n    jobs.append(ComplianceJob)\njobs.extend([AllGoldenConfig, AllDevicesGoldenConfig])\n</code></pre>"},{"location":"dev/arch_decision.html#home-view","title":"Home View","text":"<p>The Home view is generally based on the model <code>GoldenConfig</code>; however, in reality the view that shows up is based on the core <code>Device</code> model. This is because, when a device is included in the Dynamic Group, this does not mean that there is an entry in <code>GoldenConfig</code> yet. So there is nothing to see yet, such as the ability to click and run job on a device. It was confusing to users as to what was shown in the view vs what is in scope currently.</p> <p>This complicates things such that the view data is one level nested, from the Model. Meaning, the query is based on <code>Device</code>, but the data is primarily in <code>GoldenConfig</code>. Do accommodate, there is an annotated query, similar to:</p> <pre><code>        return self.queryset.filter(id__in=qs).annotate(\n            backup_config=F(\"goldenconfig__backup_config\"),\n            intended_config=F(\"goldenconfig__intended_config\"),\n</code></pre> <p>This allows the tables to be a bit simpler as the data is directly accessible without traversing the foreign key.</p>"},{"location":"dev/arch_decision.html#home-tables","title":"Home Tables","text":"<p>There is not a one-to-one for fields to data shown. There is custom logic that sees if the last ran date is the same as last successful data and renders either green or red. Here is an example of the code that is actually rendered (logic is within <code>_render_last_success_date</code> method):</p> <pre><code>    def render_backup_last_success_date(self, record, column):\n        \"\"\"Pull back backup last success per row record.\"\"\"\n        return self._render_last_success_date(record, column, \"backup\")\n</code></pre>"},{"location":"dev/arch_decision.html#filtering-logic","title":"Filtering Logic","text":"<p>The filtering logic happens in the <code>get_job_filter</code> function. Any consumer (job/view/etc) should use this to ensure everything is filtered in the same way.</p>"},{"location":"dev/arch_decision.html#diff-logic","title":"Diff logic","text":"<p>There is a function mapper for the diff logic. This allows for the diff logic to take on different processes for cli, json, and custom. This is enforced on the save method of <code>ConfigCompliance</code>.</p>"},{"location":"dev/arch_decision.html#dynamic-group","title":"Dynamic Group","text":"<p>There was originally a <code>scope</code> associated with the project, this was changed to a Dynamic Group to make use of the features within Core. There is backwards compatibility until version 2.0.0.</p>"},{"location":"dev/arch_decision.html#management-commands","title":"Management Commands","text":"<p>There is specific management commands to run the jobs associated with the project. In a future version, they will reference the management commands in core.</p>"},{"location":"dev/arch_decision.html#sot-aggregation","title":"SoT Aggregation","text":"<p>There is a custom SoT Aggregation method, originally this pre-dated Nautobot Core having saved queries and was a way to handle to have a saved query. Currently, it allows operators to transform data by providing a function to post process that data. This functionality is handled to code similar to:</p> <pre><code>    if PLUGIN_CFG.get(\"sot_agg_transposer\"):\n        try:\n            data = import_string(PLUGIN_CFG.get(\"sot_agg_transposer\"))(data)\n        except Exception as error:\n            return (400, {\"error\": str(error)})\n</code></pre>"},{"location":"dev/arch_decision.html#git-actions","title":"Git Actions","text":"<p>The data source contract is used for reading from Git, but extended for pushing to Git.</p>"},{"location":"dev/arch_decision.html#configuration-postprocessing","title":"Configuration Postprocessing","text":"<p>Intended configuration generated by Golden Config Intended feature is designed for comparing to the \"running\" configuration (assuring compliance comparing to the backup configuration). Using the default Intended configuration for remediation/provisioning of a network device configuration is not always possible. For instance, no secrets should be rendered to the Intended configuration, as it is stored in Git/Database, or maybe some reordering of commands is required to create a valid configuration artifact.</p> <p>The PROCESSING feature, that is enabled as a Dynamic Application Feature, exposes a single device UI and API view to manipulate the Intended configuration available for Golden Config, with extra processing steps. There are some default functions (i.e. <code>render_secrets</code>), but those can be expanded, and the order can be changed, via Nautobot configuration settings (<code>postprocessing_subscribed</code> and <code>postprocessing_callables</code>).</p> <p>Note</p> <p>This configuration generated after postprocessing is not stored either in the Database or in Git.</p> <p>Both API views, as commented, are only targeting ONE single device because being a synchronous operation (versus the rest of the features that are run asynchronously as Jobs), it could take too much time, and have an undesired impact in Nautobot performance.</p> <p>All the functions used in the post-processing chain require a consistent signature: <code>func(config_postprocessing: str, configs: models.GoldenConfig, request: HttpRequest) -&gt; str</code>.</p> <ul> <li><code>config_postprocessing: str</code>: it's the reference configuration to use as template to render.</li> <li><code>configs: models.GoldenConfig</code>: it contains reference to other configs (backup) that could be used to create remediation, and it contains the <code>Device</code> object to identify the GraphQL information to take from.</li> <li><code>request: HttpRequest</code>: it could contain special query params, and for the <code>render_secrets</code> one, it contains information about the <code>User</code> requesting it, to validate the permissions.</li> </ul> <p>Finally, it always returns the processing from the <code>config_processing</code>.</p> <p>The API view, under the path <code>config-postprocessing</code>, uses custom permissions, named <code>ConfigPushPermissions</code>, which ensures the user has general permissions for <code>nautobot_golden_config.view_goldenconfig</code>, and specific permissions to view the <code>Device</code> object requested.</p>"},{"location":"dev/arch_decision.html#renders-secrets","title":"Renders Secrets","text":"<p>It was decided to restrict the usage of Jinja filters to only the ones related to getting Nautobot secrets values (defined here), plus the <code>encrypt_&lt;vendor&gt;_type5</code> and <code>encrypt__&lt;vendor&gt;_type7</code> filters from Netutils. Remember that this function is not defined to replace the regular Jinja rendering done for creating the Intended configuration, only to add secrets information on the fly. This avoids undesired behavior on this synchronous operation.</p> <p>This function performs an additional permission validation, to check if the requesting user has permissions to view the <code>SecretsGroup</code> requested.</p>"},{"location":"dev/arch_decision.html#configuration-compliance","title":"Configuration Compliance","text":"<p>Over time device(s) platform may change; whether this is a device refresh or full replacement. A Django <code>post_save</code> signal is used on the <code>ConfigCompliance</code> model and provides a reliable and efficient way to manage configuration compliance objects. This signal deletes any <code>ConfigCompliance</code> objects that don't match the current platform. This decision was made to avoid compliance reporting inconsistencies that can arise when outdated or irrelevant objects remain in the database which were generated with the previous platform.</p> <p>This has a computational impact when updating a Device object's platform. This is similar to the computational impact of an SQL <code>cascade</code> option on a delete. This is largely unavoidable and should be limited in impact, such that it will only be the removal of the number of <code>ConfigCompliance</code> objects, which is no bigger than the number of  <code>Config Features</code>, which is generally intended to be a small amount.</p>"},{"location":"dev/arch_decision.html#configuration-deployment-and-remediation","title":"Configuration Deployment and Remediation","text":"<p>Configuration remediation and deployments of any of the attributes based on the configuration compliance object are calculated based on the last run of the <code>ConfigCompliance</code> job. After a configuration deployment to fix any of these attributes (remediation, intended, missing) a new <code>ConfigCompliance</code> job must be run before all the compliance results will be updated.</p>"},{"location":"dev/arch_decision.html#configuration-deployments-with-post-processing","title":"Configuration Deployments with Post Processing","text":"<p>Configuration with Post Processing requirements have the ability to change from the time a Config Plan is generated and approved to the time it is deployed. This is due to Post Processing callables being executed only when they're needed. Its important to understand that these functions will render the template and pull back the context data based on that specific query.</p>"},{"location":"dev/arch_decision.html#manual-configplans","title":"Manual ConfigPlans","text":"<p>When generating a manual <code>ConfigPlan</code> the Jinja2 template render has access to Django ORM methods like <code>.all()</code>, this also means that methods like <code>.delete()</code> can be called, the <code>render_template</code> functionality used by Golden Config inherits a Jinja2 Sandbox exception that will block unsafe calls. Golden Config will simply re-raise the exception <code>jinja2.exceptions.SecurityError: &gt; is not safely callable</code>.</p>"},{"location":"dev/arch_decision.html#hidden-jobs-and-jobbuttons","title":"Hidden Jobs and JobButtons","text":"<p>The configuration deployment and plans features of Golden Config come packaged with Jobs and JobButtons to execute the functionality. In order to to provide a repeatable and consistent behavior these Jobs and JobButtons are designed to only be executed via specialized views. They're not intended to be executed manually from the Jobs/JobButtons menus.</p>"},{"location":"dev/contributing.html","title":"Contributing to the App","text":"<p>The project is packaged with a light development environment based on <code>docker-compose</code> to help with the local development of the project and to run tests.</p> <p>The project is following Network to Code software development guidelines and is leveraging the following:</p> <ul> <li>Python linting and formatting: <code>pylint</code> and <code>ruff</code>.</li> <li>YAML linting is done with <code>yamllint</code>.</li> <li>Django unit test to ensure the app is working properly.</li> </ul> <p>Documentation is built using mkdocs. The Docker based development environment automatically starts a container hosting a live version of the documentation website on http://localhost:8001 that auto-refreshes when you make any changes to your local files.</p>"},{"location":"dev/contributing.html#creating-changelog-fragments","title":"Creating Changelog Fragments","text":"<p>All pull requests to <code>next</code> or <code>develop</code> must include a changelog fragment file in the <code>./changes</code> directory. To create a fragment, use your GitHub issue number and fragment type as the filename. For example, <code>2362.added</code>. Valid fragment types are <code>added</code>, <code>changed</code>, <code>deprecated</code>, <code>fixed</code>, <code>removed</code>, and <code>security</code>. The change summary is added to the file in plain text. Change summaries should be complete sentences, starting with a capital letter and ending with a period, and be in past tense. Each line of the change fragment will generate a single change entry in the release notes. Use multiple lines in the same file if your change needs to generate multiple release notes in the same category. If the change needs to create multiple entries in separate categories, create multiple files.</p> <p>Example</p> <p>Wrong changes/1234.fixed<pre><code>fix critical bug in documentation\n</code></pre></p> <p>Right changes/1234.fixed<pre><code>Fixed critical bug in documentation.\n</code></pre></p> <p>Multiple Entry Example</p> <p>This will generate 2 entries in the <code>fixed</code> category and one entry in the <code>changed</code> category.</p> changes/1234.fixed<pre><code>Fixed critical bug in documentation.\nFixed release notes generation.\n</code></pre> changes/1234.changed<pre><code>Changed release notes generation.\n</code></pre>"},{"location":"dev/contributing.html#branching-policy","title":"Branching Policy","text":"<p>The branching policy includes the following tenets:</p> <ul> <li>The <code>develop</code> branch is the branch of the next major and minor paired version planned.</li> <li>PRs intended to add new features should be sourced from the <code>develop</code> branch.</li> <li>PRs intended to fix issues in the Nautobot LTM compatible release should be sourced from the latest <code>ltm-&lt;major.minor&gt;</code> branch instead of <code>develop</code>.</li> </ul> <p>Golden Config will observe semantic versioning, as of 1.0. This may result in a quick turnaround in minor versions to keep pace with an ever-growing feature set.</p>"},{"location":"dev/contributing.html#backporting-to-older-releases","title":"Backporting to Older Releases","text":"<p>If you are backporting any fixes to a prior major or minor version of this app, please open an issue, comment on an existing issue, or post in the Network to Code Slack (channel <code>#nautobot</code>).</p> <p>We will create a <code>release-X.Y</code> branch for you to open your PR against and cut a new release once the PR is successfully merged.</p>"},{"location":"dev/contributing.html#release-policy","title":"Release Policy","text":"<p>Golden Config has currently no intended scheduled release schedule, and will release new features in minor versions.</p> <p>The steps taken by maintainers when creating a new release are documented in the release checklist.</p>"},{"location":"dev/dev_environment.html","title":"Building Your Development Environment","text":""},{"location":"dev/dev_environment.html#quickstart-guide","title":"Quickstart Guide","text":"<p>The development environment can be used in two ways:</p> <ol> <li>(Recommended) All services, including Nautobot, are spun up using Docker containers and a volume mount so you can develop locally.</li> <li>With a local Poetry environment if you wish to develop outside of Docker, with the caveat of using external services provided by Docker for the database (PostgreSQL by default, MySQL optionally) and Redis services.</li> </ol> <p>This is a quick reference guide if you're already familiar with the development environment provided, which you can read more about later in this document.</p>"},{"location":"dev/dev_environment.html#invoke","title":"Invoke","text":"<p>The Invoke library is used to provide some helper commands based on the environment. There are a few configuration parameters which can be passed to Invoke to override the default configuration:</p> <ul> <li><code>nautobot_ver</code>: the version of Nautobot to use as a base for any built docker containers (default: 2.0.0)</li> <li><code>project_name</code>: the default docker compose project name (default: <code>nautobot-golden-config</code>)</li> <li><code>python_ver</code>: the version of Python to use as a base for any built docker containers (default: 3.11)</li> <li><code>local</code>: a boolean flag indicating if invoke tasks should be run on the host or inside the docker containers (default: False, commands will be run in docker containers)</li> <li><code>compose_dir</code>: the full path to a directory containing the project compose files</li> <li><code>compose_files</code>: a list of compose files applied in order (see Multiple Compose files for more information)</li> </ul> <p>Using Invoke these configuration options can be overridden using several methods. Perhaps the simplest is setting an environment variable <code>INVOKE_NAUTOBOT_GOLDEN_CONFIG_VARIABLE_NAME</code> where <code>VARIABLE_NAME</code> is the variable you are trying to override. The only exception is <code>compose_files</code>, because it is a list it must be overridden in a YAML file. There is an example <code>invoke.yml</code> (<code>invoke.example.yml</code>) in this directory which can be used as a starting point.</p>"},{"location":"dev/dev_environment.html#docker-development-environment","title":"Docker Development Environment","text":"<p>Tip</p> <p>This is the recommended option for development.</p> <p>This project is managed by Python Poetry and has a few requirements to setup your development environment:</p> <ol> <li>Install Poetry, see the Poetry documentation for your operating system.</li> <li>Install Docker, see the Docker documentation for your operating system.</li> <li>Install Docker-compose, see the Docker-compose documentation for your operation system.</li> </ol> <p>Once you have Poetry and Docker installed you can run the following commands (in the root of the repository) to install all other development dependencies in an isolated Python virtual environment:</p> <pre><code>poetry shell\npoetry install\ninvoke build\ninvoke start\n</code></pre> <p>The Nautobot server can now be accessed at http://localhost:8080 and the live documentation at http://localhost:8001.</p> <p>To either stop or destroy the development environment use the following options.</p> <ul> <li>invoke stop - Stop the containers, but keep all underlying systems intact</li> <li>invoke destroy - Stop and remove all containers, volumes, etc. (This results in data loss due to the volume being deleted)</li> </ul>"},{"location":"dev/dev_environment.html#local-poetry-development-environment","title":"Local Poetry Development Environment","text":"<ul> <li>Create an <code>invoke.yml</code> file with the following contents at the root of the repo and edit as necessary</li> </ul> <pre><code>---\nnautobot_golden_config:\n  local: true\n</code></pre> <p>Run the following commands:</p> <pre><code>poetry shell\npoetry install --extras nautobot\nexport $(cat development/development.env | xargs)\nexport $(cat development/creds.env | xargs)\ninvoke start &amp;&amp; sleep 5\nnautobot-server migrate\n</code></pre> <p>Note</p> <p>If you want to develop on the latest develop branch of Nautobot, run the following command: <code>poetry add --optional git+https://github.com/nautobot/nautobot@develop</code>. After the <code>@</code> symbol must match either a branch or a tag.</p> <p>You can now run <code>nautobot-server</code> commands as you would from the Nautobot documentation for example to start the development server:</p> <pre><code>nautobot-server runserver 0.0.0.0:8080 --insecure\n</code></pre> <p>Nautobot server can now be accessed at http://localhost:8080.</p> <p>It is typically recommended to launch the Nautobot runserver command in a separate shell so you can keep developing and manage the webserver separately.</p>"},{"location":"dev/dev_environment.html#updating-the-documentation","title":"Updating the Documentation","text":"<p>Documentation dependencies are pinned to exact versions to ensure consistent results. For the development environment, they are defined in the <code>pyproject.toml</code> file.</p> <p>If you need to update any of the documentation dependencies to a newer version, make sure you copy the exact same versions pinned in <code>pyproject.toml</code> to the <code>docs/requirements.txt</code> file as well. The latter is used in the automated build pipeline on ReadTheDocs to build the live version of the documentation.</p>"},{"location":"dev/dev_environment.html#cli-helper-commands","title":"CLI Helper Commands","text":"<p>The project features a CLI helper based on Invoke to help setup the development environment. The commands are listed below in 3 categories:</p> <ul> <li><code>dev environment</code></li> <li><code>utility</code></li> <li><code>testing</code></li> </ul> <p>Each command can be executed with <code>invoke &lt;command&gt;</code>. All commands support the arguments <code>--nautobot-ver</code> and <code>--python-ver</code> if you want to manually define the version of Python and Nautobot to use. Each command also has its own help <code>invoke &lt;command&gt; --help</code></p>"},{"location":"dev/dev_environment.html#local-development-environment","title":"Local Development Environment","text":"<pre><code>  build            Build all docker images.\n  debug            Start Nautobot and its dependencies in debug mode.\n  destroy          Destroy all containers and volumes.\n  restart          Restart Nautobot and its dependencies in detached mode.\n  start            Start Nautobot and its dependencies in detached mode.\n  stop             Stop Nautobot and its dependencies.\n</code></pre>"},{"location":"dev/dev_environment.html#utility","title":"Utility","text":"<pre><code>  cli              Launch a bash shell inside the running Nautobot container.\n  create-user      Create a new user in django (default: admin), will prompt for password.\n  makemigrations   Run Make Migration in Django.\n  nbshell          Launch a nbshell session.\n</code></pre>"},{"location":"dev/dev_environment.html#testing","title":"Testing","text":"<pre><code>  ruff             Run ruff to perform code formatting and/or linting.\n  pylint           Run pylint code analysis.\n  markdownlint     Run pymarkdown linting.\n  tests            Run all tests for this app.\n  unittest         Run Django unit tests for the app.\n</code></pre>"},{"location":"dev/dev_environment.html#project-overview","title":"Project Overview","text":"<p>This project provides the ability to develop and manage the Nautobot server locally (with supporting services being Dockerized) or by using only Docker containers to manage Nautobot. The main difference between the two environments is the ability to debug and use pdb when developing locally. Debugging with pdb within the Docker container is more complicated, but can still be accomplished by either entering into the container (via <code>docker exec</code>) or attaching your IDE to the container and running the Nautobot service manually within the container.</p> <p>The upside to having the Nautobot service handled by Docker rather than locally is that you do not have to manage the Nautobot server. The Docker logs provide the majority of the information you will need to help troubleshoot, while getting started quickly and not requiring you to perform several manual steps and remembering to have the Nautobot server running in a separate terminal while you develop.</p> <p>Note</p> <p>The local environment still uses Docker containers for the supporting services (Postgres, Redis, and RQ Worker), but the Nautobot server is handled locally by you, the developer.</p> <p>Follow the directions below for the specific development environment that you choose.</p>"},{"location":"dev/dev_environment.html#poetry","title":"Poetry","text":"<p>Poetry is used in lieu of the \"virtualenv\" commands and is leveraged in both environments. The virtual environment will provide all of the Python packages required to manage the development environment such as Invoke. See the Local Development Environment section to see how to install Nautobot if you're going to be developing locally (i.e. not using the Docker container).</p> <p>The <code>pyproject.toml</code> file outlines all of the relevant dependencies for the project:</p> <ul> <li><code>tool.poetry.dependencies</code> - the main list of dependencies.</li> <li><code>tool.poetry.group.dev.dependencies</code> - development dependencies, to facilitate linting, testing, and documentation building.</li> </ul> <p>The <code>poetry shell</code> command is used to create and enable a virtual environment managed by Poetry, so all commands ran going forward are executed within the virtual environment. This is similar to running the <code>source venv/bin/activate</code> command with virtualenvs. To install project dependencies in the virtual environment, you should run <code>poetry install</code> - this will install both project and development dependencies.</p> <p>For more details about Poetry and its commands please check out its online documentation.</p>"},{"location":"dev/dev_environment.html#full-docker-development-environment","title":"Full Docker Development Environment","text":"<p>This project is set up with a number of Invoke tasks consumed as simple CLI commands to get developing fast. You'll use a few <code>invoke</code> commands to get your environment up and running.</p>"},{"location":"dev/dev_environment.html#copy-the-credentials-file-for-nautobot","title":"Copy the credentials file for Nautobot","text":"<p>First, you may create/overwrite the <code>development/creds.env</code> file - it stores a bunch of private information such as passwords and tokens for your local Nautobot install. You can make a copy of the <code>development/creds.example.env</code> and modify it to suit you.</p> <pre><code>cp development/creds.example.env development/creds.env\n</code></pre>"},{"location":"dev/dev_environment.html#invoke-building-the-docker-image","title":"Invoke - Building the Docker Image","text":"<p>The first thing you need to do is build the necessary Docker image for Nautobot that installs the specific <code>nautobot_ver</code>. The image is used for Nautobot and the Celery worker service used by Docker Compose.</p> <pre><code>\u279c invoke build\n... &lt;omitted for brevity&gt;\n#14 exporting to image\n#14 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00\n#14 exporting layers\n#14 exporting layers 1.2s done\n#14 writing image sha256:2d524bc1665327faa0d34001b0a9d2ccf450612bf8feeb969312e96a2d3e3503 done\n#14 naming to docker.io/nautobot-golden-config/nautobot:2.0.0-py3.11 done\n</code></pre>"},{"location":"dev/dev_environment.html#invoke-starting-the-development-environment","title":"Invoke - Starting the Development Environment","text":"<p>Next, you need to start up your Docker containers.</p> <pre><code>\u279c invoke start\nStarting Nautobot in detached mode...\nRunning docker-compose command \"up --detach\"\nCreating network \"nautobot_golden_config_default\" with the default driver\nCreating volume \"nautobot_golden_config_postgres_data\" with default driver\nCreating nautobot_golden_config_redis_1 ...\nCreating nautobot_golden_config_docs_1  ...\nCreating nautobot_golden_config_postgres_1 ...\nCreating nautobot_golden_config_postgres_1 ... done\nCreating nautobot_golden_config_redis_1    ... done\nCreating nautobot_golden_config_nautobot_1 ...\nCreating nautobot_golden_config_docs_1     ... done\nCreating nautobot_golden_config_nautobot_1 ... done\nCreating nautobot_golden_config_worker_1   ...\nCreating nautobot_golden_config_worker_1   ... done\nDocker Compose is now in the Docker CLI, try `docker compose up`\n</code></pre> <p>This will start all of the Docker containers used for hosting Nautobot. You should see the following containers running after <code>invoke start</code> is finished.</p> <pre><code>\u279c docker ps\n****CONTAINER ID   IMAGE                            COMMAND                  CREATED          STATUS          PORTS                                       NAMES\nee90fbfabd77   nautobot-golden-config/nautobot:2.0.0-py3.11  \"nautobot-server rqw\u2026\"   16 seconds ago   Up 13 seconds                                               nautobot_golden_config_worker_1\nb8adb781d013   nautobot-golden-config/nautobot:2.0.0-py3.11  \"/docker-entrypoint.\u2026\"   20 seconds ago   Up 15 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   nautobot_golden_config_nautobot_1\nd64ebd60675d   nautobot-golden-config/nautobot:2.0.0-py3.11  \"mkdocs serve -v -a \u2026\"   25 seconds ago   Up 18 seconds   0.0.0.0:8001-&gt;8080/tcp, :::8001-&gt;8080/tcp   nautobot_golden_config_docs_1\ne72d63129b36   postgres:13-alpine               \"docker-entrypoint.s\u2026\"   25 seconds ago   Up 19 seconds   0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp   nautobot_golden_config_postgres_1\n96c6ff66997c   redis:6-alpine                   \"docker-entrypoint.s\u2026\"   25 seconds ago   Up 21 seconds   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp   nautobot_golden_config_redis_1\n</code></pre> <p>Once the containers are fully up, you should be able to open up a web browser, and view:</p> <ul> <li>The Nautobot homepage at http://localhost:8080</li> <li>A live version of the documentation at http://localhost:8001</li> </ul> <p>Note</p> <p>Sometimes the containers take a minute to fully spin up. If the page doesn't load right away, wait a minute and try again.</p>"},{"location":"dev/dev_environment.html#invoke-creating-a-superuser","title":"Invoke - Creating a Superuser","text":"<p>The Nautobot development image will automatically provision a super user when specifying the following variables within <code>creds.env</code> which is the default when copying <code>creds.example.env</code> to <code>creds.env</code>.</p> <ul> <li><code>NAUTOBOT_CREATE_SUPERUSER=true</code></li> <li><code>NAUTOBOT_SUPERUSER_API_TOKEN=0123456789abcdef0123456789abcdef01234567</code></li> <li><code>NAUTOBOT_SUPERUSER_PASSWORD=admin</code></li> </ul> <p>Note</p> <p>The default username is admin, but can be overridden by specifying NAUTOBOT_SUPERUSER_USERNAME.</p> <p>If you need to create additional superusers, run the follow commands.</p> <pre><code>\u279c invoke createsuperuser\nRunning docker-compose command \"ps --services --filter status=running\"\nRunning docker-compose command \"exec nautobot nautobot-server createsuperuser --username admin\"\nError: That username is already taken.\nUsername: ntc\nEmail address: ntc@networktocode.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n</code></pre>"},{"location":"dev/dev_environment.html#invoke-stopping-the-development-environment","title":"Invoke - Stopping the Development Environment","text":"<p>The last command to know for now is <code>invoke stop</code>.</p> <pre><code>\u279c invoke stop\nStopping Nautobot...\nRunning docker-compose command \"down\"\nStopping nautobot_golden_config_worker_1   ...\nStopping nautobot_golden_config_nautobot_1 ...\nStopping nautobot_golden_config_docs_1     ...\nStopping nautobot_golden_config_redis_1    ...\nStopping nautobot_golden_config_postgres_1 ...\nStopping nautobot_golden_config_worker_1   ... done\nStopping nautobot_golden_config_nautobot_1 ... done\nStopping nautobot_golden_config_postgres_1 ... done\nStopping nautobot_golden_config_redis_1    ... done\nStopping nautobot_golden_config_docs_1     ... done\nRemoving nautobot_golden_config_worker_1   ...\nRemoving nautobot_golden_config_nautobot_1 ...\nRemoving nautobot_golden_config_docs_1     ...\nRemoving nautobot_golden_config_redis_1    ...\nRemoving nautobot_golden_config_postgres_1 ...\nRemoving nautobot_golden_config_postgres_1 ... done\nRemoving nautobot_golden_config_docs_1     ... done\nRemoving nautobot_golden_config_worker_1   ... done\nRemoving nautobot_golden_config_redis_1    ... done\nRemoving nautobot_golden_config_nautobot_1 ... done\nRemoving network nautobot_golden_config_default\n</code></pre> <p>This will safely shut down all of your running Docker containers for this project. When you are ready to spin containers back up, it is as simple as running <code>invoke start</code> again as seen previously.</p> <p>Warning</p> <p>If you're wanting to reset the database and configuration settings, you can use the <code>invoke destroy</code> command, but you will lose any data stored in those containers, so make sure that is what you want to do.</p>"},{"location":"dev/dev_environment.html#real-time-updates-how-cool","title":"Real-Time Updates? How Cool!","text":"<p>Your environment should now be fully setup, all necessary Docker containers are created and running, and you're logged into Nautobot in your web browser. Now what?</p> <p>Now you can start developing your app in the project folder!</p> <p>The magic here is the root directory is mounted inside your Docker containers when built and ran, so any changes made to the files in here are directly updated to the Nautobot app code running in Docker. This means that as you modify the code in your app folder, the changes will be instantly updated in Nautobot.</p> <p>Warning</p> <p>There are a few exceptions to this, as outlined in the section To Rebuild or Not To Rebuild.</p> <p>The back-end Django process is setup to automatically reload itself (it only takes a couple of seconds) every time a file is updated (saved). So for example, if you were to update one of the files like <code>tables.py</code>, then save it, the changes will be visible right away in the web browser!</p> <p>Note</p> <p>You may get connection refused while Django reloads, but it should be refreshed fairly quickly.</p>"},{"location":"dev/dev_environment.html#docker-logs","title":"Docker Logs","text":"<p>When trying to debug an issue, one helpful thing you can look at are the logs within the Docker containers.</p> <pre><code>\u279c docker logs &lt;name of container&gt; -f\n</code></pre> <p>Note</p> <p>The <code>-f</code> tag will keep the logs open, and output them in realtime as they are generated.</p> <p>Info</p> <p>Want to limit the log output even further? Use the <code>--tail &lt;#&gt;</code> command line argument in conjunction with <code>-f</code>.</p> <p>So for example, our app is named <code>nautobot-golden-config</code>, the command would most likely be <code>docker logs nautobot_golden_config_nautobot_1 -f</code>. You can find the name of all running containers via <code>docker ps</code>.</p> <p>If you want to view the logs specific to the worker container, simply use the name of that container instead.</p>"},{"location":"dev/dev_environment.html#to-rebuild-or-not-to-rebuild","title":"To Rebuild or Not to Rebuild","text":"<p>Most of the time, you will not need to rebuild your images. Simply running <code>invoke start</code> and <code>invoke stop</code> is enough to keep your environment going.</p> <p>However there are a couple of instances when you will want to.</p>"},{"location":"dev/dev_environment.html#updating-environment-variables","title":"Updating Environment Variables","text":"<p>To add environment variables to your containers, thus allowing Nautobot to use them, you will update/add them in the <code>development/development.env</code> file. However, doing so is considered updating the underlying container shell, instead of Django (which auto restarts itself on changes).</p> <p>To get new environment variables to take effect, you will need stop any running images, rebuild the images, then restart them. This can easily be done with 3 commands:</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre> <p>Once completed, the new/updated environment variables should now be live.</p>"},{"location":"dev/dev_environment.html#installing-additional-python-packages","title":"Installing Additional Python Packages","text":"<p>If you want your app to leverage another available Nautobot app or another Python package, you can easily add them into your Docker environment.</p> <pre><code>\u279c poetry shell\n\u279c poetry add &lt;package_name&gt;\n</code></pre> <p>Once the dependencies are resolved, stop the existing containers, rebuild the Docker image, and then start all containers again.</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre>"},{"location":"dev/dev_environment.html#installing-additional-nautobot-apps","title":"Installing Additional Nautobot Apps","text":"<p>Let's say for example you want the new app you're creating to integrate into Slack. To do this, you will want to integrate into the existing Nautobot ChatOps App.</p> <pre><code>\u279c poetry shell\n\u279c poetry add nautobot-chatops\n</code></pre> <p>Once you activate the virtual environment via Poetry, you then tell Poetry to install the new app.</p> <p>Before you continue, you'll need to update the file <code>development/nautobot_config.py</code> accordingly with the name of the new app under <code>PLUGINS</code> and any relevant settings as necessary for the app under <code>PLUGINS_CONFIG</code>. Since you're modifying the underlying OS (not just Django files), you need to rebuild the image. This is a similar process to updating environment variables, which was explained earlier.</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre> <p>Once the containers are up and running, you should now see the new app installed in your Nautobot instance.</p> <p>Note</p> <p>You can even launch an <code>ngrok</code> service locally on your laptop, pointing to port 8080 (such as for chatops development), and it will point traffic directly to your Docker images.</p>"},{"location":"dev/dev_environment.html#updating-python-version","title":"Updating Python Version","text":"<p>To update the Python version, you can update it within <code>tasks.py</code>.</p> <pre><code>namespace = Collection(\"nautobot_golden_config\")\nnamespace.configure(\n    {\n        \"nautobot_golden_config\": {\n            ...\n            \"python_ver\": \"3.11\",\n        ...\n        }\n    }\n)\n</code></pre> <p>Or set the <code>INVOKE_NAUTOBOT_GOLDEN_CONFIG_PYTHON_VER</code> variable.</p>"},{"location":"dev/dev_environment.html#updating-nautobot-version","title":"Updating Nautobot Version","text":"<p>To update the Nautobot version, you can update it within <code>tasks.py</code>.</p> <pre><code>namespace = Collection(\"nautobot_golden_config\")\nnamespace.configure(\n    {\n        \"nautobot_golden_config\": {\n            ...\n            \"nautobot_ver\": \"2.4.2\",\n        ...\n        }\n    }\n)\n</code></pre> <p>Or set the <code>INVOKE_NAUTOBOT_GOLDEN_CONFIG_NAUTOBOT_VER</code> variable.</p>"},{"location":"dev/dev_environment.html#other-miscellaneous-commands-to-know","title":"Other Miscellaneous Commands To Know","text":""},{"location":"dev/dev_environment.html#python-shell","title":"Python Shell","text":"<p>To drop into a Django shell for Nautobot (in the Docker container) run:</p> <pre><code>\u279c invoke nbshell\n</code></pre> <p>This is the same as running:</p> <pre><code>\u279c invoke cli\n\u279c nautobot-server nbshell\n</code></pre>"},{"location":"dev/dev_environment.html#ipython-shell-plus","title":"iPython Shell Plus","text":"<p>Django also has a more advanced shell that uses iPython and that will automatically import all the models:</p> <pre><code>\u279c invoke shell-plus\n</code></pre> <p>This is the same as running:</p> <pre><code>\u279c invoke cli\n\u279c nautobot-server shell_plus\n</code></pre>"},{"location":"dev/dev_environment.html#tests","title":"Tests","text":"<p>To run tests against your code, you can run all of the tests that the CI runs against any new PR with:</p> <pre><code>\u279c invoke tests\n</code></pre> <p>To run an individual test, you can run any or all of the following:</p> <pre><code>\u279c invoke unittest\n\u279c invoke ruff\n\u279c invoke pylint\n</code></pre>"},{"location":"dev/dev_environment.html#app-configuration-schema","title":"App Configuration Schema","text":"<p>In the package source, there is the <code>nautobot_golden_config/app-config-schema.json</code> file, conforming to the JSON Schema format. This file is used to validate the configuration of the app in CI pipelines.</p> <p>If you make changes to <code>PLUGINS_CONFIG</code> or the configuration schema, you can run the following command to validate the schema:</p> <pre><code>invoke validate-app-config\n</code></pre> <p>To generate the <code>app-config-schema.json</code> file based on the current <code>PLUGINS_CONFIG</code> configuration, run the following command:</p> <pre><code>invoke generate-app-config-schema\n</code></pre> <p>This command can only guess the schema, so it's up to the developer to manually update the schema as needed.</p>"},{"location":"dev/dev_environment.html#test-data-generation","title":"Test Data Generation","text":"<p>To quickly generate test data for developing against this app, you can use the following commands:</p> <pre><code>nautobot-server generate_test_data --flush\nnautobot-server generate_gc_test_data\nnautobot-server createsuperuser\n</code></pre> <p>Danger</p> <p>The <code>--flush</code> flag will completely empty your database and replace it with test data. This command should never be run in a production environment.</p> <p>This uses the <code>generate_test_data</code> management command from Nautobot core to generate the Statuses, Platforms, Device Types, Devices, etc. Nautobot version 2.2.0 is the minimum version required for devices to be generated. If using an older version of Nautobot, you'll need to create devices manually after running <code>nautobot-server generate_test_data</code>.</p>"},{"location":"dev/extending.html","title":"Extending the App","text":"<p>Extending the application is welcome, however it is best to open an issue first, to ensure that a PR would be accepted and makes sense in terms of features and design.</p> <p>A natural progression of the tool is to allow for config remediation and config deployment. These are on the road map, but without a committed date.</p>"},{"location":"dev/release_checklist.html","title":"Release Checklist","text":"<p>This document is intended for app maintainers and outlines the steps to perform when releasing a new version of the app.</p> <p>Important</p> <p>Before starting, make sure your local <code>develop</code>, <code>main</code>, and (if applicable) the current LTM branch are all up to date with upstream!</p> <pre><code>git fetch\ngit switch develop &amp;&amp; git pull # and repeat for main/ltm\n</code></pre> <p>Choose your own adventure:</p> <ul> <li>LTM release? Jump here.</li> <li>Patch release from <code>develop</code>? Jump here.</li> <li>Minor release? Continue with Minor Version Bumps and then All Releases from <code>develop</code>.</li> </ul>"},{"location":"dev/release_checklist.html#minor-version-bumps","title":"Minor Version Bumps","text":""},{"location":"dev/release_checklist.html#update-requirements","title":"Update Requirements","text":"<p>Every minor version release should refresh <code>poetry.lock</code>, so that it lists the most recent stable release of each package. To do this:</p> <ol> <li>Run <code>poetry update --dry-run</code> to have Poetry automatically tell you what package updates are available and the versions it would upgrade to. This requires an existing environment created from the lock file (i.e. via <code>poetry install</code>).</li> <li>Review each requirement's release notes for any breaking or otherwise noteworthy changes.</li> <li>Run <code>poetry update &lt;package&gt;</code> to update the package versions in <code>poetry.lock</code> as appropriate.</li> <li>If a required package requires updating to a new release not covered in the version constraints for a package as defined in <code>pyproject.toml</code>, (e.g. <code>Django ~3.1.7</code> would never install <code>Django &gt;=4.0.0</code>), update it manually in <code>pyproject.toml</code>.</li> <li>Run <code>poetry install</code> to install the refreshed versions of all required packages.</li> <li>Run all tests (<code>poetry run invoke tests</code>) and check that the UI and API function as expected.</li> </ol>"},{"location":"dev/release_checklist.html#update-documentation","title":"Update Documentation","text":"<p>If there are any changes to the compatibility matrix (such as a bump in the minimum supported Nautobot version), update it accordingly.</p> <p>Commit any resulting changes from the following sections to the documentation before proceeding with the release.</p> <p>Tip</p> <p>Fire up the documentation server in your development environment with <code>poetry run mkdocs serve</code>! This allows you to view the documentation site locally (the link is in the output of the command) and automatically rebuilds it as you make changes.</p>"},{"location":"dev/release_checklist.html#verify-the-installation-and-upgrade-steps","title":"Verify the Installation and Upgrade Steps","text":"<p>Follow the installation instructions to perform a new production installation of the app. If possible, also test the upgrade process from the previous released version.</p> <p>The goal of this step is to walk through the entire install process as documented to make sure nothing there needs to be changed or updated, to catch any errors or omissions in the documentation, and to ensure that it is current with each release.</p>"},{"location":"dev/release_checklist.html#all-releases-from-develop","title":"All Releases from <code>develop</code>","text":""},{"location":"dev/release_checklist.html#verify-ci-build-status","title":"Verify CI Build Status","text":"<p>Ensure that continuous integration testing on the <code>develop</code> branch is completing successfully.</p>"},{"location":"dev/release_checklist.html#bump-the-version","title":"Bump the Version","text":"<p>Update the package version using <code>poetry version</code> if necessary. This command shows the current version of the project or bumps the version of the project and writes the new version back to <code>pyproject.toml</code> if a valid bump rule is provided.</p> <p>The new version must be a valid semver string or a valid bump rule: <code>patch</code>, <code>minor</code>, <code>major</code>, <code>prepatch</code>, <code>preminor</code>, <code>premajor</code>, <code>prerelease</code>. Always try to use a bump rule when you can.</p> <p>Display the current version with no arguments:</p> <pre><code>&gt; poetry version\nnautobot-golden-config 1.0.0-beta.2\n</code></pre> <p>Bump pre-release versions using <code>prerelease</code>:</p> <pre><code>&gt; poetry version prerelease\nBumping version from 1.0.0-beta.2 to 1.0.0-beta.3\n</code></pre> <p>For major versions, use <code>major</code>:</p> <pre><code>&gt; poetry version major\nBumping version from 1.0.0-beta.2 to 1.0.0\n</code></pre> <p>For patch versions, use <code>minor</code>:</p> <pre><code>&gt; poetry version minor\nBumping version from 1.0.0 to 1.1.0\n</code></pre> <p>And lastly, for patch versions, you guessed it, use <code>patch</code>:</p> <pre><code>&gt; poetry version patch\nBumping version from 1.1.0 to 1.1.1\n</code></pre> <p>Please see the official Poetry documentation on <code>version</code> for more information.</p>"},{"location":"dev/release_checklist.html#update-the-changelog","title":"Update the Changelog","text":"<p>Important</p> <p>The changelog must adhere to the Keep a Changelog style guide.</p> <p>This guide uses <code>1.4.2</code> as the new version in its examples, so change it to match the version you bumped to in the previous step! Every. single. time. you. copy/paste commands :)</p> <p>First, create a release branch off of <code>develop</code> (<code>git switch -c release-1.4.2 develop</code>).</p> <p>You will need to have the project's poetry environment built at this stage, as the towncrier command runs locally only. If you don't have it, run <code>poetry install</code> first.</p> <p>Generate release notes with <code>invoke generate-release-notes --version 1.4.2</code> and answer <code>yes</code> to the prompt <code>Is it okay if I remove those files? [Y/n]:</code>. This will update the release notes in <code>docs/admin/release_notes/version_X.Y.md</code>, stage that file in git, and <code>git rm</code> all the fragments that have now been incorporated into the release notes.</p> <p>There are two possibilities:</p> <ol> <li>If you're releasing a new major or minor version, rename the <code>version_X.Y.md</code> file accordingly (e.g. rename to <code>docs/admin/release_notes/version_1.4.md</code>). Update the <code>Release Overview</code> and add this new page to the table of contents within <code>mkdocs.yml</code>.</li> <li>If you're releasing a patch version, copy your version's section from the <code>version_X.Y.md</code> file into the already existing <code>docs/admin/release_notes/version_1.4.md</code> file. Delete the <code>version_X.Y.md</code> file.</li> </ol> <p>Stage all the changes (<code>git add</code>) and check the diffs to verify all of the changes are correct (<code>git diff --cached</code>).</p> <p>Commit <code>git commit -m \"Release v1.4.2\"</code> and <code>git push</code> the staged changes.</p>"},{"location":"dev/release_checklist.html#submit-release-pull-request","title":"Submit Release Pull Request","text":"<p>Submit a pull request titled <code>Release v1.4.2</code> to merge your release branch into <code>main</code>. Copy the documented release notes into the pull request's body.</p> <p>Important</p> <p>Do not squash merge this branch into <code>main</code>. Make sure to select <code>Create a merge commit</code> when merging in GitHub.</p> <p>Once CI has completed on the PR, merge it.</p>"},{"location":"dev/release_checklist.html#create-a-new-release-in-github","title":"Create a New Release in GitHub","text":"<p>Draft a new release with the following parameters.</p> <ul> <li>Tag: Input current version (e.g. <code>v1.4.2</code>) and select <code>Create new tag: v1.4.2 on publish</code></li> <li>Target: <code>main</code></li> <li>Title: Version and date (e.g. <code>v1.4.2 - 2024-04-02</code>)</li> </ul> <p>Click \"Generate Release Notes\" and edit the auto-generated content as follows:</p> <ul> <li>Change the entries generated by GitHub to only the usernames of the contributors. e.g. <code>* Updated dockerfile by @nautobot_user in https://github.com/nautobot/nautobot-app-golden-config/pull/123</code> -&gt; <code>* @nautobot_user</code>.<ul> <li>This should give you the list for the new <code>Contributors</code> section.</li> <li>Make sure there are no duplicated entries.</li> </ul> </li> <li>Replace the content of the <code>What's Changed</code> section with the description of changes from the release PR (what towncrier generated).</li> <li>If it exists, leave the <code>New Contributors</code> list as it is.</li> </ul> <p>The release notes should look as follows:</p> <pre><code>## What's Changed\n\n**Towncrier generated Changed/Fixed/Housekeeping etc. sections here**\n\n## Contributors\n\n* @alice\n* @bob\n\n## New Contributors\n\n* @bob\n\n**Full Changelog**: https://github.com/nautobot/nautobot-app-golden-config/compare/v1.4.1...v1.4.2\n</code></pre> <p>Publish the release!</p>"},{"location":"dev/release_checklist.html#create-a-pr-from-main-back-to-develop","title":"Create a PR from <code>main</code> back to <code>develop</code>","text":"<p>First, sync your <code>main</code> branch with upstream changes: <code>git switch main &amp;&amp; git pull</code>.</p> <p>Create a new branch from <code>main</code> called <code>release-1.4.2-to-develop</code> and use <code>poetry version prepatch</code> to bump the development version to the next release.</p> <p>For example, if you just released <code>v1.4.2</code>:</p> <pre><code>&gt; git switch -c release-1.4.2-to-develop main\nSwitched to a new branch 'release-1.4.2-to-develop'\n\n&gt; poetry version prepatch\nBumping version from 1.4.2 to 1.4.3a1\n\n&gt; git add pyproject.toml &amp;&amp; git commit -m \"Bump version\"\n\n&gt; git push\n</code></pre> <p>Important</p> <p>Do not squash merge this branch into <code>develop</code>. Make sure to select <code>Create a merge commit</code> when merging in GitHub.</p> <p>Open a new PR from <code>release-1.4.2-to-develop</code> against <code>develop</code>, wait for CI to pass, and merge it.</p>"},{"location":"dev/release_checklist.html#final-checks","title":"Final checks","text":"<p>At this stage, the CI should be running or finished for the <code>v1.4.2</code> tag and a package successfully published to PyPI and added into the GitHub Release. Double check that's the case.</p> <p>Documentation should also have been built for the tag on ReadTheDocs and if you're reading this page online, refresh it and look for the new version in the little version fly-out menu down at the bottom right of the page.</p> <p>All done!</p>"},{"location":"dev/release_checklist.html#ltm-releases","title":"LTM Releases","text":"<p>For projects maintaining a Nautobot LTM compatible release, all development and release management is done through the <code>ltm-x.y</code> branch. The <code>x.y</code> relates to the LTM version of Nautobot it's compatible with, for example <code>1.6</code>.</p> <p>The process is similar to releasing from <code>develop</code>, but there is no need for post-release branch syncing because you'll release directly from the LTM branch:</p> <ol> <li>Make sure your <code>ltm-1.6</code> branch is passing CI.</li> <li>Create a release branch from the <code>ltm-1.6</code> branch: <code>git switch -c release-1.2.3 ltm-1.6</code>.</li> <li>Bump up the patch version <code>poetry version patch</code>. If you're backporting a feature instead of bugfixes, bump the minor version instead with <code>poetry version minor</code>.</li> <li>Generate the release notes: <code>invoke generate-release-notes --version 1.2.3</code>.</li> <li>Move the release notes from the generated <code>docs/admin/release_notes/version_X.Y.md</code> to <code>docs/admin/release_notes/version_1.2.md</code>.</li> <li>Add all the changes and <code>git commit -m \"Release v1.2.3\"</code>, then <code>git push</code>.</li> <li>Open a new PR against <code>ltm-1.6</code>. Once CI is passing in the PR, <code>Create a merge commit</code> (don't squash!).</li> <li>Create a New Release in GitHub - use the same steps documented here.</li> <li>Open a separate PR against <code>develop</code> to synchronize all LTM release changelogs into the latest version of the docs for visibility.</li> </ol>"},{"location":"dev/code_reference/index.html","title":"Code Reference","text":"<p>Auto-generated code reference documentation from docstrings.</p>"},{"location":"dev/code_reference/api.html","title":"Golden Config API Package","text":""},{"location":"dev/code_reference/api.html#nautobot_golden_config.api","title":"<code>nautobot_golden_config.api</code>","text":"<p>REST API module for nautobot_golden_config app.</p>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers","title":"<code>serializers</code>","text":"<p>API serializers for nautobot_golden_config.</p>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ComplianceFeatureSerializer","title":"<code>ComplianceFeatureSerializer</code>","text":"<p>               Bases: <code>NautobotModelSerializer</code>, <code>TaggedModelSerializerMixin</code></p> <p>ComplianceFeature Serializer.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class ComplianceFeatureSerializer(NautobotModelSerializer, TaggedModelSerializerMixin):\n    \"\"\"ComplianceFeature Serializer.\"\"\"\n\n    class Meta:\n        \"\"\"Meta attributes.\"\"\"\n\n        model = models.ComplianceFeature\n        fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ComplianceFeatureSerializer.Meta","title":"<code>Meta</code>","text":"<p>Meta attributes.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta:\n    \"\"\"Meta attributes.\"\"\"\n\n    model = models.ComplianceFeature\n    fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ComplianceRuleSerializer","title":"<code>ComplianceRuleSerializer</code>","text":"<p>               Bases: <code>NautobotModelSerializer</code>, <code>TaggedModelSerializerMixin</code></p> <p>Serializer for ComplianceRule object.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class ComplianceRuleSerializer(NautobotModelSerializer, TaggedModelSerializerMixin):\n    \"\"\"Serializer for ComplianceRule object.\"\"\"\n\n    class Meta:\n        \"\"\"Set Meta Data for ComplianceRule, will serialize all fields.\"\"\"\n\n        model = models.ComplianceRule\n        fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ComplianceRuleSerializer.Meta","title":"<code>Meta</code>","text":"<p>Set Meta Data for ComplianceRule, will serialize all fields.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta:\n    \"\"\"Set Meta Data for ComplianceRule, will serialize all fields.\"\"\"\n\n    model = models.ComplianceRule\n    fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigComplianceSerializer","title":"<code>ConfigComplianceSerializer</code>","text":"<p>               Bases: <code>NautobotModelSerializer</code>, <code>TaggedModelSerializerMixin</code></p> <p>Serializer for ConfigCompliance object.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class ConfigComplianceSerializer(NautobotModelSerializer, TaggedModelSerializerMixin):\n    \"\"\"Serializer for ConfigCompliance object.\"\"\"\n\n    class Meta:\n        \"\"\"Set Meta Data for ConfigCompliance, will serialize fields.\"\"\"\n\n        model = models.ConfigCompliance\n        fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigComplianceSerializer.Meta","title":"<code>Meta</code>","text":"<p>Set Meta Data for ConfigCompliance, will serialize fields.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta:\n    \"\"\"Set Meta Data for ConfigCompliance, will serialize fields.\"\"\"\n\n    model = models.ConfigCompliance\n    fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigPlanSerializer","title":"<code>ConfigPlanSerializer</code>","text":"<p>               Bases: <code>NautobotModelSerializer</code>, <code>TaggedModelSerializerMixin</code></p> <p>Serializer for ConfigPlan object.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class ConfigPlanSerializer(NautobotModelSerializer, TaggedModelSerializerMixin):\n    \"\"\"Serializer for ConfigPlan object.\"\"\"\n\n    class Meta:\n        \"\"\"Set Meta Data for ConfigPlan, will serialize all fields.\"\"\"\n\n        model = models.ConfigPlan\n        fields = \"__all__\"\n        read_only_fields = [\"device\", \"plan_type\", \"feature\", \"config_set\"]\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigPlanSerializer.Meta","title":"<code>Meta</code>","text":"<p>Set Meta Data for ConfigPlan, will serialize all fields.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta:\n    \"\"\"Set Meta Data for ConfigPlan, will serialize all fields.\"\"\"\n\n    model = models.ConfigPlan\n    fields = \"__all__\"\n    read_only_fields = [\"device\", \"plan_type\", \"feature\", \"config_set\"]\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigRemoveSerializer","title":"<code>ConfigRemoveSerializer</code>","text":"<p>               Bases: <code>NautobotModelSerializer</code>, <code>TaggedModelSerializerMixin</code></p> <p>Serializer for ConfigRemove object.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class ConfigRemoveSerializer(NautobotModelSerializer, TaggedModelSerializerMixin):\n    \"\"\"Serializer for ConfigRemove object.\"\"\"\n\n    class Meta:\n        \"\"\"Set Meta Data for ConfigRemove, will serialize all fields.\"\"\"\n\n        model = models.ConfigRemove\n        fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigRemoveSerializer.Meta","title":"<code>Meta</code>","text":"<p>Set Meta Data for ConfigRemove, will serialize all fields.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta:\n    \"\"\"Set Meta Data for ConfigRemove, will serialize all fields.\"\"\"\n\n    model = models.ConfigRemove\n    fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigReplaceSerializer","title":"<code>ConfigReplaceSerializer</code>","text":"<p>               Bases: <code>NautobotModelSerializer</code>, <code>TaggedModelSerializerMixin</code></p> <p>Serializer for ConfigReplace object.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class ConfigReplaceSerializer(NautobotModelSerializer, TaggedModelSerializerMixin):\n    \"\"\"Serializer for ConfigReplace object.\"\"\"\n\n    class Meta:\n        \"\"\"Set Meta Data for ConfigReplace, will serialize all fields.\"\"\"\n\n        model = models.ConfigReplace\n        fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigReplaceSerializer.Meta","title":"<code>Meta</code>","text":"<p>Set Meta Data for ConfigReplace, will serialize all fields.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta:\n    \"\"\"Set Meta Data for ConfigReplace, will serialize all fields.\"\"\"\n\n    model = models.ConfigReplace\n    fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigToPushSerializer","title":"<code>ConfigToPushSerializer</code>","text":"<p>               Bases: <code>DeviceSerializer</code></p> <p>Serializer for ConfigToPush view.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class ConfigToPushSerializer(DeviceSerializer):  # pylint: disable=nb-sub-class-name\n    \"\"\"Serializer for ConfigToPush view.\"\"\"\n\n    config = serializers.SerializerMethodField()\n\n    class Meta(DeviceSerializer.Meta):\n        \"\"\"Extend the Device serializer with the configuration after postprocessing.\"\"\"\n\n        fields = \"__all__\"\n        model = Device\n\n    def get_config(self, obj):\n        \"\"\"Provide the intended configuration ready after postprocessing to the config field.\"\"\"\n        request = self.context.get(\"request\")\n        config_details = models.GoldenConfig.objects.get(device=obj)\n        return get_config_postprocessing(config_details, request)\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigToPushSerializer.Meta","title":"<code>Meta</code>","text":"<p>               Bases: <code>Meta</code></p> <p>Extend the Device serializer with the configuration after postprocessing.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta(DeviceSerializer.Meta):\n    \"\"\"Extend the Device serializer with the configuration after postprocessing.\"\"\"\n\n    fields = \"__all__\"\n    model = Device\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.ConfigToPushSerializer.get_config","title":"<code>get_config(obj)</code>","text":"<p>Provide the intended configuration ready after postprocessing to the config field.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>def get_config(self, obj):\n    \"\"\"Provide the intended configuration ready after postprocessing to the config field.\"\"\"\n    request = self.context.get(\"request\")\n    config_details = models.GoldenConfig.objects.get(device=obj)\n    return get_config_postprocessing(config_details, request)\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.GenerateIntendedConfigSerializer","title":"<code>GenerateIntendedConfigSerializer</code>","text":"<p>               Bases: <code>Serializer</code></p> <p>Serializer for GenerateIntendedConfigView.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class GenerateIntendedConfigSerializer(serializers.Serializer):  # pylint: disable=abstract-method\n    \"\"\"Serializer for GenerateIntendedConfigView.\"\"\"\n\n    intended_config = serializers.CharField(read_only=True)\n    intended_config_lines = serializers.ListField(read_only=True, child=serializers.CharField())\n    graphql_data = serializers.JSONField(read_only=True)\n    diff = serializers.CharField(read_only=True)\n    diff_lines = serializers.ListField(read_only=True, child=serializers.CharField())\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.GitRepositoryWithBranchesSerializer","title":"<code>GitRepositoryWithBranchesSerializer</code>","text":"<p>               Bases: <code>GitRepositorySerializer</code></p> <p>Serializer for extras.GitRepository with remote branches field.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class GitRepositoryWithBranchesSerializer(GitRepositorySerializer):  # pylint: disable=nb-sub-class-name\n    \"\"\"Serializer for extras.GitRepository with remote branches field.\"\"\"\n\n    remote_branches = serializers.SerializerMethodField()\n\n    def get_remote_branches(self, obj):\n        \"\"\"Return a list of branches for the GitRepository.\"\"\"\n        ensure_git_repository(obj)\n        from_url, to_path, _ = get_repo_from_url_to_path_and_from_branch(obj)\n        repo_helper = GitRepo(to_path, from_url)\n        repo_helper.repo.remotes.origin.fetch()\n        return [\n            ref.name[7:]  # removeprefix(\"origin/\")\n            for ref in repo_helper.repo.remotes.origin.refs\n            if ref.name != \"origin/HEAD\"\n        ]\n\n    class Meta:  # noqa: D106  # undocumented-public-nested-class\n        model = GitRepository\n        fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.GitRepositoryWithBranchesSerializer.get_remote_branches","title":"<code>get_remote_branches(obj)</code>","text":"<p>Return a list of branches for the GitRepository.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>def get_remote_branches(self, obj):\n    \"\"\"Return a list of branches for the GitRepository.\"\"\"\n    ensure_git_repository(obj)\n    from_url, to_path, _ = get_repo_from_url_to_path_and_from_branch(obj)\n    repo_helper = GitRepo(to_path, from_url)\n    repo_helper.repo.remotes.origin.fetch()\n    return [\n        ref.name[7:]  # removeprefix(\"origin/\")\n        for ref in repo_helper.repo.remotes.origin.refs\n        if ref.name != \"origin/HEAD\"\n    ]\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.GoldenConfigSerializer","title":"<code>GoldenConfigSerializer</code>","text":"<p>               Bases: <code>NautobotModelSerializer</code>, <code>TaggedModelSerializerMixin</code></p> <p>Serializer for GoldenConfig object.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class GoldenConfigSerializer(NautobotModelSerializer, TaggedModelSerializerMixin):\n    \"\"\"Serializer for GoldenConfig object.\"\"\"\n\n    class Meta:\n        \"\"\"Set Meta Data for GoldenConfig, will serialize all fields.\"\"\"\n\n        model = models.GoldenConfig\n        fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.GoldenConfigSerializer.Meta","title":"<code>Meta</code>","text":"<p>Set Meta Data for GoldenConfig, will serialize all fields.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta:\n    \"\"\"Set Meta Data for GoldenConfig, will serialize all fields.\"\"\"\n\n    model = models.GoldenConfig\n    fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.GoldenConfigSettingSerializer","title":"<code>GoldenConfigSettingSerializer</code>","text":"<p>               Bases: <code>NautobotModelSerializer</code>, <code>TaggedModelSerializerMixin</code></p> <p>Serializer for GoldenConfigSetting object.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class GoldenConfigSettingSerializer(NautobotModelSerializer, TaggedModelSerializerMixin):\n    \"\"\"Serializer for GoldenConfigSetting object.\"\"\"\n\n    class Meta:\n        \"\"\"Set Meta Data for GoldenConfigSetting, will serialize all fields.\"\"\"\n\n        model = models.GoldenConfigSetting\n        fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.GoldenConfigSettingSerializer.Meta","title":"<code>Meta</code>","text":"<p>Set Meta Data for GoldenConfigSetting, will serialize all fields.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta:\n    \"\"\"Set Meta Data for GoldenConfigSetting, will serialize all fields.\"\"\"\n\n    model = models.GoldenConfigSetting\n    fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.GraphQLSerializer","title":"<code>GraphQLSerializer</code>","text":"<p>               Bases: <code>Serializer</code></p> <p>Serializer for a GraphQL object.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class GraphQLSerializer(serializers.Serializer):  # pylint: disable=abstract-method\n    \"\"\"Serializer for a GraphQL object.\"\"\"\n\n    data = serializers.JSONField(read_only=True)\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.RemediationSettingSerializer","title":"<code>RemediationSettingSerializer</code>","text":"<p>               Bases: <code>NautobotModelSerializer</code>, <code>TaggedModelSerializerMixin</code></p> <p>Serializer for RemediationSetting object.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class RemediationSettingSerializer(NautobotModelSerializer, TaggedModelSerializerMixin):\n    \"\"\"Serializer for RemediationSetting object.\"\"\"\n\n    class Meta:\n        \"\"\"Set Meta Data for RemediationSetting, will serialize all fields.\"\"\"\n\n        model = models.RemediationSetting\n        fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.serializers.RemediationSettingSerializer.Meta","title":"<code>Meta</code>","text":"<p>Set Meta Data for RemediationSetting, will serialize all fields.</p> Source code in <code>nautobot_golden_config/api/serializers.py</code> <pre><code>class Meta:\n    \"\"\"Set Meta Data for RemediationSetting, will serialize all fields.\"\"\"\n\n    model = models.RemediationSetting\n    fields = \"__all__\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.urls","title":"<code>urls</code>","text":"<p>Django API urlpatterns declaration for nautobot_golden_config app.</p>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views","title":"<code>views</code>","text":"<p>API views for nautobot_golden_config.</p>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ComplianceFeatureViewSet","title":"<code>ComplianceFeatureViewSet</code>","text":"<p>               Bases: <code>NautobotModelViewSet</code></p> <p>API viewset for interacting with ComplianceFeature objects.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class ComplianceFeatureViewSet(NautobotModelViewSet):  # pylint:disable=too-many-ancestors\n    \"\"\"API viewset for interacting with ComplianceFeature objects.\"\"\"\n\n    queryset = models.ComplianceFeature.objects.all()\n    serializer_class = serializers.ComplianceFeatureSerializer\n    filterset_class = filters.ComplianceFeatureFilterSet\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ComplianceRuleViewSet","title":"<code>ComplianceRuleViewSet</code>","text":"<p>               Bases: <code>NautobotModelViewSet</code></p> <p>API viewset for interacting with ComplianceRule objects.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class ComplianceRuleViewSet(NautobotModelViewSet):  # pylint:disable=too-many-ancestors\n    \"\"\"API viewset for interacting with ComplianceRule objects.\"\"\"\n\n    queryset = models.ComplianceRule.objects.all()\n    serializer_class = serializers.ComplianceRuleSerializer\n    filterset_class = filters.ComplianceRuleFilterSet\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ConfigComplianceViewSet","title":"<code>ConfigComplianceViewSet</code>","text":"<p>               Bases: <code>NautobotModelViewSet</code></p> <p>API viewset for interacting with ConfigCompliance objects.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class ConfigComplianceViewSet(NautobotModelViewSet):  # pylint:disable=too-many-ancestors\n    \"\"\"API viewset for interacting with ConfigCompliance objects.\"\"\"\n\n    queryset = models.ConfigCompliance.objects.all()\n    serializer_class = serializers.ConfigComplianceSerializer\n    filterset_class = filters.ConfigComplianceFilterSet\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ConfigPlanViewSet","title":"<code>ConfigPlanViewSet</code>","text":"<p>               Bases: <code>NautobotAPIVersionMixin</code>, <code>NotesViewSetMixin</code>, <code>ModelViewSetMixin</code>, <code>RetrieveModelMixin</code>, <code>UpdateModelMixin</code>, <code>DestroyModelMixin</code>, <code>ListModelMixin</code>, <code>BulkUpdateModelMixin</code>, <code>BulkDestroyModelMixin</code>, <code>GenericViewSet</code></p> <p>API viewset for interacting with ConfigPlan objects. Does not support POST to create objects.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class ConfigPlanViewSet(\n    NautobotAPIVersionMixin,\n    NotesViewSetMixin,\n    ModelViewSetMixin,\n    RetrieveModelMixin,\n    UpdateModelMixin,\n    DestroyModelMixin,\n    ListModelMixin,\n    BulkUpdateModelMixin,\n    BulkDestroyModelMixin,\n    GenericViewSet,\n):  # pylint:disable=too-many-ancestors\n    \"\"\"API viewset for interacting with ConfigPlan objects. Does not support POST to create objects.\"\"\"\n\n    queryset = models.ConfigPlan.objects.all()\n    serializer_class = serializers.ConfigPlanSerializer\n    filterset_class = filters.ConfigPlanFilterSet\n\n    def get_serializer_context(self):\n        \"\"\"Gather all custom fields for the model. Copied from nautobot.extras.api.views.CustomFieldModelViewSet.\"\"\"\n        content_type = ContentType.objects.get_for_model(self.queryset.model)\n        custom_fields = content_type.custom_fields.all()\n\n        context = super().get_serializer_context()\n        context.update(\n            {\n                \"custom_fields\": custom_fields,\n            }\n        )\n        return context\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ConfigPlanViewSet.get_serializer_context","title":"<code>get_serializer_context()</code>","text":"<p>Gather all custom fields for the model. Copied from nautobot.extras.api.views.CustomFieldModelViewSet.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>def get_serializer_context(self):\n    \"\"\"Gather all custom fields for the model. Copied from nautobot.extras.api.views.CustomFieldModelViewSet.\"\"\"\n    content_type = ContentType.objects.get_for_model(self.queryset.model)\n    custom_fields = content_type.custom_fields.all()\n\n    context = super().get_serializer_context()\n    context.update(\n        {\n            \"custom_fields\": custom_fields,\n        }\n    )\n    return context\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ConfigPushPermissions","title":"<code>ConfigPushPermissions</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Permissions class to validate access to Devices and GoldenConfig view.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class ConfigPushPermissions(BasePermission):\n    \"\"\"Permissions class to validate access to Devices and GoldenConfig view.\"\"\"\n\n    def has_permission(self, request, view):\n        \"\"\"Method to validated permissions to API view.\"\"\"\n        return request.user.has_perm(\"nautobot_golden_config.view_goldenconfig\")\n\n    def has_object_permission(self, request, view, obj):\n        \"\"\"Validate user access to the object, taking into account constraints.\"\"\"\n        return request.user.has_perm(\"dcim.view_device\", obj=obj)\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ConfigPushPermissions.has_object_permission","title":"<code>has_object_permission(request, view, obj)</code>","text":"<p>Validate user access to the object, taking into account constraints.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>def has_object_permission(self, request, view, obj):\n    \"\"\"Validate user access to the object, taking into account constraints.\"\"\"\n    return request.user.has_perm(\"dcim.view_device\", obj=obj)\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ConfigPushPermissions.has_permission","title":"<code>has_permission(request, view)</code>","text":"<p>Method to validated permissions to API view.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>def has_permission(self, request, view):\n    \"\"\"Method to validated permissions to API view.\"\"\"\n    return request.user.has_perm(\"nautobot_golden_config.view_goldenconfig\")\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ConfigRemoveViewSet","title":"<code>ConfigRemoveViewSet</code>","text":"<p>               Bases: <code>NautobotModelViewSet</code></p> <p>API viewset for interacting with ConfigRemove objects.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class ConfigRemoveViewSet(NautobotModelViewSet):  # pylint:disable=too-many-ancestors\n    \"\"\"API viewset for interacting with ConfigRemove objects.\"\"\"\n\n    queryset = models.ConfigRemove.objects.all()\n    serializer_class = serializers.ConfigRemoveSerializer\n    filterset_class = filters.ConfigRemoveFilterSet\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ConfigReplaceViewSet","title":"<code>ConfigReplaceViewSet</code>","text":"<p>               Bases: <code>NautobotModelViewSet</code></p> <p>API viewset for interacting with ConfigReplace objects.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class ConfigReplaceViewSet(NautobotModelViewSet):  # pylint:disable=too-many-ancestors\n    \"\"\"API viewset for interacting with ConfigReplace objects.\"\"\"\n\n    queryset = models.ConfigReplace.objects.all()\n    serializer_class = serializers.ConfigReplaceSerializer\n    filterset_class = filters.ConfigReplaceFilterSet\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.ConfigToPushViewSet","title":"<code>ConfigToPushViewSet</code>","text":"<p>               Bases: <code>RetrieveModelMixin</code>, <code>GenericViewSet</code></p> <p>Detail REST API view showing configuration after postprocessing.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class ConfigToPushViewSet(mixins.RetrieveModelMixin, viewsets.GenericViewSet):\n    \"\"\"Detail REST API view showing configuration after postprocessing.\"\"\"\n\n    permission_classes = [IsAuthenticated &amp; ConfigPushPermissions]\n    queryset = Device.objects.all()\n    serializer_class = serializers.ConfigToPushSerializer\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.GenerateIntendedConfigException","title":"<code>GenerateIntendedConfigException</code>","text":"<p>               Bases: <code>APIException</code></p> <p>Exception for when the intended config cannot be generated.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class GenerateIntendedConfigException(APIException):\n    \"\"\"Exception for when the intended config cannot be generated.\"\"\"\n\n    status_code = 400\n    default_detail = \"Unable to generate the intended config for this device.\"\n    default_code = \"error\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.GenerateIntendedConfigView","title":"<code>GenerateIntendedConfigView</code>","text":"<p>               Bases: <code>NautobotAPIVersionMixin</code>, <code>GenericAPIView</code></p> <p>API view for generating the intended config for a Device.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class GenerateIntendedConfigView(NautobotAPIVersionMixin, GenericAPIView):\n    \"\"\"API view for generating the intended config for a Device.\"\"\"\n\n    name = \"Generate Intended Config for Device\"\n    permission_classes = [IsAuthenticated]\n    serializer_class = serializers.GenerateIntendedConfigSerializer\n\n    def _get_diff(self, device, intended_config):\n        \"\"\"Generate a unified diff between the provided config and the intended config stored on the Device's GoldenConfig.intended_config.\"\"\"\n        diff = None\n        try:\n            golden_config = device.goldenconfig\n            if golden_config.intended_last_success_date is not None:\n                prior_intended_config = golden_config.intended_config\n                diff = \"\".join(\n                    difflib.unified_diff(\n                        prior_intended_config.splitlines(keepends=True),\n                        intended_config.splitlines(keepends=True),\n                        fromfile=\"prior intended config\",\n                        tofile=\"rendered config\",\n                    )\n                )\n        except models.GoldenConfig.DoesNotExist:\n            pass\n\n        return diff\n\n    def _get_object(self, request, model, query_param):\n        \"\"\"Get the requested model instance, restricted to requesting user.\"\"\"\n        pk = request.query_params.get(query_param)\n        if not pk:\n            raise GenerateIntendedConfigException(f\"Parameter {query_param} is required\")\n        try:\n            return model.objects.restrict(request.user, \"view\").get(pk=pk)\n        except model.DoesNotExist as exc:\n            raise GenerateIntendedConfigException(f\"{model.__name__} with id '{pk}' not found\") from exc\n\n    def _get_jinja_template_path(self, settings, device, git_repository, base_path=None):\n        \"\"\"Get the Jinja template path for the device in the provided git repository.\"\"\"\n        try:\n            rendered_path = render_jinja2(template_code=settings.jinja_path_template, context={\"obj\": device})\n        except (TemplateSyntaxError, TemplateError) as exc:\n            raise GenerateIntendedConfigException(\"Error rendering Jinja path template\") from exc\n        if base_path is None:\n            filesystem_path = Path(git_repository.filesystem_path) / rendered_path\n        else:\n            filesystem_path = Path(base_path) / rendered_path\n        if not filesystem_path.is_file():\n            msg = f\"Jinja template {rendered_path} not found in git repository {git_repository}\"\n            raise GenerateIntendedConfigException(msg)\n        return filesystem_path\n\n    @extend_schema(\n        parameters=[\n            OpenApiParameter(\n                name=\"branch\",\n                required=False,\n                type=OpenApiTypes.STR,\n                location=OpenApiParameter.QUERY,\n            ),\n            OpenApiParameter(\n                name=\"device_id\",\n                required=True,\n                type=OpenApiTypes.UUID,\n                location=OpenApiParameter.QUERY,\n            ),\n            OpenApiParameter(\n                name=\"graphql_query_id\",\n                required=False,\n                type=OpenApiTypes.UUID,\n                location=OpenApiParameter.QUERY,\n            ),\n        ]\n    )\n    def get(self, request, *args, **kwargs):  # pylint: disable=too-many-locals, too-many-branches\n        \"\"\"Generate intended configuration for a Device.\"\"\"\n        device = self._get_object(request, Device, \"device_id\")\n        branch_param = request.query_params.get(\"branch\")\n        if branch_param and version.parse(nautobot_settings.VERSION) &lt; version.parse(\"2.4.2\"):\n            raise GenerateIntendedConfigException(\"Branch support requires Nautobot v2.4.2 or later\")\n        graphql_query = None\n        graphql_query_id_param = request.query_params.get(\"graphql_query_id\")\n        if graphql_query_id_param:\n            try:\n                graphql_query = GraphQLQuery.objects.get(pk=graphql_query_id_param)\n            except GraphQLQuery.DoesNotExist as exc:\n                raise GenerateIntendedConfigException(\n                    f\"GraphQLQuery with id '{graphql_query_id_param}' not found\"\n                ) from exc\n        settings = models.GoldenConfigSetting.objects.get_for_device(device)\n        if not settings:\n            raise GenerateIntendedConfigException(\"No Golden Config settings found for this device\")\n        if not settings.jinja_repository:\n            raise GenerateIntendedConfigException(\"Golden Config settings jinja_repository not set\")\n\n        if graphql_query is None:\n            if settings.sot_agg_query is not None:\n                graphql_query = settings.sot_agg_query\n            else:\n                raise GenerateIntendedConfigException(\"Golden Config settings sot_agg_query not set\")\n\n        if \"device_id\" not in graphql_query.variables:\n            raise GenerateIntendedConfigException(\"The selected GraphQL query is missing a 'device_id' variable\")\n\n        try:\n            git_repository = settings.jinja_repository\n            ensure_git_repository(git_repository)\n        except Exception as exc:\n            raise GenerateIntendedConfigException(\"Error trying to sync git repository\") from exc\n\n        status_code, graphql_data = graph_ql_query(request, device, graphql_query.query)\n        if status_code == status.HTTP_200_OK:\n            try:\n                if branch_param:\n                    with git_repository.clone_to_directory_context(branch=branch_param, depth=1) as git_repo_path:\n                        filesystem_path = self._get_jinja_template_path(\n                            settings, device, git_repository, base_path=git_repo_path\n                        )\n                        intended_config = self._render_config_nornir_serial(\n                            device=device,\n                            jinja_template=str(filesystem_path.relative_to(git_repo_path)),\n                            jinja_root_path=git_repo_path,\n                            graphql_data=graphql_data,\n                        )\n                else:\n                    filesystem_path = self._get_jinja_template_path(settings, device, git_repository)\n                    intended_config = self._render_config_nornir_serial(\n                        device=device,\n                        jinja_template=str(filesystem_path.relative_to(git_repository.filesystem_path)),\n                        jinja_root_path=git_repository.filesystem_path,\n                        graphql_data=graphql_data,\n                    )\n            except Exception as exc:\n                raise GenerateIntendedConfigException(f\"Error rendering Jinja template: {exc}\") from exc\n\n            diff = self._get_diff(device, intended_config)\n\n            return Response(\n                data={\n                    \"intended_config\": intended_config,\n                    \"intended_config_lines\": intended_config.split(\"\\n\"),\n                    \"graphql_data\": graphql_data,\n                    \"diff\": diff,\n                    \"diff_lines\": diff.split(\"\\n\") if diff else [],\n                },\n                status=status.HTTP_200_OK,\n            )\n\n        raise GenerateIntendedConfigException(\"Unable to generate the intended config for this device\")\n\n    def _render_config_nornir_serial(self, device, jinja_template, jinja_root_path, graphql_data):\n        \"\"\"Render the Jinja template for the device using Nornir serial runner.\n\n        This is a small stub of the logic in nornir_plays.config_intended.config_intended.\n        \"\"\"\n        jinja_env = get_django_env()\n        with InitNornir(\n            runner={\"plugin\": \"serial\"},\n            logging={\"enabled\": False},\n            inventory={\n                \"plugin\": \"nautobot-inventory\",\n                \"options\": {\n                    \"credentials_class\": NORNIR_SETTINGS.get(\"credentials\"),\n                    \"params\": NORNIR_SETTINGS.get(\"inventory_params\"),\n                    \"queryset\": Device.objects.filter(pk=device.pk),\n                    \"defaults\": {\"now\": make_aware(datetime.datetime.now())},\n                },\n            },\n        ) as nornir_obj:\n            results = nornir_obj.run(\n                task=_nornir_task_inject_graphql_data,\n                name=\"REST API GENERATE CONFIG\",\n                graphql_data=graphql_data,\n                obj=device,  # Used by the nornir tasks for logging to the logger below\n                logger=logging.getLogger(\n                    dispatcher.__module__\n                ),  # The nornir tasks are built for logging to a JobResult, pass a standard logger here\n                jinja_template=jinja_template,\n                jinja_root_path=jinja_root_path,\n                output_file_location=\"/dev/null\",  # The nornir task outputs the templated config to a file, but this API doesn't need it\n                jinja_filters=jinja_env.filters,\n                jinja_env=jinja_env,\n                **dispatch_params(\n                    \"generate_config\", device.platform.network_driver, logging.getLogger(dispatch_params.__module__)\n                ),\n            )\n            if results[device.name].failed:\n                if results[device.name].exception:  # pylint: disable=no-else-raise\n                    raise results[device.name].exception\n                else:\n                    raise GenerateIntendedConfigException(\n                        f\"Error generating intended config for {device.name}: {results[device.name].result}\"\n                    )\n            else:\n                return results[device.name][1][1][0].result[\"config\"]\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.GenerateIntendedConfigView.get","title":"<code>get(request, *args, **kwargs)</code>","text":"<p>Generate intended configuration for a Device.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>@extend_schema(\n    parameters=[\n        OpenApiParameter(\n            name=\"branch\",\n            required=False,\n            type=OpenApiTypes.STR,\n            location=OpenApiParameter.QUERY,\n        ),\n        OpenApiParameter(\n            name=\"device_id\",\n            required=True,\n            type=OpenApiTypes.UUID,\n            location=OpenApiParameter.QUERY,\n        ),\n        OpenApiParameter(\n            name=\"graphql_query_id\",\n            required=False,\n            type=OpenApiTypes.UUID,\n            location=OpenApiParameter.QUERY,\n        ),\n    ]\n)\ndef get(self, request, *args, **kwargs):  # pylint: disable=too-many-locals, too-many-branches\n    \"\"\"Generate intended configuration for a Device.\"\"\"\n    device = self._get_object(request, Device, \"device_id\")\n    branch_param = request.query_params.get(\"branch\")\n    if branch_param and version.parse(nautobot_settings.VERSION) &lt; version.parse(\"2.4.2\"):\n        raise GenerateIntendedConfigException(\"Branch support requires Nautobot v2.4.2 or later\")\n    graphql_query = None\n    graphql_query_id_param = request.query_params.get(\"graphql_query_id\")\n    if graphql_query_id_param:\n        try:\n            graphql_query = GraphQLQuery.objects.get(pk=graphql_query_id_param)\n        except GraphQLQuery.DoesNotExist as exc:\n            raise GenerateIntendedConfigException(\n                f\"GraphQLQuery with id '{graphql_query_id_param}' not found\"\n            ) from exc\n    settings = models.GoldenConfigSetting.objects.get_for_device(device)\n    if not settings:\n        raise GenerateIntendedConfigException(\"No Golden Config settings found for this device\")\n    if not settings.jinja_repository:\n        raise GenerateIntendedConfigException(\"Golden Config settings jinja_repository not set\")\n\n    if graphql_query is None:\n        if settings.sot_agg_query is not None:\n            graphql_query = settings.sot_agg_query\n        else:\n            raise GenerateIntendedConfigException(\"Golden Config settings sot_agg_query not set\")\n\n    if \"device_id\" not in graphql_query.variables:\n        raise GenerateIntendedConfigException(\"The selected GraphQL query is missing a 'device_id' variable\")\n\n    try:\n        git_repository = settings.jinja_repository\n        ensure_git_repository(git_repository)\n    except Exception as exc:\n        raise GenerateIntendedConfigException(\"Error trying to sync git repository\") from exc\n\n    status_code, graphql_data = graph_ql_query(request, device, graphql_query.query)\n    if status_code == status.HTTP_200_OK:\n        try:\n            if branch_param:\n                with git_repository.clone_to_directory_context(branch=branch_param, depth=1) as git_repo_path:\n                    filesystem_path = self._get_jinja_template_path(\n                        settings, device, git_repository, base_path=git_repo_path\n                    )\n                    intended_config = self._render_config_nornir_serial(\n                        device=device,\n                        jinja_template=str(filesystem_path.relative_to(git_repo_path)),\n                        jinja_root_path=git_repo_path,\n                        graphql_data=graphql_data,\n                    )\n            else:\n                filesystem_path = self._get_jinja_template_path(settings, device, git_repository)\n                intended_config = self._render_config_nornir_serial(\n                    device=device,\n                    jinja_template=str(filesystem_path.relative_to(git_repository.filesystem_path)),\n                    jinja_root_path=git_repository.filesystem_path,\n                    graphql_data=graphql_data,\n                )\n        except Exception as exc:\n            raise GenerateIntendedConfigException(f\"Error rendering Jinja template: {exc}\") from exc\n\n        diff = self._get_diff(device, intended_config)\n\n        return Response(\n            data={\n                \"intended_config\": intended_config,\n                \"intended_config_lines\": intended_config.split(\"\\n\"),\n                \"graphql_data\": graphql_data,\n                \"diff\": diff,\n                \"diff_lines\": diff.split(\"\\n\") if diff else [],\n            },\n            status=status.HTTP_200_OK,\n        )\n\n    raise GenerateIntendedConfigException(\"Unable to generate the intended config for this device\")\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.GitRepositoryBranchesView","title":"<code>GitRepositoryBranchesView</code>","text":"<p>               Bases: <code>NautobotAPIVersionMixin</code>, <code>RetrieveAPIView</code></p> <p>API view for extras.GitRepository with branches.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>@extend_schema(exclude=True)\nclass GitRepositoryBranchesView(NautobotAPIVersionMixin, RetrieveAPIView):\n    \"\"\"API view for extras.GitRepository with branches.\"\"\"\n\n    name = \"Git Repository with Branches\"\n    permission_classes = [IsAuthenticated]\n    queryset = GitRepository.objects.all()\n    serializer_class = serializers.GitRepositoryWithBranchesSerializer\n\n    def get_queryset(self):\n        \"\"\"Override the original get_queryset to apply permissions.\"\"\"\n        queryset = super().get_queryset()\n        return queryset.restrict(self.request.user, \"view\")\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.GitRepositoryBranchesView.get_queryset","title":"<code>get_queryset()</code>","text":"<p>Override the original get_queryset to apply permissions.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Override the original get_queryset to apply permissions.\"\"\"\n    queryset = super().get_queryset()\n    return queryset.restrict(self.request.user, \"view\")\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.GoldenConfigRootView","title":"<code>GoldenConfigRootView</code>","text":"<p>               Bases: <code>APIRootView</code></p> <p>Golden Config API root view.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class GoldenConfigRootView(APIRootView):\n    \"\"\"Golden Config API root view.\"\"\"\n\n    def get_view_name(self):\n        \"\"\"Golden Config API root view boilerplate.\"\"\"\n        return \"Golden Config\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.GoldenConfigRootView.get_view_name","title":"<code>get_view_name()</code>","text":"<p>Golden Config API root view boilerplate.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>def get_view_name(self):\n    \"\"\"Golden Config API root view boilerplate.\"\"\"\n    return \"Golden Config\"\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.GoldenConfigSettingViewSet","title":"<code>GoldenConfigSettingViewSet</code>","text":"<p>               Bases: <code>NautobotModelViewSet</code></p> <p>API viewset for interacting with GoldenConfigSetting objects.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class GoldenConfigSettingViewSet(NautobotModelViewSet):  # pylint:disable=too-many-ancestors\n    \"\"\"API viewset for interacting with GoldenConfigSetting objects.\"\"\"\n\n    queryset = models.GoldenConfigSetting.objects.all()\n    serializer_class = serializers.GoldenConfigSettingSerializer\n    filterset_class = filters.GoldenConfigSettingFilterSet\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.GoldenConfigViewSet","title":"<code>GoldenConfigViewSet</code>","text":"<p>               Bases: <code>NautobotModelViewSet</code></p> <p>API viewset for interacting with GoldenConfig objects.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class GoldenConfigViewSet(NautobotModelViewSet):  # pylint:disable=too-many-ancestors\n    \"\"\"API viewset for interacting with GoldenConfig objects.\"\"\"\n\n    queryset = models.GoldenConfig.objects.all()\n    serializer_class = serializers.GoldenConfigSerializer\n    filterset_class = filters.GoldenConfigFilterSet\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.RemediationSettingViewSet","title":"<code>RemediationSettingViewSet</code>","text":"<p>               Bases: <code>NautobotModelViewSet</code></p> <p>API viewset for interacting with RemediationSetting objects.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class RemediationSettingViewSet(NautobotModelViewSet):  # pylint:disable=too-many-ancestors\n    \"\"\"API viewset for interacting with RemediationSetting objects.\"\"\"\n\n    queryset = models.RemediationSetting.objects.all()\n    serializer_class = serializers.RemediationSettingSerializer\n    filterset_class = filters.RemediationSettingFilterSet\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.SOTAggDeviceDetailView","title":"<code>SOTAggDeviceDetailView</code>","text":"<p>               Bases: <code>NautobotAPIVersionMixin</code>, <code>GenericAPIView</code></p> <p>Detail REST API view showing graphql, with a potential \"transformer\" of data on a specific device.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>class SOTAggDeviceDetailView(NautobotAPIVersionMixin, GenericAPIView):\n    \"\"\"Detail REST API view showing graphql, with a potential \"transformer\" of data on a specific device.\"\"\"\n\n    name = \"SOTAgg Device View\"\n    permission_classes = [IsAuthenticated]\n    serializer_class = serializers.GraphQLSerializer\n\n    @extend_schema(\n        parameters=[\n            OpenApiParameter(\n                name=\"graphql_query_id\",\n                required=False,\n                type=OpenApiTypes.UUID,\n                location=OpenApiParameter.QUERY,\n            ),\n        ]\n    )\n    def get(self, request, *args, **kwargs):\n        \"\"\"Get GraphQL data for a Device.\"\"\"\n        device = get_object_or_404(Device.objects.restrict(request.user, \"view\"), pk=kwargs[\"pk\"])\n\n        graphql_query = None\n        graphql_query_id_param = request.query_params.get(\"graphql_query_id\")\n        if graphql_query_id_param:\n            try:\n                graphql_query = GraphQLQuery.objects.get(pk=graphql_query_id_param)\n            except GraphQLQuery.DoesNotExist as exc:\n                raise ValidationError(f\"GraphQLQuery with id '{graphql_query_id_param}' not found\") from exc\n        settings = models.GoldenConfigSetting.objects.get_for_device(device)\n\n        if graphql_query is None:\n            if settings.sot_agg_query is not None:\n                graphql_query = settings.sot_agg_query\n            else:\n                raise ValidationError(\"Golden Config settings sot_agg_query not set\")\n\n        if \"device_id\" not in graphql_query.variables:\n            raise ValidationError(\"The selected GraphQL query is missing a 'device_id' variable\")\n\n        status_code, graphql_data = graph_ql_query(request, device, graphql_query.query)\n        if status_code == status.HTTP_200_OK:\n            return Response(\n                data=graphql_data,\n                status=status.HTTP_200_OK,\n            )\n\n        raise ValidationError(\"Unable to generate the GraphQL data for this device\")\n</code></pre>"},{"location":"dev/code_reference/api.html#nautobot_golden_config.api.views.SOTAggDeviceDetailView.get","title":"<code>get(request, *args, **kwargs)</code>","text":"<p>Get GraphQL data for a Device.</p> Source code in <code>nautobot_golden_config/api/views.py</code> <pre><code>@extend_schema(\n    parameters=[\n        OpenApiParameter(\n            name=\"graphql_query_id\",\n            required=False,\n            type=OpenApiTypes.UUID,\n            location=OpenApiParameter.QUERY,\n        ),\n    ]\n)\ndef get(self, request, *args, **kwargs):\n    \"\"\"Get GraphQL data for a Device.\"\"\"\n    device = get_object_or_404(Device.objects.restrict(request.user, \"view\"), pk=kwargs[\"pk\"])\n\n    graphql_query = None\n    graphql_query_id_param = request.query_params.get(\"graphql_query_id\")\n    if graphql_query_id_param:\n        try:\n            graphql_query = GraphQLQuery.objects.get(pk=graphql_query_id_param)\n        except GraphQLQuery.DoesNotExist as exc:\n            raise ValidationError(f\"GraphQLQuery with id '{graphql_query_id_param}' not found\") from exc\n    settings = models.GoldenConfigSetting.objects.get_for_device(device)\n\n    if graphql_query is None:\n        if settings.sot_agg_query is not None:\n            graphql_query = settings.sot_agg_query\n        else:\n            raise ValidationError(\"Golden Config settings sot_agg_query not set\")\n\n    if \"device_id\" not in graphql_query.variables:\n        raise ValidationError(\"The selected GraphQL query is missing a 'device_id' variable\")\n\n    status_code, graphql_data = graph_ql_query(request, device, graphql_query.query)\n    if status_code == status.HTTP_200_OK:\n        return Response(\n            data=graphql_data,\n            status=status.HTTP_200_OK,\n        )\n\n    raise ValidationError(\"Unable to generate the GraphQL data for this device\")\n</code></pre>"},{"location":"dev/code_reference/models.html","title":"Models","text":""},{"location":"dev/code_reference/models.html#nautobot_golden_config.models","title":"<code>nautobot_golden_config.models</code>","text":"<p>Django Models for tracking the configuration compliance per feature and device.</p>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ComplianceFeature","title":"<code>ComplianceFeature</code>","text":"<p>               Bases: <code>PrimaryModel</code></p> <p>ComplianceFeature details.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@extras_features(\n    \"custom_fields\",\n    \"custom_validators\",\n    \"export_templates\",\n    \"graphql\",\n    \"relationships\",\n    \"webhooks\",\n)\nclass ComplianceFeature(PrimaryModel):  # pylint: disable=too-many-ancestors\n    \"\"\"ComplianceFeature details.\"\"\"\n\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True)\n    description = models.CharField(max_length=200, blank=True)\n\n    class Meta:\n        \"\"\"Meta information for ComplianceFeature model.\"\"\"\n\n        ordering = (\"slug\",)\n\n    def __str__(self):\n        \"\"\"Return a sane string representation of the instance.\"\"\"\n        return self.slug\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ComplianceFeature.Meta","title":"<code>Meta</code>","text":"<p>Meta information for ComplianceFeature model.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class Meta:\n    \"\"\"Meta information for ComplianceFeature model.\"\"\"\n\n    ordering = (\"slug\",)\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ComplianceFeature.__str__","title":"<code>__str__()</code>","text":"<p>Return a sane string representation of the instance.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a sane string representation of the instance.\"\"\"\n    return self.slug\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ComplianceRule","title":"<code>ComplianceRule</code>","text":"<p>               Bases: <code>PrimaryModel</code></p> <p>ComplianceRule details.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@extras_features(\n    \"custom_fields\",\n    \"custom_validators\",\n    \"export_templates\",\n    \"graphql\",\n    \"relationships\",\n    \"webhooks\",\n)\nclass ComplianceRule(PrimaryModel):  # pylint: disable=too-many-ancestors\n    \"\"\"ComplianceRule details.\"\"\"\n\n    feature = models.ForeignKey(to=\"ComplianceFeature\", on_delete=models.CASCADE, related_name=\"feature\")\n\n    platform = models.ForeignKey(\n        to=\"dcim.Platform\",\n        on_delete=models.CASCADE,\n        related_name=\"compliance_rules\",\n    )\n    description = models.CharField(\n        max_length=200,\n        blank=True,\n    )\n    config_ordered = models.BooleanField(\n        verbose_name=\"Configured Ordered\",\n        help_text=\"Whether or not the configuration order matters, such as in ACLs.\",\n        default=False,\n    )\n\n    config_remediation = models.BooleanField(\n        default=False,\n        verbose_name=\"Config Remediation\",\n        help_text=\"Whether or not the config remediation is executed for this compliance rule.\",\n    )\n\n    match_config = models.TextField(\n        blank=True,\n        verbose_name=\"Config to Match\",\n        help_text=\"The config to match that is matched based on the parent most configuration. E.g.: For CLI `router bgp` or `ntp`. For JSON this is a top level key name. For XML this is a xpath query.\",\n    )\n    config_type = models.CharField(\n        max_length=20,\n        default=ComplianceRuleConfigTypeChoice.TYPE_CLI,\n        choices=ComplianceRuleConfigTypeChoice,\n        help_text=\"Whether the configuration is in CLI, JSON, or XML format.\",\n    )\n    custom_compliance = models.BooleanField(\n        default=False, help_text=\"Whether this Compliance Rule is proceeded as custom.\"\n    )\n\n    @property\n    def remediation_setting(self):\n        \"\"\"Returns remediation settings for a particular platform.\"\"\"\n        return RemediationSetting.objects.filter(platform=self.platform).first()\n\n    class Meta:\n        \"\"\"Meta information for ComplianceRule model.\"\"\"\n\n        ordering = (\"platform\", \"feature__name\")\n        unique_together = (\n            \"feature\",\n            \"platform\",\n        )\n\n    def __str__(self):\n        \"\"\"Return a sane string representation of the instance.\"\"\"\n        return f\"{self.platform} - {self.feature.name}\"\n\n    def clean(self):\n        \"\"\"Verify that if cli, then match_config is set.\"\"\"\n        if self.config_type == ComplianceRuleConfigTypeChoice.TYPE_CLI and not self.match_config:\n            raise ValidationError(\"CLI configuration set, but no configuration set to match.\")\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ComplianceRule.remediation_setting","title":"<code>remediation_setting</code>  <code>property</code>","text":"<p>Returns remediation settings for a particular platform.</p>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ComplianceRule.Meta","title":"<code>Meta</code>","text":"<p>Meta information for ComplianceRule model.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class Meta:\n    \"\"\"Meta information for ComplianceRule model.\"\"\"\n\n    ordering = (\"platform\", \"feature__name\")\n    unique_together = (\n        \"feature\",\n        \"platform\",\n    )\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ComplianceRule.__str__","title":"<code>__str__()</code>","text":"<p>Return a sane string representation of the instance.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a sane string representation of the instance.\"\"\"\n    return f\"{self.platform} - {self.feature.name}\"\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ComplianceRule.clean","title":"<code>clean()</code>","text":"<p>Verify that if cli, then match_config is set.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def clean(self):\n    \"\"\"Verify that if cli, then match_config is set.\"\"\"\n    if self.config_type == ComplianceRuleConfigTypeChoice.TYPE_CLI and not self.match_config:\n        raise ValidationError(\"CLI configuration set, but no configuration set to match.\")\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigCompliance","title":"<code>ConfigCompliance</code>","text":"<p>               Bases: <code>PrimaryModel</code></p> <p>Configuration compliance details.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@extras_features(\n    \"custom_fields\",\n    \"custom_links\",\n    \"custom_validators\",\n    \"export_templates\",\n    \"graphql\",\n    \"relationships\",\n    \"webhooks\",\n)\nclass ConfigCompliance(PrimaryModel):  # pylint: disable=too-many-ancestors\n    \"\"\"Configuration compliance details.\"\"\"\n\n    device = models.ForeignKey(to=\"dcim.Device\", on_delete=models.CASCADE, help_text=\"The device\")\n    rule = models.ForeignKey(to=\"ComplianceRule\", on_delete=models.CASCADE, related_name=\"rule\")\n    compliance = models.BooleanField(blank=True)\n    actual = models.JSONField(blank=True, help_text=\"Actual Configuration for feature\")\n    intended = models.JSONField(blank=True, help_text=\"Intended Configuration for feature\")\n    # these three are config snippets exposed for the ConfigDeployment.\n    remediation = models.JSONField(blank=True, help_text=\"Remediation Configuration for the device\")\n    missing = models.JSONField(blank=True, help_text=\"Configuration that should be on the device.\")\n    extra = models.JSONField(blank=True, help_text=\"Configuration that should not be on the device.\")\n    ordered = models.BooleanField(default=False)\n    # Used for django-pivot, both compliance and compliance_int should be set.\n    compliance_int = models.IntegerField(blank=True)\n\n    def to_objectchange(self, action, *, related_object=None, object_data_extra=None, object_data_exclude=None):  # pylint: disable=arguments-differ\n        \"\"\"Remove actual and intended configuration from changelog.\"\"\"\n        fields_to_exclude = [\"actual\", \"intended\"]\n        if not object_data_exclude:\n            object_data_exclude = fields_to_exclude\n        data_v2 = serialize_object_v2(self)\n        for field in fields_to_exclude:\n            data_v2.pop(field)\n        return ObjectChange(\n            changed_object=self,\n            object_repr=str(self),\n            action=action,\n            object_data=serialize_object(self, extra=object_data_extra, exclude=object_data_exclude),\n            object_data_v2=data_v2,\n            related_object=related_object,\n        )\n\n    is_dynamic_group_associable_model = False\n\n    class Meta:\n        \"\"\"Set unique together fields for model.\"\"\"\n\n        ordering = [\"device\", \"rule\"]\n        unique_together = (\"device\", \"rule\")\n\n    def __str__(self):\n        \"\"\"String representation of a the compliance.\"\"\"\n        return f\"{self.device} -&gt; {self.rule} -&gt; {self.compliance}\"\n\n    def compliance_on_save(self):\n        \"\"\"The actual configuration compliance happens here, but the details for actual compliance job would be found in FUNC_MAPPER.\"\"\"\n        if self.rule.custom_compliance:\n            if not FUNC_MAPPER.get(\"custom\"):\n                raise ValidationError(\n                    \"Custom type provided, but no `get_custom_compliance` config set, please contact system admin.\"\n                )\n            compliance_details = FUNC_MAPPER[\"custom\"](obj=self)\n            _verify_get_custom_compliance_data(compliance_details)\n        else:\n            compliance_details = FUNC_MAPPER[self.rule.config_type](obj=self)\n\n        self.compliance = compliance_details[\"compliance\"]\n        self.compliance_int = compliance_details[\"compliance_int\"]\n        self.ordered = compliance_details[\"ordered\"]\n        self.missing = compliance_details[\"missing\"]\n        self.extra = compliance_details[\"extra\"]\n\n    def remediation_on_save(self):\n        \"\"\"The actual remediation happens here, before saving the object.\"\"\"\n        if self.compliance:\n            self.remediation = \"\"\n            return\n\n        if not self.rule.config_remediation:\n            self.remediation = \"\"\n            return\n\n        if not self.rule.remediation_setting:\n            self.remediation = \"\"\n            return\n\n        remediation_config = FUNC_MAPPER[self.rule.remediation_setting.remediation_type](obj=self)\n        self.remediation = remediation_config\n\n    def save(self, *args, **kwargs):\n        \"\"\"The actual configuration compliance happens here, but the details for actual compliance job would be found in FUNC_MAPPER.\"\"\"\n        self.compliance_on_save()\n        self.remediation_on_save()\n        self.full_clean()\n\n        # This accounts for django 4.2 `Setting update_fields in Model.save() may now be required` change\n        # in behavior\n        if kwargs.get(\"update_fields\"):\n            kwargs[\"update_fields\"].update(\n                {\"compliance\", \"compliance_int\", \"ordered\", \"missing\", \"extra\", \"remediation\"}\n            )\n\n        super().save(*args, **kwargs)\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigCompliance.Meta","title":"<code>Meta</code>","text":"<p>Set unique together fields for model.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class Meta:\n    \"\"\"Set unique together fields for model.\"\"\"\n\n    ordering = [\"device\", \"rule\"]\n    unique_together = (\"device\", \"rule\")\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigCompliance.__str__","title":"<code>__str__()</code>","text":"<p>String representation of a the compliance.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of a the compliance.\"\"\"\n    return f\"{self.device} -&gt; {self.rule} -&gt; {self.compliance}\"\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigCompliance.compliance_on_save","title":"<code>compliance_on_save()</code>","text":"<p>The actual configuration compliance happens here, but the details for actual compliance job would be found in FUNC_MAPPER.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def compliance_on_save(self):\n    \"\"\"The actual configuration compliance happens here, but the details for actual compliance job would be found in FUNC_MAPPER.\"\"\"\n    if self.rule.custom_compliance:\n        if not FUNC_MAPPER.get(\"custom\"):\n            raise ValidationError(\n                \"Custom type provided, but no `get_custom_compliance` config set, please contact system admin.\"\n            )\n        compliance_details = FUNC_MAPPER[\"custom\"](obj=self)\n        _verify_get_custom_compliance_data(compliance_details)\n    else:\n        compliance_details = FUNC_MAPPER[self.rule.config_type](obj=self)\n\n    self.compliance = compliance_details[\"compliance\"]\n    self.compliance_int = compliance_details[\"compliance_int\"]\n    self.ordered = compliance_details[\"ordered\"]\n    self.missing = compliance_details[\"missing\"]\n    self.extra = compliance_details[\"extra\"]\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigCompliance.remediation_on_save","title":"<code>remediation_on_save()</code>","text":"<p>The actual remediation happens here, before saving the object.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def remediation_on_save(self):\n    \"\"\"The actual remediation happens here, before saving the object.\"\"\"\n    if self.compliance:\n        self.remediation = \"\"\n        return\n\n    if not self.rule.config_remediation:\n        self.remediation = \"\"\n        return\n\n    if not self.rule.remediation_setting:\n        self.remediation = \"\"\n        return\n\n    remediation_config = FUNC_MAPPER[self.rule.remediation_setting.remediation_type](obj=self)\n    self.remediation = remediation_config\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigCompliance.save","title":"<code>save(*args, **kwargs)</code>","text":"<p>The actual configuration compliance happens here, but the details for actual compliance job would be found in FUNC_MAPPER.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"The actual configuration compliance happens here, but the details for actual compliance job would be found in FUNC_MAPPER.\"\"\"\n    self.compliance_on_save()\n    self.remediation_on_save()\n    self.full_clean()\n\n    # This accounts for django 4.2 `Setting update_fields in Model.save() may now be required` change\n    # in behavior\n    if kwargs.get(\"update_fields\"):\n        kwargs[\"update_fields\"].update(\n            {\"compliance\", \"compliance_int\", \"ordered\", \"missing\", \"extra\", \"remediation\"}\n        )\n\n    super().save(*args, **kwargs)\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigCompliance.to_objectchange","title":"<code>to_objectchange(action, *, related_object=None, object_data_extra=None, object_data_exclude=None)</code>","text":"<p>Remove actual and intended configuration from changelog.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def to_objectchange(self, action, *, related_object=None, object_data_extra=None, object_data_exclude=None):  # pylint: disable=arguments-differ\n    \"\"\"Remove actual and intended configuration from changelog.\"\"\"\n    fields_to_exclude = [\"actual\", \"intended\"]\n    if not object_data_exclude:\n        object_data_exclude = fields_to_exclude\n    data_v2 = serialize_object_v2(self)\n    for field in fields_to_exclude:\n        data_v2.pop(field)\n    return ObjectChange(\n        changed_object=self,\n        object_repr=str(self),\n        action=action,\n        object_data=serialize_object(self, extra=object_data_extra, exclude=object_data_exclude),\n        object_data_v2=data_v2,\n        related_object=related_object,\n    )\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigPlan","title":"<code>ConfigPlan</code>","text":"<p>               Bases: <code>PrimaryModel</code></p> <p>ConfigPlan for Golden Configuration Plan Model definition.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@extras_features(\n    \"custom_fields\",\n    \"custom_links\",\n    \"custom_validators\",\n    \"export_templates\",\n    \"graphql\",\n    \"relationships\",\n    \"webhooks\",\n    \"statuses\",\n)\nclass ConfigPlan(PrimaryModel):  # pylint: disable=too-many-ancestors\n    \"\"\"ConfigPlan for Golden Configuration Plan Model definition.\"\"\"\n\n    plan_type = models.CharField(max_length=20, choices=ConfigPlanTypeChoice, verbose_name=\"Plan Type\")\n    device = models.ForeignKey(\n        to=\"dcim.Device\",\n        on_delete=models.CASCADE,\n        related_name=\"config_plan\",\n    )\n    config_set = models.TextField(help_text=\"Configuration set to be applied to device.\")\n    feature = models.ManyToManyField(\n        to=ComplianceFeature,\n        related_name=\"config_plan\",\n        blank=True,\n    )\n    plan_result = models.ForeignKey(\n        to=\"extras.JobResult\",\n        on_delete=models.CASCADE,\n        related_name=\"config_plan\",\n        verbose_name=\"Plan Result\",\n    )\n    deploy_result = models.ForeignKey(\n        to=\"extras.JobResult\",\n        on_delete=models.PROTECT,\n        related_name=\"config_plan_deploy_result\",\n        verbose_name=\"Deploy Result\",\n        blank=True,\n        null=True,\n    )\n    change_control_id = models.CharField(\n        max_length=50,\n        blank=True,\n        verbose_name=\"Change Control ID\",\n        help_text=\"Change Control ID for this configuration plan.\",\n    )\n    change_control_url = models.URLField(blank=True, verbose_name=\"Change Control URL\")\n    status = StatusField(blank=True, null=True, on_delete=models.PROTECT)\n\n    class Meta:\n        \"\"\"Meta information for ConfigPlan model.\"\"\"\n\n        ordering = (\"-created\", \"device\")\n        unique_together = (\n            \"plan_type\",\n            \"device\",\n            \"created\",\n        )\n\n    def __str__(self):\n        \"\"\"Return a simple string if model is called.\"\"\"\n        return f\"{self.device.name}-{self.plan_type}-{self.created}\"\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigPlan.Meta","title":"<code>Meta</code>","text":"<p>Meta information for ConfigPlan model.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class Meta:\n    \"\"\"Meta information for ConfigPlan model.\"\"\"\n\n    ordering = (\"-created\", \"device\")\n    unique_together = (\n        \"plan_type\",\n        \"device\",\n        \"created\",\n    )\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigPlan.__str__","title":"<code>__str__()</code>","text":"<p>Return a simple string if model is called.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a simple string if model is called.\"\"\"\n    return f\"{self.device.name}-{self.plan_type}-{self.created}\"\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigRemove","title":"<code>ConfigRemove</code>","text":"<p>               Bases: <code>PrimaryModel</code></p> <p>ConfigRemove for Regex Line Removals from Backup Configuration Model definition.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@extras_features(\n    \"custom_fields\",\n    \"custom_links\",\n    \"custom_validators\",\n    \"export_templates\",\n    \"graphql\",\n    \"relationships\",\n    \"webhooks\",\n)\nclass ConfigRemove(PrimaryModel):  # pylint: disable=too-many-ancestors\n    \"\"\"ConfigRemove for Regex Line Removals from Backup Configuration Model definition.\"\"\"\n\n    name = models.CharField(max_length=255)\n    platform = models.ForeignKey(\n        to=\"dcim.Platform\",\n        on_delete=models.CASCADE,\n        related_name=\"backup_line_remove\",\n    )\n    description = models.CharField(\n        max_length=200,\n        blank=True,\n    )\n    regex = models.CharField(\n        max_length=200,\n        verbose_name=\"Regex Pattern\",\n        help_text=\"Regex pattern used to remove a line from the backup configuration.\",\n    )\n\n    clone_fields = [\"platform\", \"description\", \"regex\"]\n\n    class Meta:\n        \"\"\"Meta information for ConfigRemove model.\"\"\"\n\n        ordering = (\"platform\", \"name\")\n        unique_together = (\"name\", \"platform\")\n\n    def __str__(self):\n        \"\"\"Return a simple string if model is called.\"\"\"\n        return self.name\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigRemove.Meta","title":"<code>Meta</code>","text":"<p>Meta information for ConfigRemove model.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class Meta:\n    \"\"\"Meta information for ConfigRemove model.\"\"\"\n\n    ordering = (\"platform\", \"name\")\n    unique_together = (\"name\", \"platform\")\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigRemove.__str__","title":"<code>__str__()</code>","text":"<p>Return a simple string if model is called.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a simple string if model is called.\"\"\"\n    return self.name\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigReplace","title":"<code>ConfigReplace</code>","text":"<p>               Bases: <code>PrimaryModel</code></p> <p>ConfigReplace for Regex Line Replacements from Backup Configuration Model definition.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@extras_features(\n    \"custom_fields\",\n    \"custom_links\",\n    \"custom_validators\",\n    \"export_templates\",\n    \"graphql\",\n    \"relationships\",\n    \"webhooks\",\n)\nclass ConfigReplace(PrimaryModel):  # pylint: disable=too-many-ancestors\n    \"\"\"ConfigReplace for Regex Line Replacements from Backup Configuration Model definition.\"\"\"\n\n    name = models.CharField(max_length=255)\n    platform = models.ForeignKey(\n        to=\"dcim.Platform\",\n        on_delete=models.CASCADE,\n        related_name=\"backup_line_replace\",\n    )\n    description = models.CharField(\n        max_length=200,\n        blank=True,\n    )\n    regex = models.CharField(\n        max_length=200,\n        verbose_name=\"Regex Pattern to Substitute\",\n        help_text=\"Regex pattern that will be found and replaced with 'replaced text'.\",\n    )\n    replace = models.CharField(\n        max_length=200,\n        verbose_name=\"Replaced Text\",\n        help_text=\"Text that will be inserted in place of Regex pattern match.\",\n    )\n\n    clone_fields = [\"platform\", \"description\", \"regex\", \"replace\"]\n\n    class Meta:\n        \"\"\"Meta information for ConfigReplace model.\"\"\"\n\n        ordering = (\"platform\", \"name\")\n        unique_together = (\"name\", \"platform\")\n\n    def __str__(self):\n        \"\"\"Return a simple string if model is called.\"\"\"\n        return self.name\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigReplace.Meta","title":"<code>Meta</code>","text":"<p>Meta information for ConfigReplace model.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class Meta:\n    \"\"\"Meta information for ConfigReplace model.\"\"\"\n\n    ordering = (\"platform\", \"name\")\n    unique_together = (\"name\", \"platform\")\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.ConfigReplace.__str__","title":"<code>__str__()</code>","text":"<p>Return a simple string if model is called.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a simple string if model is called.\"\"\"\n    return self.name\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfig","title":"<code>GoldenConfig</code>","text":"<p>               Bases: <code>PrimaryModel</code></p> <p>Configuration Management Model.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@extras_features(\n    \"custom_fields\",\n    \"custom_links\",\n    \"custom_validators\",\n    \"export_templates\",\n    \"graphql\",\n    \"relationships\",\n    \"webhooks\",\n)\nclass GoldenConfig(PrimaryModel):  # pylint: disable=too-many-ancestors\n    \"\"\"Configuration Management Model.\"\"\"\n\n    device = models.OneToOneField(\n        to=\"dcim.Device\",\n        on_delete=models.CASCADE,\n        help_text=\"device\",\n        blank=False,\n    )\n    backup_config = models.TextField(blank=True, help_text=\"Full backup config for device.\")\n    backup_last_attempt_date = models.DateTimeField(null=True, blank=True)\n    backup_last_success_date = models.DateTimeField(null=True, blank=True)\n\n    intended_config = models.TextField(blank=True, help_text=\"Intended config for the device.\")\n    intended_last_attempt_date = models.DateTimeField(null=True, blank=True)\n    intended_last_success_date = models.DateTimeField(null=True, blank=True)\n\n    compliance_config = models.TextField(blank=True, help_text=\"Full config diff for device.\")\n    compliance_last_attempt_date = models.DateTimeField(null=True, blank=True)\n    compliance_last_success_date = models.DateTimeField(null=True, blank=True)\n\n    def to_objectchange(self, action, *, related_object=None, object_data_extra=None, object_data_exclude=None):  # pylint: disable=arguments-differ\n        \"\"\"Remove actual and intended configuration from changelog.\"\"\"\n        fields_to_exclude = [\"backup_config\", \"intended_config\", \"compliance_config\"]\n        if not object_data_exclude:\n            object_data_exclude = fields_to_exclude\n        data_v2 = serialize_object_v2(self)\n        for field in fields_to_exclude:\n            data_v2.pop(field)\n        return ObjectChange(\n            changed_object=self,\n            object_repr=str(self),\n            action=action,\n            object_data=serialize_object(self, extra=object_data_extra, exclude=object_data_exclude),\n            object_data_v2=data_v2,\n            related_object=related_object,\n        )\n\n    @staticmethod\n    def get_dynamic_group_device_pks():\n        \"\"\"Get all Device PKs associated with GoldenConfigSetting DynamicGroups.\"\"\"\n        gc_dynamic_group_device_queryset = Device.objects.none()\n        for setting in GoldenConfigSetting.objects.all():\n            # using \"|\" should not require calling distinct afterwards\n            gc_dynamic_group_device_queryset = gc_dynamic_group_device_queryset | setting.dynamic_group.members\n\n        return set(gc_dynamic_group_device_queryset.values_list(\"pk\", flat=True))\n\n    @classmethod\n    def get_golden_config_device_ids(cls):\n        \"\"\"Get all Device PKs associated with GoldenConfig entries.\"\"\"\n        return set(cls.objects.values_list(\"device__pk\", flat=True))\n\n    class Meta:\n        \"\"\"Set unique together fields for model.\"\"\"\n\n        ordering = [\"device\"]\n\n    def __str__(self):\n        \"\"\"String representation of a the compliance.\"\"\"\n        return f\"{self.device}\"\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfig.Meta","title":"<code>Meta</code>","text":"<p>Set unique together fields for model.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class Meta:\n    \"\"\"Set unique together fields for model.\"\"\"\n\n    ordering = [\"device\"]\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfig.__str__","title":"<code>__str__()</code>","text":"<p>String representation of a the compliance.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of a the compliance.\"\"\"\n    return f\"{self.device}\"\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfig.get_dynamic_group_device_pks","title":"<code>get_dynamic_group_device_pks()</code>  <code>staticmethod</code>","text":"<p>Get all Device PKs associated with GoldenConfigSetting DynamicGroups.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@staticmethod\ndef get_dynamic_group_device_pks():\n    \"\"\"Get all Device PKs associated with GoldenConfigSetting DynamicGroups.\"\"\"\n    gc_dynamic_group_device_queryset = Device.objects.none()\n    for setting in GoldenConfigSetting.objects.all():\n        # using \"|\" should not require calling distinct afterwards\n        gc_dynamic_group_device_queryset = gc_dynamic_group_device_queryset | setting.dynamic_group.members\n\n    return set(gc_dynamic_group_device_queryset.values_list(\"pk\", flat=True))\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfig.get_golden_config_device_ids","title":"<code>get_golden_config_device_ids()</code>  <code>classmethod</code>","text":"<p>Get all Device PKs associated with GoldenConfig entries.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@classmethod\ndef get_golden_config_device_ids(cls):\n    \"\"\"Get all Device PKs associated with GoldenConfig entries.\"\"\"\n    return set(cls.objects.values_list(\"device__pk\", flat=True))\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfig.to_objectchange","title":"<code>to_objectchange(action, *, related_object=None, object_data_extra=None, object_data_exclude=None)</code>","text":"<p>Remove actual and intended configuration from changelog.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def to_objectchange(self, action, *, related_object=None, object_data_extra=None, object_data_exclude=None):  # pylint: disable=arguments-differ\n    \"\"\"Remove actual and intended configuration from changelog.\"\"\"\n    fields_to_exclude = [\"backup_config\", \"intended_config\", \"compliance_config\"]\n    if not object_data_exclude:\n        object_data_exclude = fields_to_exclude\n    data_v2 = serialize_object_v2(self)\n    for field in fields_to_exclude:\n        data_v2.pop(field)\n    return ObjectChange(\n        changed_object=self,\n        object_repr=str(self),\n        action=action,\n        object_data=serialize_object(self, extra=object_data_extra, exclude=object_data_exclude),\n        object_data_v2=data_v2,\n        related_object=related_object,\n    )\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSetting","title":"<code>GoldenConfigSetting</code>","text":"<p>               Bases: <code>PrimaryModel</code></p> <p>GoldenConfigSetting Model definition. This provides global configs instead of via configs.py.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@extras_features(\n    \"graphql\",\n)\nclass GoldenConfigSetting(PrimaryModel):  # pylint: disable=too-many-ancestors\n    \"\"\"GoldenConfigSetting Model definition. This provides global configs instead of via configs.py.\"\"\"\n\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True)\n    weight = models.PositiveSmallIntegerField(default=1000)\n    description = models.CharField(\n        max_length=200,\n        blank=True,\n    )\n    backup_repository = models.ForeignKey(\n        to=\"extras.GitRepository\",\n        on_delete=models.PROTECT,\n        null=True,\n        blank=True,\n        related_name=\"backup_repository\",\n        limit_choices_to={\"provided_contents__contains\": \"nautobot_golden_config.backupconfigs\"},\n    )\n    backup_path_template = models.CharField(\n        max_length=255,\n        blank=True,\n        verbose_name=\"Backup Path in Jinja Template Form\",\n        help_text=\"The Jinja path representation of where the backup file will be found. The variable `obj` is available as the device instance object of a given device, as is the case for all Jinja templates. e.g. `{{obj.location.name|slugify}}/{{obj.name}}.cfg`\",\n    )\n    intended_repository = models.ForeignKey(\n        to=\"extras.GitRepository\",\n        on_delete=models.PROTECT,\n        null=True,\n        blank=True,\n        related_name=\"intended_repository\",\n        limit_choices_to={\"provided_contents__contains\": \"nautobot_golden_config.intendedconfigs\"},\n    )\n    intended_path_template = models.CharField(\n        max_length=255,\n        blank=True,\n        verbose_name=\"Intended Path in Jinja Template Form\",\n        help_text=\"The Jinja path representation of where the generated file will be placed. e.g. `{{obj.location.name|slugify}}/{{obj.name}}.cfg`\",\n    )\n    jinja_repository = models.ForeignKey(\n        to=\"extras.GitRepository\",\n        on_delete=models.PROTECT,\n        null=True,\n        blank=True,\n        related_name=\"jinja_template\",\n        limit_choices_to={\"provided_contents__contains\": \"nautobot_golden_config.jinjatemplate\"},\n    )\n    jinja_path_template = models.CharField(\n        max_length=255,\n        blank=True,\n        verbose_name=\"Template Path in Jinja Template Form\",\n        help_text=\"The Jinja path representation of where the Jinja template can be found. e.g. `{{obj.platform.network_driver}}.j2`\",\n    )\n    backup_test_connectivity = models.BooleanField(\n        default=True,\n        verbose_name=\"Backup Test\",\n        help_text=\"Whether or not to pretest the connectivity of the device by verifying there is a resolvable IP that can connect to port 22.\",\n    )\n    sot_agg_query = models.ForeignKey(\n        to=\"extras.GraphQLQuery\",\n        on_delete=models.PROTECT,\n        verbose_name=\"GraphQL Query\",\n        null=True,\n        blank=True,\n        related_name=\"sot_aggregation\",\n    )\n    dynamic_group = models.OneToOneField(\n        to=\"extras.DynamicGroup\",\n        on_delete=models.PROTECT,\n        related_name=\"golden_config_setting\",\n    )\n    is_dynamic_group_associable_model = False\n\n    objects = GoldenConfigSettingManager()\n\n    clone_fields = [\n        \"weight\",\n        \"backup_path_template\",\n        \"backup_test_connectivity\",\n        \"intended_path_template\",\n        \"jinja_path_template\",\n        \"sot_agg_query\",\n    ]\n\n    def __str__(self):\n        \"\"\"Return a simple string if model is called.\"\"\"\n        return f\"Golden Config Setting - {self.name}\"\n\n    class Meta:\n        \"\"\"Set unique fields for model.\n\n        Provide ordering used in tables and get_device_to_settings_map.\n        Sorting on weight is performed from the highest weight value to the lowest weight value.\n        This is to ensure only one app settings could be applied per single device based on priority and name.\n        \"\"\"\n\n        verbose_name = \"Golden Config Setting\"\n        ordering = [\"-weight\", \"name\"]  # Refer to weight comment in class docstring.\n\n    def clean(self):\n        \"\"\"Validate the scope and GraphQL query.\"\"\"\n        super().clean()\n\n        if ENABLE_SOTAGG and not self.sot_agg_query:\n            raise ValidationError(\"A GraphQL query must be defined when `ENABLE_SOTAGG` is True\")\n\n        if self.sot_agg_query:\n            LOGGER.debug(\"GraphQL - test  query start with: `%s`\", GRAPHQL_STR_START)\n            if not str(self.sot_agg_query.query.lstrip()).startswith(GRAPHQL_STR_START):\n                raise ValidationError(f\"The GraphQL query must start with exactly `{GRAPHQL_STR_START}`\")\n\n    def get_queryset(self):\n        \"\"\"Generate a Device QuerySet from the filter.\"\"\"\n        return self.dynamic_group.members\n\n    def device_count(self):\n        \"\"\"Return the number of devices in the group.\"\"\"\n        return self.dynamic_group.count\n\n    def get_url_to_filtered_device_list(self):\n        \"\"\"Get url to all devices that are matching the filter.\"\"\"\n        return self.dynamic_group.get_group_members_url()\n\n    def get_jinja_template_path_for_device(self, device):\n        \"\"\"Get the Jinja template path for a device.\"\"\"\n        if self.jinja_repository is not None:\n            rendered_path = render_jinja2(template_code=self.jinja_path_template, context={\"obj\": device})\n            return f\"{self.jinja_repository.filesystem_path}{os.path.sep}{rendered_path}\"\n        return None\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSetting.Meta","title":"<code>Meta</code>","text":"<p>Set unique fields for model.</p> <p>Provide ordering used in tables and get_device_to_settings_map. Sorting on weight is performed from the highest weight value to the lowest weight value. This is to ensure only one app settings could be applied per single device based on priority and name.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class Meta:\n    \"\"\"Set unique fields for model.\n\n    Provide ordering used in tables and get_device_to_settings_map.\n    Sorting on weight is performed from the highest weight value to the lowest weight value.\n    This is to ensure only one app settings could be applied per single device based on priority and name.\n    \"\"\"\n\n    verbose_name = \"Golden Config Setting\"\n    ordering = [\"-weight\", \"name\"]  # Refer to weight comment in class docstring.\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSetting.__str__","title":"<code>__str__()</code>","text":"<p>Return a simple string if model is called.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a simple string if model is called.\"\"\"\n    return f\"Golden Config Setting - {self.name}\"\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSetting.clean","title":"<code>clean()</code>","text":"<p>Validate the scope and GraphQL query.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def clean(self):\n    \"\"\"Validate the scope and GraphQL query.\"\"\"\n    super().clean()\n\n    if ENABLE_SOTAGG and not self.sot_agg_query:\n        raise ValidationError(\"A GraphQL query must be defined when `ENABLE_SOTAGG` is True\")\n\n    if self.sot_agg_query:\n        LOGGER.debug(\"GraphQL - test  query start with: `%s`\", GRAPHQL_STR_START)\n        if not str(self.sot_agg_query.query.lstrip()).startswith(GRAPHQL_STR_START):\n            raise ValidationError(f\"The GraphQL query must start with exactly `{GRAPHQL_STR_START}`\")\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSetting.device_count","title":"<code>device_count()</code>","text":"<p>Return the number of devices in the group.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def device_count(self):\n    \"\"\"Return the number of devices in the group.\"\"\"\n    return self.dynamic_group.count\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSetting.get_jinja_template_path_for_device","title":"<code>get_jinja_template_path_for_device(device)</code>","text":"<p>Get the Jinja template path for a device.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def get_jinja_template_path_for_device(self, device):\n    \"\"\"Get the Jinja template path for a device.\"\"\"\n    if self.jinja_repository is not None:\n        rendered_path = render_jinja2(template_code=self.jinja_path_template, context={\"obj\": device})\n        return f\"{self.jinja_repository.filesystem_path}{os.path.sep}{rendered_path}\"\n    return None\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSetting.get_queryset","title":"<code>get_queryset()</code>","text":"<p>Generate a Device QuerySet from the filter.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def get_queryset(self):\n    \"\"\"Generate a Device QuerySet from the filter.\"\"\"\n    return self.dynamic_group.members\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSetting.get_url_to_filtered_device_list","title":"<code>get_url_to_filtered_device_list()</code>","text":"<p>Get url to all devices that are matching the filter.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def get_url_to_filtered_device_list(self):\n    \"\"\"Get url to all devices that are matching the filter.\"\"\"\n    return self.dynamic_group.get_group_members_url()\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSettingManager","title":"<code>GoldenConfigSettingManager</code>","text":"<p>               Bases: <code>from_queryset(RestrictedQuerySet)</code></p> <p>Manager for GoldenConfigSetting.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class GoldenConfigSettingManager(BaseManager.from_queryset(RestrictedQuerySet)):\n    \"\"\"Manager for GoldenConfigSetting.\"\"\"\n\n    def get_for_device(self, device):\n        \"\"\"Return the highest weighted GoldenConfigSetting assigned to a device.\"\"\"\n        if not isinstance(device, Device):\n            raise ValueError(\"The device argument must be a Device instance.\")\n        dynamic_group = device.dynamic_groups.exclude(golden_config_setting__isnull=True)\n        if dynamic_group.exists():\n            return dynamic_group.order_by(\"-golden_config_setting__weight\").first().golden_config_setting\n        return None\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.GoldenConfigSettingManager.get_for_device","title":"<code>get_for_device(device)</code>","text":"<p>Return the highest weighted GoldenConfigSetting assigned to a device.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def get_for_device(self, device):\n    \"\"\"Return the highest weighted GoldenConfigSetting assigned to a device.\"\"\"\n    if not isinstance(device, Device):\n        raise ValueError(\"The device argument must be a Device instance.\")\n    dynamic_group = device.dynamic_groups.exclude(golden_config_setting__isnull=True)\n    if dynamic_group.exists():\n        return dynamic_group.order_by(\"-golden_config_setting__weight\").first().golden_config_setting\n    return None\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.RemediationSetting","title":"<code>RemediationSetting</code>","text":"<p>               Bases: <code>PrimaryModel</code></p> <p>RemediationSetting details.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>@extras_features(\n    \"custom_fields\",\n    \"custom_links\",\n    \"custom_validators\",\n    \"export_templates\",\n    \"graphql\",\n    \"relationships\",\n    \"webhooks\",\n)\nclass RemediationSetting(PrimaryModel):  # pylint: disable=too-many-ancestors\n    \"\"\"RemediationSetting details.\"\"\"\n\n    # Remediation points to the platform\n    platform = models.OneToOneField(\n        to=\"dcim.Platform\",\n        on_delete=models.CASCADE,\n        related_name=\"remediation_settings\",\n    )\n\n    remediation_type = models.CharField(\n        max_length=50,\n        default=RemediationTypeChoice.TYPE_HIERCONFIG,\n        choices=RemediationTypeChoice,\n        help_text=\"Whether the remediation setting is type HierConfig or custom.\",\n    )\n\n    # takes options.json.\n    remediation_options = models.JSONField(\n        blank=True,\n        default=dict,\n        help_text=\"Remediation Configuration for the device\",\n    )\n\n    csv_headers = [\n        \"platform\",\n        \"remediation_type\",\n    ]\n\n    class Meta:\n        \"\"\"Meta information for RemediationSettings model.\"\"\"\n\n        ordering = (\"platform\", \"remediation_type\")\n\n    def to_csv(self):\n        \"\"\"Indicates model fields to return as csv.\"\"\"\n        return (\n            self.platform,\n            self.remediation_type,\n        )\n\n    def __str__(self):\n        \"\"\"Return a sane string representation of the instance.\"\"\"\n        return str(self.platform)\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.RemediationSetting.Meta","title":"<code>Meta</code>","text":"<p>Meta information for RemediationSettings model.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>class Meta:\n    \"\"\"Meta information for RemediationSettings model.\"\"\"\n\n    ordering = (\"platform\", \"remediation_type\")\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.RemediationSetting.__str__","title":"<code>__str__()</code>","text":"<p>Return a sane string representation of the instance.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a sane string representation of the instance.\"\"\"\n    return str(self.platform)\n</code></pre>"},{"location":"dev/code_reference/models.html#nautobot_golden_config.models.RemediationSetting.to_csv","title":"<code>to_csv()</code>","text":"<p>Indicates model fields to return as csv.</p> Source code in <code>nautobot_golden_config/models.py</code> <pre><code>def to_csv(self):\n    \"\"\"Indicates model fields to return as csv.\"\"\"\n    return (\n        self.platform,\n        self.remediation_type,\n    )\n</code></pre>"},{"location":"dev/code_reference/package.html","title":"Package","text":""},{"location":"dev/code_reference/package.html#nautobot_golden_config","title":"<code>nautobot_golden_config</code>","text":"<p>App declaration for nautobot_golden_config.</p>"},{"location":"dev/code_reference/package.html#nautobot_golden_config.GoldenConfig","title":"<code>GoldenConfig</code>","text":"<p>               Bases: <code>NautobotAppConfig</code></p> <p>App configuration for the nautobot_golden_config app.</p> Source code in <code>nautobot_golden_config/__init__.py</code> <pre><code>class GoldenConfig(NautobotAppConfig):\n    \"\"\"App configuration for the nautobot_golden_config app.\"\"\"\n\n    name = \"nautobot_golden_config\"\n    verbose_name = \"Golden Configuration\"\n    version = __version__\n    author = \"Network to Code, LLC\"\n    author_email = \"opensource@networktocode.com\"\n    description = \"Nautobot Apps that embraces NetDevOps and automates configuration backups, performs configuration compliance, generates intended configurations, and has config remediation and deployment features. Includes native Git integration and gives users the flexibility to mix and match the supported features.\"\n    base_url = \"golden-config\"\n    docs_view_name = \"plugins:nautobot_golden_config:docs\"\n    default_settings = {\n        \"enable_backup\": True,\n        \"enable_compliance\": True,\n        \"enable_intended\": True,\n        \"enable_sotagg\": True,\n        \"enable_postprocessing\": False,\n        \"enable_plan\": True,\n        \"enable_deploy\": True,\n        \"default_deploy_status\": \"Not Approved\",\n        \"postprocessing_callables\": [],\n        \"postprocessing_subscribed\": [],\n        \"per_feature_bar_width\": 0.3,\n        \"per_feature_width\": 13,\n        \"per_feature_height\": 4,\n        \"get_custom_compliance\": None,\n        # This is an experimental and undocumented setting that will change in the future!!\n        # Use at your own risk!!!!!\n        \"_manual_dynamic_group_mgmt\": False,\n        \"jinja_env\": {\n            \"undefined\": \"jinja2.StrictUndefined\",\n            \"trim_blocks\": True,\n            \"lstrip_blocks\": False,\n        },\n    }\n    constance_config = {\n        \"DEFAULT_FRAMEWORK\": ConstanceConfigItem(\n            default={\"all\": \"napalm\"},\n            help_text=\"The network library you prefer for by default for your dispatcher methods.\",\n            field_type=\"optional_json_field\",\n        ),\n        \"GET_CONFIG_FRAMEWORK\": ConstanceConfigItem(\n            default={},\n            help_text=\"The network library you prefer for making backups.\",\n            field_type=\"optional_json_field\",\n        ),\n        \"MERGE_CONFIG_FRAMEWORK\": ConstanceConfigItem(\n            default={},\n            help_text=\"The network library you prefer for pushing configs via a merge.\",\n            field_type=\"optional_json_field\",\n        ),\n        \"REPLACE_CONFIG_FRAMEWORK\": ConstanceConfigItem(\n            default={},\n            help_text=\"The network library you prefer for pushing configs via a merge.\",\n            field_type=\"optional_json_field\",\n        ),\n    }\n\n    def ready(self):\n        \"\"\"Register custom signals.\"\"\"\n        from nautobot_golden_config.models import ConfigCompliance  # pylint: disable=import-outside-toplevel\n\n        # pylint: disable=import-outside-toplevel\n        from .signals import (\n            config_compliance_platform_cleanup,\n            post_migrate_create_job_button,\n            post_migrate_create_statuses,\n        )\n\n        nautobot_database_ready.connect(post_migrate_create_statuses, sender=self)\n        nautobot_database_ready.connect(post_migrate_create_job_button, sender=self)\n\n        super().ready()\n        post_migrate.connect(config_compliance_platform_cleanup, sender=ConfigCompliance)\n</code></pre>"},{"location":"dev/code_reference/package.html#nautobot_golden_config.GoldenConfig.ready","title":"<code>ready()</code>","text":"<p>Register custom signals.</p> Source code in <code>nautobot_golden_config/__init__.py</code> <pre><code>def ready(self):\n    \"\"\"Register custom signals.\"\"\"\n    from nautobot_golden_config.models import ConfigCompliance  # pylint: disable=import-outside-toplevel\n\n    # pylint: disable=import-outside-toplevel\n    from .signals import (\n        config_compliance_platform_cleanup,\n        post_migrate_create_job_button,\n        post_migrate_create_statuses,\n    )\n\n    nautobot_database_ready.connect(post_migrate_create_statuses, sender=self)\n    nautobot_database_ready.connect(post_migrate_create_job_button, sender=self)\n\n    super().ready()\n    post_migrate.connect(config_compliance_platform_cleanup, sender=ConfigCompliance)\n</code></pre>"},{"location":"user/app_feature_backup.html","title":"Configuration Backup","text":"<p>The backup configuration process requires the Nautobot worker to connect via Nornir to the device, and run the <code>show run</code> or equivalent command,  and save the configuration. The high-level process to run backups is:</p> <ul> <li>Download the latest version of each of the Git repositories configured with the <code>backup configs</code> capability within Nautobot.</li> <li>Run a Nornir play to obtain the cli configurations.</li> <li>Optionally perform some lightweight processing of the backup.</li> <li>Store each device's backup configuration file on the local filesystem.</li> <li>Commit all files added or changed in each repository.</li> <li>Push configuration files to the remote Git repositories.</li> </ul>"},{"location":"user/app_feature_backup.html#configuration-backup-settings","title":"Configuration Backup Settings","text":"<p>Backup configurations often need some amount of parsing to stay sane. The two obvious use cases are firstly the ability to remove lines such as the \"Last  Configuration\" changed date, as this will cause unnecessary changes and secondly stripping out secrets from the configuration. In an effort to support these use cases, the following settings are available and further documented below.</p> <ul> <li>Config Removals - provides the ability to remove a line based on a regex match.</li> <li>Config Replacements - provides the ability to swap out parts of a line based on a regex match.</li> </ul>"},{"location":"user/app_feature_backup.html#backup-repositories","title":"Backup Repositories","text":"<p>In the <code>Backup Repository</code> field of the Settings, configure the repository which you intend to use for backed-up device configurations as part of Golden Config.</p> <p>Backup repositories must first be configured under Extensibility -&gt; Git Repositories. When you configure a repository, look for the <code>Provides</code> field in the UI. To serve as a configuration backup store, the repository must be configured with the <code>backup configs</code> capability under the <code>Provides</code> field. For further details, refer to Navigating Nautobot Git Settings.</p>"},{"location":"user/app_feature_backup.html#backup-path-template","title":"Backup Path Template","text":"<p>The <code>backup_path_template</code> setting gives you a way to dynamically place each device's configuration file in the repository file structure. This setting uses the GraphQL query configured for the app. It works in a similar way to the Backup Repository Matching Rule above. Since the setting uses a GraphQL query, any valid Device model method is available. The app renders the values from the query, using Jinja2, to the relative path and file name in which to store a given device's configuration inside its backup repository. This may seem complicated, but the equivalent of <code>obj</code> by example would be:</p> <pre><code>obj = Device.objects.get(name=\"nyc-rt01\")\n</code></pre> <p>An example would be: <pre><code>backup_path_template = \"{{obj.location.name|slugify}}/{{obj.name}}.cfg\"\n</code></pre></p> <p>With a Sydney, AU device <code>SYD001AURTR32</code>, in the location named <code>Sydney001</code> and the GraphQL query and <code>backup_path_template</code> configured above, our backed-up config would be placed in the repo in <code>/sydney001/SYD001AURTR32.cfg</code>.</p> <p>The backup process will automatically create folders as required based on the path definition. </p> <p>The <code>backup_path_template</code> can be set in the UI.  For navigation details see.</p>"},{"location":"user/app_feature_backup.html#device-login-credentials","title":"Device Login Credentials","text":"<p>The credentials/secrets management occurs within the nautobot-plugin-nornir library and is described in the Navigating Credentials documentation. For the simplest use case you can set environment variables for <code>NAPALM_USERNAME</code>, <code>NAPALM_PASSWORD</code>, and <code>DEVICE_SECRET</code> in conjunction with the <code>credentials</code> string shown below in your configuration for <code>nautobot-plugin-nornir</code>.</p> <pre><code>PLUGINS_CONFIG = {\n    \"nautobot_plugin_nornir\": {\n        \"nornir_settings\": {\n           \"credentials\": \"nautobot_plugin_nornir.plugins.credentials.env_vars.CredentialsEnvVars\"\n        },\n    }\n}\n</code></pre>"},{"location":"user/app_feature_backup.html#starting-a-backup-job","title":"Starting a Backup Job","text":"<p>To start a backup job manually:</p> <ol> <li>Navigate to the App Home (Golden Config-&gt;Home), with Home being in the <code>Golden Configuration</code> section</li> <li>Select Execute on the upper right buttons, then Backup</li> <li>Fill in the data that you wish to have backed up</li> <li>Select Run Job</li> </ol>"},{"location":"user/app_feature_backup.html#config-removals","title":"Config Removals","text":"<p>The line removals settings is a series of regex patterns to identify lines that should be removed. This is helpful as there are usually parts of the configurations that will change each time. A match simply means to remove.</p> <p>In order to specify line removals. Navigate to Golden Config -&gt; Config Removals.  Click the Add button and fill out the details.</p> <p>The remove setting is based on <code>Platform</code>.  An example is shown below. </p>"},{"location":"user/app_feature_backup.html#config-replacements","title":"Config Replacements","text":"<p>This is a replacement config with a regex pattern with a single capture groups to replace. This is helpful to strip out secrets.</p> <p>The replace lines setting is based on <code>Platform</code>.  An example is shown below.</p> <p></p> <p>The line replace uses Python's <code>re.sub</code> method. As shown, a common pattern is to obtain the non-confidential data in a capture group e.g. <code>()</code>, and return the rest of the string returned in the backreference, e.g. <code>\\2</code>.</p> <pre><code>re.sub(r\"(username\\s+\\S+\\spassword\\s+5\\s+)\\S+(\\s+role\\s+\\S+)\", r\"\\1&lt;redacted_config&gt;\\2\", config, flags=re.MULTILINE))\n</code></pre>"},{"location":"user/app_feature_compliance.html","title":"Configuration Compliance","text":"<p>The following should be noted by what is meant by configuration compliance. Configurations are considered to be compliant if the generated configuration (generally by merging data and Jinja2, will be referred to as the intended configuration from hence forth) matches \"exactly\" as the actual configuration is on the backup. This may confusing to some, as for example to the average network engineer, there is no difference between <code>int g0/0</code> and <code>interface GigabitEthernet0/0</code> but for the purpose of configuration compliance, it is not a match... full stop.</p> <p>It's helpful to understand what are some common reasons a device is not compliant.</p> <ul> <li>There is missing configuration on the device.</li> <li>There is extra configuration on the device.</li> <li>The data used to generate the configuration is incorrect, and created a \"false positive\".</li> <li>The template used to generate the configuration is incorrect, and created a \"false positive\".</li> <li>The parser used to obtain the configuration from the feature is incorrect, and created a \"false positive\".</li> </ul> <p>There is no magic to determine the state of configuration. You still must define what is good configuration and compare it. There are several reasons why configuration may be as a network engineer wants it, but the tool correctly considers it non-compliant, since the tool is only comparing two configurations. The tool makes no assumptions to determine what an engineer may want to do, but did not document via the configuration generation process.</p>"},{"location":"user/app_feature_compliance.html#compliance-configuration-settings","title":"Compliance Configuration Settings","text":"<p>In order to generate the intended configurations, a minimum of two repositories are required.</p> <ol> <li>At least one repository in which to save intended configurations once generated.</li> <li>At least one repository in which to store Backups of devices' running configurations.</li> <li>The intended_path_template configuration parameter.</li> <li>The backup_path_template configuration parameter.</li> </ol>"},{"location":"user/app_feature_compliance.html#starting-a-compliance-job","title":"Starting a Compliance Job","text":"<p>To start a compliance job manually:</p> <ol> <li>Navigate to <code>Golden Config-&gt;Home</code>, with Home being in the <code>Golden Configuration</code> section</li> <li>Select Execute on the upper right buttons, then Compliance</li> <li>Fill in the data that you wish to have a compliance report generated for</li> <li>Select Run Job</li> </ol>"},{"location":"user/app_feature_compliance.html#configuration-compliance-settings","title":"Configuration Compliance Settings","text":"<p>Configuration compliance requires the Git Repo settings for <code>config backups</code> and <code>intended configs</code>--which are covered in their respective sections--regardless if they are actually managed via the app or not. The same is true for the <code>Backup Path</code> and <code>Intended Path</code>.</p> <p>The Configuration compliance rule map must be created per the operator/user. You can find these configurations via <code>Golden Config -&gt; Compliance Rules</code> links, which brings up the specific configurations.</p> <p></p> <p>Each configuration can be added and edits from this table. When editing/adding the configurations, the following should be noted.</p> <p></p> <p>The platform must refer to a platform with a valid network_driver supported by the configuration compliance engine. While there is no enforcement of this data from a database perspective, the job will never run successfully, rendering the additional configuration ineffective.</p> <p>The Feature is a unique identifier, that should prefer shorter names, as this effects the width of the compliance overview and thus it's readability as a best practice.</p> <p>The \"Config to Match\" section represents the configuration root elements. This would be the parent most key only. Additionally, the match is based on \"Config Type\", which could be JSON or CLI. For CLI based configs, the match is based on what a line starts with only. Meaning, there is an implicit greediness to the matching. All matches must start form the beginning of the line. For JSON based configs, the match is based on JSON's structure top level key name.</p> <p>Note</p> <p>\"Config to Match\" is mandatory for CLI configurations. If config to match is not defined for JSON, the complete JSON configuration will be compared. If the config to match is defined, comparison will take place only for defined keys.</p> <p>Note</p> <p>If the data is accidentally \"corrupted\" with a bad tested match, simply delete the devices an re-run the compliance process.</p> <p>Note</p> <p>The mapping of \"network_os\" as defined by netutils is provided via the app settings in your nautobot_config.py, and documented on the primary Readme.</p>"},{"location":"user/app_feature_compliance.html#compliance-view","title":"Compliance View","text":"<p>The compliance overview will provide a per device and feature overview on the compliance of your network devices. From here you can navigate to the details view. </p>"},{"location":"user/app_feature_compliance.html#compliance-details-view","title":"Compliance Details View","text":"<p>Drilling into a specific device and feature, you can get an immediate detailed understanding of your device.</p> <p></p> <p></p> <p>Please note the following about the compliance details page.</p> <ul> <li>The device Intended and Actual configuration will become a single cell configuration if there is an exact match.</li> <li>The device Intended and Actual configuration will both show if the configuration is matched, but not ordered the same.</li> <li>The icon next to the status will indicate whether or not the configuration is ordered.</li> <li>The icons on top of the page can be used to help navigate the page easier.</li> </ul>"},{"location":"user/app_feature_compliance.html#supported-platforms","title":"Supported Platforms","text":"<p>Platforms support technically come from the options provided by nornir-nautobot for Nornir dispatcher tasks and netutils for configuration compliance and parsing. However, for reference, the valid network_driver's of the platforms are provided in the FAQ.</p>"},{"location":"user/app_feature_compliance.html#overview-report","title":"Overview Report","text":"<p>There is a global overview or executive summary that provides a high level snapshot of the compliance. There are 3 points of data captured.</p> <ul> <li>Devices - This is only compliant if there is not a single non-compliant feature on the device. So if there is 10 features, and 1 feature is not compliant, the device is considered non-compliant.</li> <li>Features - This is the total number of features for all devices, and how many are compliant, and how many are non-compliant.</li> <li>Per Feature - This is a breakdown of that feature and how many within that feature are compliant of not.</li> </ul>"},{"location":"user/app_feature_compliance.html#detail-report","title":"Detail Report","text":"<p>You can view the details from the <code>Compliance</code> details button within the <code>Configuration Compliance</code> table. From there you can filter the devices via the form on the right side, limit the columns with the <code>Configure</code> button, or bulk delete with the <code>Delete</code> button. Additionally each device is click-able to view the details of that individual device.</p> <p>You can configure the columns to limit how much is showing on one screen.</p>"},{"location":"user/app_feature_compliance.html#device-details","title":"Device Details","text":"<p>You can get to the device details form either the Compliance details page, or there is a <code>content_template</code> on the device model page is Nautobot's core instance.</p> <p></p>"},{"location":"user/app_feature_compliancecli.html","title":"Configuration Compliance","text":"<p>Note</p> <p>This document provides instructions for <code>CLI</code> configuration type based compliance.  The other option is <code>JSON</code> based structured data compliance.</p>"},{"location":"user/app_feature_compliancecli.html#configuration-compliance-parsing-engine","title":"Configuration Compliance Parsing Engine","text":"<p>Configuration compliance is different than a simple UNIX diff. While the UI provides both, the compliance metrics are not influenced by the UNIX diff capabilities. One of the challenges of getting a device into compliance is the ramp up it takes to model and generate configurations for an entire configuration. The compliance engine has several features to better build work through this process.</p> <ol> <li>The ability to parse into smaller sections, given a list of root configuration elements.</li> <li>The ability to consider ordered and non-ordered configurations.</li> <li>The ability to dynamically understand parent/child relationships within the configurations.</li> </ol> <p>In regards to <code>1</code>, consider the following example of how to obtain service configurations:</p> <pre><code>service\nno service\n</code></pre> <p>Specific configurations that start with either of these commands can be grouped together.</p> <p>In regards to <code>2</code>, consider the configurations of SNMP on a nexus switch.</p> <pre><code>snmp-server community secure group network-admin\nsnmp-server community networktocode group network-operator\n</code></pre> <p>The above configurations are rendered based on the order in which they were entered, not based on the a deterministic way. The comparison process takes this into consideration, to ensure that the following is not non-compliant when ordering option is not considered.</p> <pre><code>snmp-server community networktocode group network-operator\nsnmp-server community secure group network-admin\n</code></pre> <p>In regards to <code>3</code>, consider the following example of BGP configuration.</p> <pre><code>router bgp\nprefix-list\n</code></pre> <p>All configurations that are a parent and child relationships would be considered within the parsing engine. Additionally, if one configuration line was wrong, only that line and the parents would be shown, not all lines or only the missing configuration without context of the parents, e.g. Given:</p> <p>Actual</p> <pre><code>router bgp 65250\n  router-id 10.0.10.5\n  log-neighbor-changes\n  address-family ipv4 unicast\n    redistribute direct route-map PERMIT_CONN_ROUTES\n  neighbor 10.10.10.5\n    remote-as 65250\n    address-family ipv4 unicast\n</code></pre> <p>Intended</p> <pre><code>router bgp 65250\n  router-id 10.0.10.6\n  log-neighbor-changes\n  address-family ipv4 unicast\n    redistribute direct route-map PERMIT_CONN_ROUTES\n  neighbor 10.10.10.5\n    remote-as 65250\n    address-family ipv4 unicast\n</code></pre> <p>Would result in the identifying the missing configurations as:</p> <pre><code>router bgp 65250\n  router-id 10.0.10.6\n</code></pre> <p>Note</p> <p>A platform will not run successfully against a device unless at least one compliance rule is set.</p>"},{"location":"user/app_feature_compliancecustom.html","title":"Navigating Compliance With Custom Logic","text":""},{"location":"user/app_feature_compliancecustom.html#introduction","title":"Introduction","text":"<p>Custom compliance is a powerful method to alter the default behavior and results of the natively provided <code>CLI</code> and <code>JSON</code> config type based configuration compliance. The high level idea is to provide a Python code containing custom logic defined by the User. This code is called by the Golden Configuration App in the compliance process, allowing the user to change the default behavior of the Golden Configuration App.</p>"},{"location":"user/app_feature_compliancecustom.html#caveats","title":"Caveats","text":"<ul> <li>The data provided can come from either setting via the API like JSON or via match_config like CLI. It is up to the operator to enforce.</li> <li>Does not make any accommodations for adding to git.</li> <li>Mixing/Matching string (or CLI type) and JSON type compliance rules is NOT supported. A device should only have compliance rules from one or the other, and it is up to the operator to enforce.</li> <li>If the developer of the <code>get_custom_compliance</code> is not cognizant, the UI experience of the details may not always be obvious what the issues are.<ul> <li>As an example, if the developer simply returns a <code>True</code> or <code>False</code> into the missing or extra dictionary, it will not be obvious to the user.</li> </ul> </li> <li>The developer is responsible for ensuring the proper data structure is maintained for the given rule.</li> </ul>"},{"location":"user/app_feature_compliancecustom.html#justification","title":"Justification","text":"<p>While the maintainers believe that the proper way to provide configuration compliance is the opinionated solutions provided, which compares intended state vs actual state, we are conscious that this may not always be a viable solution for all organizations. As an example, complicated configurations may not be ready for intended state, but there are still several parts of the configuration you will need to ensure always exists, such as \"making sure all BGP peers have authentication configured.\"</p> <p>Providing additional opinionated solutions is both not in-line with the intention of the project nor is it feasible to provide a solution that will work for many people. For those reasons, it was decided to create an extendible interface for developers/operators to create their custom compliance logic.</p> <p>Finally, it is understood that one of the key values provided by the Golden Config app is the visualization of the compliance and quick access to the tooling. Providing the interface to <code>get_custom_compliance</code> function allows the developers/operators the ability to get their own compliance process integrated with the user experience provided by the app.</p>"},{"location":"user/app_feature_compliancecustom.html#the-interface","title":"The Interface","text":"<p>The interface of contract provided to your custom function is based on the following:</p>"},{"location":"user/app_feature_compliancecustom.html#inputs","title":"Inputs","text":"<ul> <li>The function is called with a single parameter called <code>obj</code>, so your function must be set to accept <code>obj</code> as a kwarg.</li> <li>The <code>obj</code> parameter, is the <code>self</code> instance object of a <code>ConfigCompliance</code> model, review the documentation for the all attributes of a <code>ConfigCompliance</code> instance, but the common ones are documented below.<ul> <li><code>obj.actual</code> - The actual configuration parsed out by the <code>match_config</code> logic, or what was sent via the API.</li> <li><code>obj.intended</code> - The intended configuration parsed out by the <code>match_config</code> logic, or what was sent via the API.</li> <li><code>obj.device.platform.network_driver</code> -  The platform network_driver name.</li> <li><code>obj.rule.config_ordered</code> - describes whether or not the rule was configured to be ordered, such as an ACL, or not such as SNMP servers</li> <li><code>obj.rule</code> - The name of the rule.</li> <li><code>obj.rule.match_config</code> - The match_config text the rule was configured with.</li> </ul> </li> </ul>"},{"location":"user/app_feature_compliancecustom.html#outputs","title":"Outputs","text":"<ul> <li>The function should return a single dictionary, with the keys of <code>compliance</code>, <code>compliance_int</code>, <code>ordered</code>, <code>missing</code>, and <code>extra</code>.</li> <li>The <code>compliance</code> key should be a boolean with either True or False as acceptable responses, which determines if the config is compliant or not.</li> <li>The <code>compliance_int</code> key should be an integer with either 1 (when compliance is True) or 0 (when compliance is False) as acceptable responses. This is required to handle a counting use case where boolean does not suffice.</li> <li>The <code>ordered</code> key should be a boolean with either True or False as acceptable responses, which determines if the config is compliant and ordered or not.</li> <li>The <code>missing</code> key should be a string or json, empty when nothing is missing and appropriate string or json data when configuration is missing.</li> <li>The <code>extra</code> key should be a string or json, empty when nothing is extra and appropriate string or json data when there is extra configuration.</li> </ul> <p>There is validation to ensure the data structure returned is compliant to the above assertions.</p> <p>The function provided in string path format, must be installed in the same environment as nautobot and the workers.</p>"},{"location":"user/app_feature_compliancecustom.html#configuration","title":"Configuration","text":"<p>To enable the custom compliance, navigate to the respective <code>Compliance Rule</code> and enable option \"Custom Compliance\" on this rule.</p> <p>The path to the function is set in the <code>get_custom_compliance</code> configuration parameter. This is the string representation of the function and must be in Python importable into Nautobot and the workers. This is a callable function and not a class or other object type.</p> <pre><code>PLUGINS_CONFIG = {\n    \"nautobot_golden_config\": {\n        \"get_custom_compliance\": \"my.custom_compliance.custom_compliance_func\"\n    }\n}\n</code></pre>"},{"location":"user/app_feature_compliancecustom.html#example","title":"Example","text":"<p>To provide boiler plate code for any future use case, the following is provided</p> <pre><code>def custom_compliance_func(obj):\n    # Modify with actual logic, this would always presume compliant.\n    compliance_int = 1\n    compliance = True\n    ordered = True\n    missing = \"\"\n    extra = \"\"\n    return {\n        \"compliance\": compliance,\n        \"compliance_int\": compliance_int,\n        \"ordered\": ordered,\n        \"missing\": missing,\n        \"extra\": extra,\n    }\n</code></pre> <p>Below is an actual example, it takes a very direct approach for matching platform and rule type to a check. This can naturally be modified to apply the abstract logic one may wish to provide.</p> <pre><code># expected_actual_config = '''router bgp 400\n#  no synchronization\n#  bgp log-neighbor-changes\n#  neighbor 70.70.70.70 remote-as 400\n#  neighbor 70.70.70.70 password cisco\n#  neighbor 70.70.70.70 update-source Loopback80\n#  no auto-summary\n# '''\nimport re\nBGP_PATTERN = re.compile(\"\\s*neighbor (?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) .*\")\nBGP_SECRET = re.compile(\"\\s*neighbor (?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) password (\\S+).*\")\ndef custom_compliance_func(obj):\n    if obj.rule == 'bgp' and obj.device.platform.network_driver == 'cisco_ios':\n        actual_config = obj.actual\n        neighbors = []\n        secrets = []\n        for line in actual_config.splitlines():\n            match = BGP_PATTERN.search(line)\n            if match:\n                neighbors.append(match.groups(\"ip\")[0])\n            secret_match = BGP_SECRET.search(line)\n            if secret_match:\n                secrets.append(match.groups(\"ip\")[0])\n    neighbors = list(set(neighbors))\n    secrets = list(set(secrets))\n    if secrets != neighbors:\n        compliance_int = 0\n        compliance = False\n        ordered = False\n        missing = f\"neighbors Found: {str(neighbors)}\\nneigbors with secrets found: {str(secrets)}\"\n        extra = \"\"\n    else:\n        compliance_int = 1\n        compliance = True\n        ordered = True\n        missing = \"\"\n        extra = \"\"\n    return {\n        \"compliance\": compliance,\n        \"compliance_int\": compliance_int,\n        \"ordered\": ordered,\n        \"missing\": missing,\n        \"extra\": extra,\n    }\n</code></pre> <p>In the above example, one may observe that there is no reference to <code>obj.intended</code>, that is because this logic is not concerned about such information.</p> <p>As the developer of such solutions, you may not require intended configuration or other attributes, but be conscious on the user experience implications. It may seem odd to some users to have blank intended configuration but compliance set to true as an example or it may seem odd to have instructions for fixes rather than configurations.</p>"},{"location":"user/app_feature_compliancejson.html","title":"Navigating Compliance Using Structured Data","text":"<p>JSON based compliance provides a mechanism to understand device configurations stored in JSON format and compare between them.</p>"},{"location":"user/app_feature_compliancejson.html#caveats","title":"Caveats","text":"<ul> <li>The <code>Compliance Rule</code> need to be defined as JSON <code>config-type</code>.</li> <li>When creating <code>Compliance Rules</code> with the config type of JSON, the <code>config to match</code> field is used to specify individual top-level JSON keys, or it can be left blank to compare all keys.</li> <li>Uses Git repositories for backup and intended configurations.</li> </ul>"},{"location":"user/app_feature_compliancejson.html#quick-start-guide","title":"Quick Start Guide","text":"<ol> <li> <p>First, the compliance feature needs to be created, the feature name needs to be unique for a Platform and can not be shared between CLI and JSON types.</p> <p></p> </li> <li> <p>Link the feature that was just created to a rule definition.</p> <p></p> </li> <li> <p>Now that the definitions are created and the rule is created and mapped to a Platform, execute compliance job under Jobs.</p> </li> <li> <p>Verify the compliance results</p> </li> </ol> <p>In the navigation menu: <code>Golden Config -&gt; Configuration Compliance</code>.</p> <p></p> <p>With the detailed view:</p> <p></p> <p>Example of a Non-Compliant rule:</p> <p></p> <p></p> <p>Seeing the diff button alone will only show up for devices using JSON compliance rules.</p> <p></p> <p>The detailed diff view will show a side by side diff, this looks the same as the CLI view.</p> <p></p>"},{"location":"user/app_feature_compliancexml.html","title":"Navigating Compliance Using XML","text":"<p>XML based compliance provides a mechanism to compliance check device configurations stored in XML format.</p>"},{"location":"user/app_feature_compliancexml.html#defining-compliance-rules","title":"Defining Compliance Rules","text":"<p>Compliance rules are defined as XML <code>config-type</code>.</p> <p>The <code>config to match</code> field is used to specify an XPath query. This query is used to select specific nodes in the XML configurations for comparison. If the <code>config to match</code> field is left blank, all nodes in the configurations will be compared.</p>"},{"location":"user/app_feature_compliancexml.html#xpath-in-config-to-match","title":"XPath in Config to Match","text":"<p>XPath (XML Path Language) is a query language for selecting nodes from an XML document. In our application, XPath is used in the <code>config to match</code> field to specify which parts of the device configurations should be compared.</p>"},{"location":"user/app_feature_compliancexml.html#basic-xpath-syntax","title":"Basic XPath Syntax","text":"<p>Here is a quick reference for basic XPath syntax:</p> Expression Description <code>nodename</code> Selects all nodes with the name \"nodename\" <code>/</code> Selects from the root node <code>//</code> Selects nodes in the document from the current node that match the selection no matter where they are <p>For more detailed information on XPath syntax, you can refer to the Supported XPath syntax.</p> <p>This NTC blog also covers XPath in more details.</p> <p>Here are some examples of XPath queries that can be used in the <code>config to match</code> field:</p> <p></p>"},{"location":"user/app_feature_compliancexml.html#device-config-compliance-view","title":"Device Config Compliance View","text":""},{"location":"user/app_feature_compliancexml.html#interpreting-diff-output","title":"Interpreting Diff Output","text":"<p>The diff output shows the differences between the device configurations. Each line in the diff output represents a node in the XML configurations. The node is identified by its XPath, and the value of the node is shown after the comma.</p> <p>Here's a sample 'missing' output:</p> <pre><code>/config/system/aaa/user[1]/password[1], foo\n/config/system/aaa/user[1]/role[1], admin\n/config/system/aaa/radius/server[1]/host[1], 1.1.1.1\n/config/system/aaa/radius/server[1]/secret[1], foopass\n/config/system/aaa/radius/server[2]/host[1], 2.2.2.2\n/config/system/aaa/radius/server[2]/secret[1], bazpass\n</code></pre> <p>This diff output represents the 'missing' portion when comparing the actual configuration to the intended configuration. Each line represents a node in the XML configuration that is presented in the intended configuration but is missing in the actual configuration.</p> <p>For example, the line <code>/config/system/aaa/user[1]/password[1], foo</code> indicates that the password node of the first user node under <code>/config/system/aaa</code> is expected to have a value of <code>foo</code> in the actual configuration. If this line appears in the diff output, it means this value is missing in the actual configuration.</p>"},{"location":"user/app_feature_config_plans.html","title":"Navigating Config Plans","text":"<p>The natural progression for the Golden Config application is providing the ability to execute config deployments. One specific example is to work toward making one or more devices configuration compliant. To aid in this effort, the Golden Config application has the ability to generate plans containing sets of configuration commands from various sources with the intent of deploying them to devices.</p> <p>The current sources of these plans (i.e. plan types) are as follows:</p> <ul> <li>The Intended configuration(s) of Compliance Feature(s)</li> <li>The Missing configuration(s) of Compliance Feature(s)</li> <li>The Remediation configuration(s) of Compliance Feature(s) (*)</li> <li>A Manual set of configuration commands</li> </ul> <p>Note</p> <p>The Intended, Missing and Remediation configuration come from the Configuration Compliance object that is created when you run the Perform Configuration Compliance Job.</p> <p>Much like a Configuration Compliance object, each Config Plan is tied directly to a single Device.</p>"},{"location":"user/app_feature_config_plans.html#viewing-a-config-plan","title":"Viewing a Config Plan","text":"<p>You can view a plan by navigating to Golden Config -&gt; Config Plans and choosing a generated plan from the list. A Config Plan comprises of the following fields:</p> <ul> <li>Device: The device the plan is to be deployed to.</li> <li>Date Created: The date the plan was generated.</li> <li>Plan Type: The type of plan used to generate it.</li> <li>Config Set: The set of commands to be deployed.</li> <li>Features (If Applicable): The Compliance Feature(s) the config set was generated from.</li> <li>Change Control ID (Optional): A text field that be used for grouping and filtering plans.</li> <li>Change Control URL (Optional): A URL field that can be used to link to an external system tracking change controls.</li> <li>Job Result: The Job that generated the plan(s).</li> <li>Status: The status of the plan.</li> </ul> <p></p>"},{"location":"user/app_feature_config_plans.html#generating-config-plans","title":"Generating Config Plans","text":"<p>In order to generate a plan, navigate to Golden Config -&gt; Config Plans and hit the Add button. After choosing the type of plan you want to generate, you can then filter the list of devices you want to generate a Config Plan for by selecting either the list of devices themselves or a by choosing one or more related items such as Location or Status. If you select a plan type that is derived from a Configuration Compliance object, you will have the ability to only generate plans for one or more features, but selecting no features will generate plans for all applicable features.</p> <p>In addition, you have the ability to specify a Change Control ID &amp; URL that can be associated with all of the plans that will be generated. This can come in handy when it comes to filtering the list of plans to ultimately deploy.</p> <p>Once you have selected the appropriate options, you can click the Generate button which will start a Job to generate the plans.</p>"},{"location":"user/app_feature_config_plans.html#screenshots","title":"Screenshots","text":""},{"location":"user/app_feature_config_plans.html#generating-config-plans-via-api","title":"Generating Config Plans via API","text":"<p>The HTTP(S) POST method is not currently enabled for the Config Plan serializer to create plans directly via API. Instead you may run the Generate Config Plans Job directly via the <code>/api/extras/jobs/Generate Config Plans/run/</code> API endpoint.</p>"},{"location":"user/app_feature_config_plans.html#editing-a-config-plan","title":"Editing a Config Plan","text":"<p>After a Config Plan is generated you have the ability to edit (or bulk edit) the following fields:</p> <ul> <li>Change Control ID</li> <li>Change Control URL</li> <li>Status</li> <li>Notes</li> <li>Tags</li> </ul> <p>Note</p> <p>You will not be able to modify the Config Set after generation. If it does not contain the desired commands, you will need to delete the plan and recreate it after ensuring the source of the generated commands has been updated.</p> <p></p> <p>If the Config Plan has post processing functions, you can render the post processed config to validate and approve a Config Plan.</p> <p> </p> <p>Post Processing occurs in a modal popup, and allows a user to view the configuration before approving the Config Plan.</p> <p> </p>"},{"location":"user/app_feature_config_postprocessing.html","title":"Navigating Configuration Post-processing","text":"<p>Note</p> <p>The current implementation only renders the configuration for pushing and does not update the configuration on the target devices.</p> <p>The intended configuration job doesn't produce a final configuration artifact (see below for reasons). The intended configuration represents the \"intended\" running configuration, as it generates what is expected to be in the final running configuration. While this approach works well for the \"compliance\" feature, it is less effective for creating a configuration artifact that is ready to be pushed to devices.</p> <p>Challenges when using the running configuration as the intended configuration:</p> <ul> <li>Since the intended configuration is stored in both the database and an external Git repository, it should not contain any secrets.</li> <li>The format of the running configuration may differ from the configuration that needs to be pushed. Examples include:<ul> <li>SNMPv3 configurations, which do not appear in the running configuration</li> <li>VTP configurations that are entirely absent from the running configuration</li> <li>Implicit configurations, such as \"no shutdown\" commands on interfaces</li> </ul> </li> <li>Configurations necessary to achieve the intended state may need to be ordered carefully to prevent outages.</li> </ul> <p>As the Golden Config application evolves into a comprehensive configuration management solution, it requires an advanced feature to generate a configuration artifact that is in the final format expected by your device, based on the intended configuration.</p> <p>This is achieved through the <code>get_config_postprocessing()</code> function defined in <code>nautobot_golden_config.utilities.config_postprocessing</code>. This method processes the configurations generated by the Golden Config intended configuration feature, along with the HTTP request. It returns the intended configuration that is ready to be pushed.</p> <p>From a user perspective, you can retrieve this configuration using two methods:</p> <ul> <li>UI: In the <code>Device</code> detail view, if the feature is enabled, a new row appears under \"Configuration Types.\" Clicking the icon renders the new configuration on the fly (synchronously). See the figure below for reference.</li> <li>REST API: You can request the processed intended configuration at the path <code>/api/plugins/golden-config/config-postprocessing/{device_id}</code>. The return payload will contain a \"config\" key with the rendered configuration.</li> </ul> <p></p>"},{"location":"user/app_feature_config_postprocessing.html#customizing-configuration-processing","title":"Customizing Configuration Processing","text":"<p>There are two ways to customize the default behavior of the <code>get_config_postprocessing</code> method:</p> <ul> <li><code>postprocessing_callables</code>: A list of available methods for processing the intended configuration. It includes some default methods, such as <code>render_secrets</code>, but can be extended via configuration options (see the next section). These methods are defined using a dotted string format that Django imports. For example, <code>render_secrets</code> is defined as <code>\"nautobot_golden_config.utilities.config_postprocessing.render_secrets\"</code>.</li> <li><code>postprocessing_subscribed</code>: A list of method names (strings) that define the order in which methods are executed. The methods must exist in the <code>postprocessing_callables</code> list. This list can be customized through configuration options and could eventually accept HTTP query parameters for further customization.</li> </ul>"},{"location":"user/app_feature_config_postprocessing.html#default-processors","title":"Default Processors","text":""},{"location":"user/app_feature_config_postprocessing.html#render-secrets","title":"Render Secrets","text":"<p>The <code>render_secrets</code> function performs an additional Jinja rendering on the intended configuration, providing custom Jinja filters:</p> <ul> <li><code>get_secret_by_secret_group_name</code>: As the name implies, this filter returns the value of a secret group for a given secret type based on its <code>name</code>.</li> </ul> <p>Note</p> <p>Standard Django or Netutils filters are not available in this Jinja environment. Only <code>encrypt_&lt;vendor&gt;_type5</code> and <code>encrypt_&lt;vendor&gt;_type7</code> filters can be used in conjunction with the <code>get_secret</code> filters.</p> <p>Since this rendering occurs after the initial generation of the intended configuration, the <code>{% raw %}</code> Jinja syntax must be used to prevent premature processing.</p> <ol> <li>For example, an original template might look like this: <code>{% raw %}ppp pap sent-username {{ secrets_group[\"name\"] | get_secret_by_secret_group_name(\"username\") }}{% endraw %}</code></li> <li>It produces an intended configuration like this: <code>ppp pap sent-username {{ secrets_group[\"name\"] | get_secret_by_secret_group_name(\"username\") }}</code></li> <li>After applying <code>render_secrets</code>, it becomes: <code>ppp pap sent-username my_username</code>.</li> </ol> <p>Note that the <code>get_secret</code> filters accept arguments. In the example, the <code>secret_group</code> name is passed along with the type of secret. You can customize the signature for additional options.</p> <p>Note</p> <p>To render secrets, the user requesting the configuration via UI or API must have read permissions for Secrets Groups, Golden Config, and the specific Device object.</p>"},{"location":"user/app_feature_config_postprocessing.html#render-secrets-example","title":"Render Secrets Example","text":"<p>Here is an example of rendering secrets for a <code>Device</code>, using the default <code>Secrets Group</code> ForeignKey (FK) and custom relationships, in this case at the <code>Location</code> level.</p>"},{"location":"user/app_feature_config_postprocessing.html#graphql-query","title":"GraphQL Query","text":"<pre><code>query ($device_id: ID!) {\n  device(id: $device_id) {\n    secrets_group {\n      name\n    }\n    location {\n      rel_my_secret_relationship_for_location {\n        name\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"user/app_feature_config_postprocessing.html#jinja-template","title":"Jinja Template","text":"<p>Using the default <code>secrets_group</code> FK in <code>Device</code>:</p> <pre><code>{% raw %}{{ secrets_group[\"name\"] | get_secret_by_secret_group_name(\"password\") | default('no password') }}{% endraw %}\n</code></pre> <p>Using the custom relationship at the <code>Location</code> level:</p> <pre><code>{% raw %}{{ location[\"rel_my_secret_relationship_for_location\"][0][\"name\"] | get_secret_by_secret_group_name(\"password\") | default('no password') }}{% endraw %}\n</code></pre> <p>This will render the secret of type \"password\" for the corresponding <code>SecretGroup</code>.</p>"},{"location":"user/app_feature_config_postprocessing.html#managing-errors","title":"Managing Errors","text":"<p>The rendering process may encounter issues, which are managed and properly explained to guide corrective actions:</p> <pre><code>Found an error rendering the configuration to push: Jinja encountered and UndefinedError: 'None' has no attribute 'name', check the template for missing variable definitions.\n</code></pre>"},{"location":"user/app_feature_intended.html","title":"Intended Configuration","text":""},{"location":"user/app_feature_intended.html#configuration-generation","title":"Configuration Generation","text":"<p>The Golden Config app Intended Configuration job generates intended state files for each device in the app setting's configured Dynamic Group. An intended state files contain the output from rendering the device's Source of Truth Aggregation values through the Jinja2 templates used by the app.</p> <p>The job itself is a Nornir play which uses a single Jinja2 template per device. Source of Truth Aggregation data comes from the GraphQL query configured in the Golden Config app's settings. An important component of the SoT Aggregation data are the <code>config_context</code> values. <code>config_context</code> should contain a vendor-neutral, JSON structured representation of a device's configuration values: a list of NTP/AAA/Syslog servers, common VRFs, etc. See Config Contexts for more information.</p> <p>The Source of Truth Aggregation feature of the app must be enabled for the app to generate intended configuration state output.</p> <p>There can only be a single Jinja2 template per device. Device configurations can become daunting to create via a template, if you try to place all of the logic for a device's configuration inside a single Jinja2 file. These template files can quickly become too complex to maintain. So, it is often advantageous to break configurations into smaller feature-oriented snippets, each contained in their own discrete template file. Operators often keep their main, top-level, template simple and easy to maintain by only placing include statements in it:</p> <pre><code>!\n{% include os ~ '/services.j2' %}\n!\n{% include os ~ '/hostname.j2' %}\n!\n{% include os ~ '/ntp.j2' %}\n!\n</code></pre> <p>or</p> <pre><code>!\n{% set features = ['services', 'hostname', 'ntp'] %}\n{% for feature in features %}\n{% include os ~ '/' ~ feature ~ '.j2' %}\n!\n{% endfor %}\n</code></pre> <p>In these examples, <code>/services.j2</code>, <code>/ntp.j2</code>, etc. could contain the actual Jinja code which renders the configuration for their corresponding features. Alternately, in more complex environments, these files could themselves contain only include statements in order to create a hierarchy of template files so as to keep each individual file neat and simple. Think of the main, top-level, template as an entrypoint into a hierarchy of templates. A well thought out structure to your templates is necessary to avoid the temptation to place all logic into a small number of templates. Like any code, Jinja2 functions become harder to manage, more buggy, and more fragile as you add complexity, so any thing which you can do to keep them simple will help your automation efforts.</p>"},{"location":"user/app_feature_intended.html#developing-intended-configuration-templates","title":"Developing Intended Configuration Templates","text":"<p>To generate a device's intended configuration without running a full \"intended configuration\" job, Golden Config provides a simple web UI at <code>/plugins/golden-config/generate-intended-config/</code> and a REST API at <code>/api/plugins/golden-config/generate-intended-config/</code>. </p> <p>Note that this tool is only intended to render Jinja2 templates and does not apply any configuration post-processing.</p> <p>Using this tool to render a configuration will automatically retrieve the latest commit from the Jinja2 templates Git repository before rendering the template.</p>"},{"location":"user/app_feature_intended.html#web-ui","title":"Web UI","text":"<p>The web UI provides a user-friendly form to interact with the rendering process. You can access the web UI by clicking on \"Generate Intended Config\" in the \"Tools\" section of the Golden Config navigation menu.</p> <p>For more advanced use cases, the form accepts an optional \"GraphQL Query\" to specify a custom GraphQL query to use when rendering the configuration. If a \"GraphQL Query\" is not provided, the default query configured in the Device's Golden Config settings will be used.</p> <p>Starting in Nautobot v2.4.2, this UI also allows you to supply a \"Git Repository Branch\" to specify the branch of the Jinja2 templates Git repository to use when rendering the configuration. If the branch is not provided, the configured branch of the Golden Config Setting's Jinja template Git repository will be used.</p> <p> </p>"},{"location":"user/app_feature_intended.html#rest-api","title":"REST API","text":"<p>The REST API accepts query parameters for <code>device_id</code>, an optional <code>graphql_query_id</code> and an optional <code>branch</code> if running Nautobot v2.4.2 or later.</p> <p>Here's an example of how to request the rendered configuration for a device using the REST API:</p> <pre><code>curl -s -X GET \\\n    -H \"Accept: application/json\" \\\n    http://nautobot/api/plugins/golden-config/generate-intended-config/?device_id=231b8765-054d-4abe-bdbf-cd60e049cd8d\n</code></pre> <p>The returned response will contain the rendered configuration for the specified device, the GraphQL data that was used, and if applicable, a diff of the most recent intended config that was generated by the Intended Configuration job.</p>"},{"location":"user/app_feature_intended.html#adding-jinja2-filters-to-the-environment","title":"Adding Jinja2 Filters to the Environment.","text":"<p>This app follows Nautobot in relying on django_jinja for customizing the Jinja2 Environment. Currently, only filters in the <code>django_jinja</code> Environment are passed along to the Jinja2 Template Environment used by Nornir to render the config template.</p>"},{"location":"user/app_feature_intended.html#adding-filters-in-nautobot-config","title":"Adding Filters In Nautobot Config","text":"<p>Nautobot documents using the <code>@django_jinja.library.filter</code> decorator to register functions as filters with <code>django_jinja</code>. However, users of apps are not able to define apps in the specified jinja2 filter file that is loaded into the Jinja2 Environment.</p> <p>There are several alternative ways to have functions registered as filters in the <code>django_jinja</code> environment; below demonstrates defining decorated functions in a separate file, and then importing them in the <code>nautobot_config.py</code> file. This method requires that the file is in a path that is available to Nautobot's python environment.</p> <p>Note</p> <p><code>django_jinja</code> documents adding filters in the <code>TEMPLATES</code> config section; since Nautobot sets the <code>TEMPLATES</code> config section and does not document this in optional settings, it is recommended to only use the <code>@django_jinja.library.filter</code> decorator.</p>"},{"location":"user/app_feature_intended.html#custom_jinja_filtersconfig_templatespy","title":"custom_jinja_filters/config_templates.py","text":"<pre><code>import ipaddress\n\nfrom django_jinja import library\n\n\n@library.filter\ndef get_hostmask(address):\n    ip_address = ipaddress.ip_network(address)\n    return str(ip_address.hostmask)\n\n\n@library.filter\ndef get_netmask(address):\n    ip_address = ipaddress.ip_network(address)\n    return str(ip_address.netmask)\n</code></pre>"},{"location":"user/app_feature_intended.html#nautobot_configpy","title":"nautobot_config.py","text":"<pre><code>...\n# custom_jinja_filters must be in nautobot's python path\nfrom custom_jinja_filters import config_templates\n...\n</code></pre>"},{"location":"user/app_feature_intended.html#starting-a-intended-configuration-job","title":"Starting a Intended Configuration Job","text":"<p>To start a intended configuration job manually:</p> <ol> <li>Navigate to <code>Golden Config -&gt; Home</code>, with Home being in the <code>Golden Configuration</code> section</li> <li>Select Execute on the upper right buttons, then Intended</li> <li>Fill in the data that you wish to have configurations generated for up</li> <li>Select Run Job</li> </ol>"},{"location":"user/app_feature_intended.html#intended-configuration-settings","title":"Intended Configuration Settings","text":"<p>In order to generate the intended configurations at least two repositories are needed.</p> <ol> <li>At least one repository in which to save intended configurations once generated.</li> <li>At least one repository in which to store device backups; the device's current operating configuration.</li> <li>The intended_path_template configuration parameter.</li> <li>The jinja_path_template configuration parameter.</li> </ol>"},{"location":"user/app_feature_intended.html#data","title":"Data","text":"<p>The data provided while rendering the configuration of a device is described in the SoT Aggregation overview.</p>"},{"location":"user/app_feature_remediation.html","title":"Navigating Configuration Remediation","text":"<p>Automated network configuration remediation is a systematic approach that leverages technology and processes to address and rectify configuration issues in network devices.  It involves the use of the Golden Configuration app to understand the current configuration state, compare it against the intended configuration state, and automatically generate remediation data. Automated network configuration remediation improves efficiency by eliminating manual efforts and reducing the risk of human errors. It enables rapid response to security vulnerabilities, minimizes downtime, and enhances compliance with regulatory and industry standards.</p> <p>The current sources of data to generate remediating configuration are as follows:</p> <ul> <li>The Intended configuration of a specific Compliance Feature</li> <li>The Missing configuration of a specific Compliance Feature</li> <li>The Extra configuration of a specific Compliance Feature</li> </ul> <p>Based on this information, Golden Configuration will create a remediating configuration (if enabled for that particular platform and compliance feature). This configuration snippet will be represented as a \"Remediating Configuration\" field in the compliance detailed view:</p> <ul> <li>The Remediation configuration of a specific Compliance Feature</li> </ul> <p>Note</p> <p>The Intended, Missing and Extra configuration come from the Configuration Compliance object that is created when you run the Perform Configuration Compliance Job.</p>"},{"location":"user/app_feature_remediation.html#setting-up-configuration-remediation","title":"Setting up Configuration Remediation","text":"<p>The type of remediation to be performed in a particular platform is defined by navigating to Golden Config -&gt; Remediation Settings. Network device operating systems (Nautobot Platforms) can consume two different types of remediation, namely:</p> <ul> <li>HIERCONFIG remediation (CLI - hierarchical)</li> <li>Custom Remediation</li> </ul> <p></p>"},{"location":"user/app_feature_remediation.html#hier-config-remediation-type","title":"Hier Config Remediation Type","text":"<p>Hier Config is a python library that is able to take a running configuration of a network device, compare it to its intended configuration, and build the remediation steps necessary to bring a device into spec with its intended configuration. Hier Config has been used extensively on:</p> <ul> <li>Cisco IOS</li> <li>Cisco IOSXR</li> <li>Cisco NXOS</li> <li>Arista EOS</li> <li>Ruckus FastIron</li> </ul> <p>However, any Network Operating System (NOS) that utilizes a CLI syntax that is structured in a similar fashion to Cisco IOS should work mostly out of the box. Default Hier config options can be used or customized on a per platform basis, as shown below:</p> <p></p> <p>For additional information on how to customize Hier Config options, please refer to the Hierarchical Configuration development guide: https://hier-config.readthedocs.io/en/latest/</p>"},{"location":"user/app_feature_remediation.html#custom-config-remediation-type","title":"Custom Config Remediation Type","text":"<p>When a Network Operating System delivers configuration data in a format that is not CLI/Hierarchical, we can still perform remediation by using the Custom Remediation options. Custom Remediation is defined within a Python function that takes as input a Configuration Compliance object and returns a Remediation Field. Custom remediation performs a call to the remediation function every time a Compliance Job runs. Custom Remediation allows the user to control the configuration comparison process (between intended and actual configuration) and use additional Nautobot or external data to produce the remediation plan. Custom remediation functions need to be defined in PLUGIN_CONFIG for <code>nautobot_plugin_golden_config</code> the nautobot_config.py file, as show below:</p> <p></p>"},{"location":"user/app_feature_remediation.html#enabling-configuration-remediation","title":"Enabling Configuration Remediation","text":"<p>Once remediation settings are configured for a particular platform, remediation can be enabled on a per compliance rule basis. In order to enable configuration remediation for a particular rule, navigate to Golden Config -&gt; Compliance Rules, and choose a rule for a platform that has remediation settings set up. Edit the compliance rule and check the box \"Enable Remediation\". This action effectively enables remediation for that particular Platform/Feature pair.</p> <p></p>"},{"location":"user/app_feature_remediation.html#validating-configuration-remediation","title":"Validating Configuration Remediation","text":"<p>Once remediation is configured for a particular Platform/Feature pair, it is possible to validate remediation operations by running a compliance job. Navigate to Jobs -&gt; Perform Configuration Compliance and run a compliance job for a device that has remediation enabled. Verify that remediation data has been generated by navigating to Golden Config -&gt; Config Compliance, select the device and check the compliance status for the feature with remediation enabled and the \"Remediating Configuration\" field, as shown below:</p> <p></p>"},{"location":"user/app_feature_sotagg.html","title":"SoT Aggregation Overview","text":"<p>The Source of Truth Aggregation feature uses several key components:</p> <ul> <li>A GraphQL query, per settings instance, which aggregates device data.</li> <li>A facility to modify data with a \"transposer\" function.</li> <li>Nautobot's config context feature and policy engine.</li> <li>Nautobot's native git platform.</li> </ul>"},{"location":"user/app_feature_sotagg.html#graphql","title":"GraphQL","text":"<p>There is currently support to make an arbitrary GraphQL query that has <code>device_id</code> as a variable. It is likely best to use the GraphiQL interface to model your data, and then save that query as the Saved Query object. The application configuration ensures the following component.</p> <p>The query starts with exactly <code>query ($device_id: ID!)</code>. This is to help fail fast and help with overall user experience of clear expectations.</p> <p>Note</p> <p>The above validation will not happen if the query in the Saved Query object is modified after it's been assigned to the Settings object. That is, validation of the SoTAgg field only happens when the Settings object is created or updated.</p> <p>Note that the GraphQL query returned is modified to remove the root key of <code>device</code>, so instead of all data being within device, such as <code>{\"device\": {\"location\": {\"name\": \"Jersey City\"}}}</code>, it is simply <code>{\"location\": {\"name\": \"Jersey City\"}}</code> as an example.</p> <p>It is helpful to make adjustments to the query, and then view the data from the App's home page and clicking on a given device's <code>code-json</code> icon.</p>"},{"location":"user/app_feature_sotagg.html#transposer-function","title":"Transposer Function","text":"<p>The transposer function is an optional function to make arbitrary changes to the data after the fact. There is a app configuration that allows the operator to point to a function within the python path by a string. The function will receive a single variable, that by convention should be called <code>data</code>. The function should return a valid Python json serializable data structure.</p> <pre><code>def transposer(data):\n    \"\"\"Some.\"\"\"\n    if data[\"platform\"][\"network_driver\"] == \"cisco_ios\":\n        data[\"platform\"].update({\"support-number\": \"1-800-ciscohelp\"})\n    if data[\"platform\"][\"network_driver\"] == \"arista_eos\":\n        data[\"platform\"].update({\"support-number\": \"1-800-aristahelp\"})\n    return data\n</code></pre> <p>While the example transposer is silly and untested, it provides the structure for which a transposer can be used. The possibilities are obviously endless, such as reaching out to an external system, but operators should use caution not to overload complexity into the transposer.</p> <p>The configuration required in the app configuration is as described below.</p> <pre><code>PLUGINS_CONFIG[\"nautobot_golden_config\"][\"sot_agg_transposer\"] = \"nautobot_golden_config.transposer.transposer\"\n</code></pre> <p>The path described must be within the Python path of your worker. It is up to the operator to ensure that happens.</p>"},{"location":"user/app_feature_sotagg.html#config-contexts","title":"Config Contexts","text":"<p>While outside the scope of this document, it is worth mentioning the power that the <code>config_context</code> feature, along with integration to Git, can provide in this solution. Config contexts can be used for arbitrary JSON serializable data structures. That is helpful to model configuration that would not normally be available within Nautobot Core Django ORM models or within a Nautobot plugin's custom models. A common use case is to model \"global configuration\" like data, such as NTP, DNS, SNMP, etc.</p> <p>For more information, please refer to the Nautobot Core documentation on Config Contexts and leveraging Git Data Sources.</p>"},{"location":"user/app_feature_sotagg.html#performance","title":"Performance","text":"<p>The GraphQL and transposer functions have potential to seriously impact the performance of the Nautobot application. Operator should weigh the pros and cons of the solution before committing to the use of these functions.</p>"},{"location":"user/app_feature_sotagg.html#sample-query","title":"Sample Query","text":"<p>To test your query in the GraphiQL UI, obtain a device's uuid, which can be seen in the url of the detailed device view. Once you have a valid device uuid, you can use the \"Query Variables\" portion of the UI, which is on the bottom left-hand side of the screen.</p> <p>Example: Query Variables</p> <pre><code>{\n  \"device_id\": \"c2dfa612-3c6b-4a67-8492-a7ca346641f9\"\n}\n</code></pre> <p>GraphQL may be new to many users, and while the GraphiQL interface is great way to get started, the following query is for reference. It is highly recommended to alias name (as in <code>hostname: name</code> shown below), as there will be a namespace issue with Nornir tasks, which often take in name as a parameter.</p> <pre><code>query ($device_id: ID!) {\n  device(id: $device_id) {\n    config_context\n    hostname: name\n    position\n    serial\n    primary_ip4 {\n      id\n      primary_ip4_for {\n        id\n        name\n      }\n    }\n    tenant {\n      name\n    }\n    tags {\n      name\n    }\n    role {\n      name\n    }\n    platform {\n      name\n      manufacturer {\n        name\n      }\n      network_driver\n      napalm_driver\n    }\n    location {\n      name\n      parent {\n        name\n      }\n    }\n    interfaces {\n      description\n      mac_address\n      enabled\n      name\n      ip_addresses {\n        address\n        tags {\n          id\n        }\n      }\n      connected_circuit_termination {\n        circuit {\n          cid\n          commit_rate\n          provider {\n            name\n          }\n        }\n      }\n      tagged_vlans {\n        id\n      }\n      untagged_vlan {\n        id\n      }\n      cable {\n        termination_a_type\n        status {\n          name\n        }\n        color\n      }\n      tags {\n        id\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"user/app_getting_started.html","title":"Getting Started with the App","text":"<p>This document provides a step-by-step tutorial on how to get the App going and how to use it.</p>"},{"location":"user/app_getting_started.html#install-the-app","title":"Install the App","text":"<p>To install the App, please follow the instructions detailed in the Installation Guide.</p>"},{"location":"user/app_getting_started.html#first-steps-with-the-app","title":"First steps with the App","text":""},{"location":"user/app_getting_started.html#backup-configuration","title":"Backup Configuration","text":"<p>Follow the steps below to get up and running for the configuration backup element of the app.</p> <ol> <li> <p>Enable the feature in the <code>PLUGIN_SETTINGS</code>. The configuration should have <code>\"enable_backup\": True</code> set in the <code>PLUGINS_CONFIG</code> dictionary for <code>nautobot_golden_config</code>.</p> </li> <li> <p>Add any git repositories that will be used to house the backup configurations.</p> <ol> <li>In the UI <code>Extensibility -&gt; Git Repositories</code>. Click Add.</li> <li>Populate the Git Repository data for the backup. Git Settings</li> <li>Make sure to select the Provides called <code>backup configs</code>.</li> <li>Click Create.</li> </ol> </li> <li> <p>Next, make sure to create new or update existing Apps Settings with the backup details.</p> <ol> <li>Navigate to <code>Golden Config -&gt; Settings</code> under the Golden Configuration Section.</li> <li>Create new or select one of the existing <code>Settings</code> objects</li> <li>Fill out the Backup Repository. (The dropdown will show the repository that was just created.)</li> <li>Fill out Backup Path Template. Typically <code>{{obj.location.name|slugify}}/{{obj.name}}.cfg</code>, see Setting Details</li> <li>Select whether or not to do a connectivity check per device.</li> <li>Click Save.</li> </ol> </li> <li> <p>Create Configuration Removals and Replacements.</p> <ol> <li>Config Removals</li> <li>Config Replacements</li> </ol> </li> <li> <p>Execute the Backup.</p> <ol> <li>Navigate to <code>Golden Config -&gt; Home</code> under the Golden Configuration Section.</li> <li>Click on the <code>Execute</code> button and select <code>Backup</code>.</li> <li>Select what to run the backup on.</li> <li>Run the Job by clicking \"Run Job\" button.</li> </ol> </li> </ol> <p>For in-depth details see Navigating Backup</p>"},{"location":"user/app_getting_started.html#intended-configuration","title":"Intended Configuration","text":"<p>Follow the steps below to get up and running for the intended configuration element of the app.</p> <p>Note</p> <p>Intended Configuration requires the <code>enable_intended</code> and <code>enabled_sotAgg</code> app features to be used.</p> <p>Note</p> <p>If Secret Group is used for the Repositories the secrets type HTTP(S) is required for this app.</p> <ol> <li> <p>Enable the feature in the <code>PLUGIN_SETTINGS</code>. The configuration should have <code>\"enable_intended\": True</code> set in the <code>PLUGINS_CONFIG</code> dictionary for <code>nautobot_golden_config</code>.</p> </li> <li> <p>Add any git repositories that will be used to house the intended configurations.</p> <ol> <li>In the UI <code>Extensibility -&gt; Git Repositories</code>. Click Add.</li> <li>Populate the Git Repository data for the intended. Git Settings</li> <li>Make sure to select the Provides called <code>intended configs</code>.</li> <li>Click Create.</li> </ol> </li> <li> <p>Add the git repository that will be used to house the Jinja2 templates.</p> <ol> <li>In the UI <code>Extensibility -&gt; Git Repositories</code>. Click Add.</li> <li>Populate the Git Repository data for the jinja2 templates. Git Settings</li> <li>Make sure to select the Provides called <code>jinja templates</code>.</li> <li>Click Create.</li> </ol> </li> <li> <p>Next, make sure to create new or update existing Apps Settings with the intended and jinja2 template details.</p> <ol> <li>Navigate to <code>Golden Config -&gt; Settings</code> under the Golden Configuration Section.</li> <li>Create new or select one of the existing <code>Settings</code> objects</li> <li>Fill out the Intended Repository. (The dropdown will show the repository that was just created.)</li> <li>Fill out Intended Path Template. Typically <code>{{obj.location.name|slugify}}/{{obj.name}}.cfg</code>, see Setting Details</li> <li>Fill out Jinja Repository. (The dropdown will show the repository that was just created.)</li> <li>Fill out Jinja Path Template.  Typically <code>{{obj.platform.network_driver}}.j2</code>.</li> </ol> </li> <li> <p>Determine what data(variables) the Jinja2 templates need from Nautobot.</p> <ol> <li>See Source of Truth Agg Details</li> <li>In the UI <code>Extensibility -&gt; GraphQL Queries</code>. Click Add.</li> <li>Populate the GraphQL data.</li> <li>Make sure to follow the format specified in the GraphQL section in Source of Truth Agg Details</li> <li>Click Create.</li> <li>Navigate to <code>Golden Config -&gt; Settings</code> under the Golden Configuration Section.</li> <li>Select a SoTAgg Saved Query. (The dropdown will show the GraphQL query that was just created.)</li> </ol> </li> <li> <p>Execute the Intended.</p> <ol> <li>Navigate to <code>Golden Config -&gt; Home</code>.</li> <li>Click on the <code>Execute</code> button and select <code>Intended</code>.</li> <li>Select what to run the intended generation on.</li> <li>Run the Job.</li> </ol> </li> </ol> <p>For in-depth details see Navigating Intended</p>"},{"location":"user/app_getting_started.html#compliance","title":"Compliance","text":"<p>Compliance requires Backups and Intended Configurations in order to be executed.</p> <ol> <li>Enable the feature in the <code>PLUGIN_SETTINGS</code>. The configuration should have <code>\"enable_compliance\": True</code> set in the <code>PLUGINS_CONFIG</code> dictionary for <code>nautobot_golden_config</code>.</li> <li>Follow the steps in Backup Configuration.</li> <li>Follow the steps in Intended Configuration.</li> <li> <p>Create a Compliance Feature.</p> <ol> <li>Navigate to <code>Golden Config -&gt; Compliance Feature</code>.</li> <li>Click Add and give the feature a name. Typically this is based on the configuration snippet or section. E.g. \"aaa\".</li> </ol> </li> <li> <p>Create a Compliance Rule.</p> <ol> <li>Navigate to <code>Golden Config -&gt; Compliance Rules</code>.</li> <li>Click Add and populate the fields, make sure the rule is linked to the feature created previously. See Configuration Compliance Settings for details.</li> </ol> </li> <li> <p>Execute Compliance Check.</p> <ol> <li>Navigate to <code>Golden Config -&gt; Configuration Compliance</code>.</li> <li>Click on the <code>Execute</code> button and select <code>Compliance</code>.</li> <li>Select what to run the compliance on.</li> <li>Run the Job.</li> </ol> </li> </ol> <p>For in-depth details see Navigating Compliance</p>"},{"location":"user/app_getting_started.html#config-remediation","title":"Config Remediation","text":"<p>Follow the steps below to get up and running for the configuration remediation element of the app.</p> <ol> <li>Navigate to <code>Golden Config -&gt; Compliance Rules</code>.</li> <li>Select the rules in which you'd like to enable remediation on.</li> <li>Edit the <code>Compliance Rule</code> and turn on the <code>Remediation</code> toggle button.</li> <li>Run the <code>Compliance</code> job again which will generate the initial remediation plan for the feature.</li> <li>Navigate to <code>Golden Config -&gt; Config Compliance</code>, select the device and notice a remediation section is not present for the compliance details for the feature.</li> </ol> <p>For in-depth details see Navigating Config Plans</p>"},{"location":"user/app_getting_started.html#config-plans","title":"Config Plans","text":"<p>Follow the steps below to get up and running for the configuration plans element of the app.</p> <ol> <li>Enable the feature in the <code>PLUGIN_SETTINGS</code>. The configuration should have <code>\"enable_plan\": True</code> set in the <code>PLUGINS_CONFIG</code> dictionary for <code>nautobot_golden_config</code>.</li> <li>Follow the steps in Compliance.<ul> <li>Compliance is necessary if ConfigPlans will be generated utilizing any of the attributes provided by a Compliance object.</li> <li>This step may be skipped if only <code>manual</code> ConfigPlans are going to be generated.</li> </ul> </li> <li> <p>Create a ConfigPlan</p> <ol> <li>Navigate to <code>Golden Config -&gt; Config Plans</code></li> <li>Click on <code>ADD</code> button.</li> <li>Fill out the plan details and plan filters.<ul> <li>The options dynamically change in the form based on the <code>plan type</code> selected.</li> <li>If the <code>plan type</code> is Intended, Remediation, Missing.<ul> <li>Select the Compliance Features to use to generate the plan.  If none are selected all features will be in scope.</li> </ul> </li> <li>If the <code>plan type</code> is Manual.<ul> <li>Create a manual plan to accomplish the goal. Note: Access to <code>obj</code> is available to dynamically populate fields via Jinja2 syntax.</li> </ul> </li> </ul> </li> <li>Click <code>Generate</code></li> </ol> </li> </ol> <p>For in-depth details see Navigating Config Plans</p>"},{"location":"user/app_getting_started.html#config-deploy","title":"Config Deploy","text":"<p>Follow the steps below to get up and running for the configuration deployment element of the app.</p> <ol> <li>Enable the feature in the <code>PLUGIN_SETTINGS</code>. The configuration should have <code>\"enable_deploy\": True</code> set in the <code>PLUGINS_CONFIG</code> dictionary for <code>nautobot_golden_config</code>.</li> <li>Follow the steps in Config Plans.</li> <li>Navigate to the specific ConfigPlan to deploy, or multi-select them from the ConfigPlan list view.<ul> <li>If deploying from a specific ConfigPlan object. Click <code>Deploy</code> button and accept the warnings.</li> <li>If deploying from the ConfigPlan list view. Click <code>Deploy Selected</code> button and accept the warnings.</li> </ul> </li> <li>Interpret the results from the popup modal and navigate to the job result as needed for more details.</li> </ol> <p>Config Deployments utilize the dispatchers from nornir-nautobot just like the other functionality of Golden Config. See Troubleshooting Dispatchers for more details.</p>"},{"location":"user/app_getting_started.html#load-properties-from-git","title":"Load Properties from Git","text":"<p>Golden Config properties include: Compliance Features, Compliance Rules, Config Removals, and Config Replacements. They can be created via the UI, API, or alternatively you can load these properties from a Git repository, defined in YAML files following the this directory structure (you can skip any of them if not apply):</p> <pre><code>\u251c\u2500\u2500 golden_config\n\u2502   \u251c\u2500\u2500 compliance_features\n\u2502   \u251c\u2500\u2500 compliance_rules\n\u2502   \u251c\u2500\u2500 config_removes\n\u2502   \u251c\u2500\u2500 config_replaces\n\u2502   \u251c\u2500\u2500 remediation_settings\n</code></pre> <p>The files within these folders can follow any naming pattern or nested folder structure, all of them will be recursively taken into account. So it's up to you to decide how to you prefer to organize these files (within the previously stated directory structure):</p> <pre><code>\u251c\u2500\u2500 golden_config\n\u2502   \u251c\u2500\u2500 compliance_features\n\u2502   \u2502   \u2514\u2500\u2500 all.yml\n\u2502   \u251c\u2500\u2500 compliance_rules\n\u2502   \u2502   \u251c\u2500\u2500 my_rule_for_cisco_ios\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 some_rules.yml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 some_other_rules.yml\n\u2502   \u2502   \u2514\u2500\u2500 juniper_junos.yml\n\u2502   \u251c\u2500\u2500 config_removes\n\u2502   \u2502   \u251c\u2500\u2500 cisco_ios.yml\n\u2502   \u2502   \u2514\u2500\u2500 juniper_junos.yml\n\u2502   \u251c\u2500\u2500 config_replaces\n\u2502   \u2502   \u251c\u2500\u2500 cisco_ios.yml\n\u2502   \u2502   \u2514\u2500\u2500 juniper_junos.yml\n\u2502   \u251c\u2500\u2500 remediation_settings\n\u2502   \u2502   \u251c\u2500\u2500 cisco_ios.yml\n\u2502   \u2502   \u2514\u2500\u2500 juniper_junos.yml\n</code></pre> <p>The <code>YAML</code> files will contain all the attributes necessary to identify an object (for instance, a <code>ComplianceRule</code> is identified by the <code>feature_slug</code> and the <code>platform_name</code> together) and the other attributes (the ones that are not used to identify the object). For example:</p> <p><code>compliance_features</code> example:</p> <pre><code>---\n- name: \"aaa\"\n  slug: \"aaa\"\n  description: \"aaa feature\"\n</code></pre> <p><code>compliance_rules</code> example:</p> <pre><code>---\n- feature_slug: \"aaa\"\n  platform_name: \"Cisco IOS\"\n  config_ordered: true\n  match_config: |\n    aaa\n    line\n    username\n    role\n    tacacs\n  config_type: \"cli\"\n</code></pre> <p><code>config_removes</code> example:</p> <pre><code>---\n- platform_name: \"Cisco IOS\"\n  name: \"Build config\"\n  regex: '^Building\\s+configuration.*\\n'\n</code></pre> <p><code>config_replaces</code> example:</p> <pre><code>---\n- name: \"username\"\n  platform_name: \"Cisco IOS\"\n  description: \"username\"\n  regex: '(username\\s+\\S+\\spassword\\s+5\\s+)\\S+(\\s+role\\s+\\S+)'\n  replace: '\\1&lt;redacted_config&gt;\\2'\n</code></pre> <p><code>remediation_settings</code> example:</p> <pre><code>---\n- platform_name: \"Cisco IOS\"\n  remediation_type: \"hierconfig\"\n  remediation_options:\n    style: ios\n    negation: no\n    idempotent_commands:\n      - lineage:\n          - startswith: vlan\n          - startswith: name\n...\n</code></pre> <p>CustomField data can be added using the <code>_custom_field_data</code> attribute, that takes a dictionary mapping custom_field names to their values:</p> <pre><code>---\n- name: \"aaa\"\n  slug: \"aaa\"\n  description: \"aaa feature\"\n  _custom_field_data:\n    custom_field_a: \"abc\"\n    custom_field_b: 123\n</code></pre> <p>Note</p> <p>For Foreign Key references to <code>ComplianceFeature</code> and <code>Platform</code> we use the keywords <code>feature_slug</code> and <code>platform_name</code> respectively.</p> <ol> <li> <p>Add the Git repository that will be used to sync Git properties.</p> <ol> <li>In the UI <code>Extensibility -&gt; Git Repositories</code>. Click Add.</li> <li>Populate the Git Repository data for the GC properties. Git Settings</li> <li>Make sure to select the Provides called <code>Golden Config properties</code>.</li> <li>Click Create (This step runs an automatic sync).</li> </ol> </li> <li> <p>Run <code>sync</code> and all the properties will be created/updated in a declarative way and following the right order to respect the dependencies between objects. The import task will raise a <code>warning</code> if the dependencies are not available yet (for instance, a referenced <code>Platform</code> is not created), so the <code>sync</code> process will continue, and you could then fix these warnings by reviewing the mismatch (maybe creating the required object) and run the <code>sync</code> process again.</p> </li> </ol>"},{"location":"user/app_getting_started.html#constance-settings","title":"Constance Settings","text":"<p>Golden config uses the <code>dispatch_params()</code> function in conjunction with the constance settings DEFAULT_FRAMEWORK, GET_CONFIG_FRAMEWORK, MERGE_CONFIG_FRAMEWORK, and REPLACE_CONFIG_FRAMEWORK. This allows you to define in this order of precedence:</p> <ul> <li>For a specific method, such as get_config, which framework do I want to use, netmiko or napalm for a specific network_driver such as <code>cisco_ios</code>?</li> <li>For a specific method, such as get_config, which framework do I want to use, netmiko or napalm  for all network_drivers?</li> <li>By default, which framework do I want to use, netmiko or napalm for a specific network_driver such as <code>cisco_ios</code>?</li> <li>By default, which framework do I want to use, netmiko or napalm for all network_drivers?</li> </ul> <p>Info</p> <p>These settings are not considered when using a custom_dispatcher as described below.</p> <p>Each of the constance settings allow for the usage of either a key named exactly as the <code>network_driver</code> or the key of <code>all</code>, anything else will not result in anything valid. The value, should only be napalm or netmiko at this point, but subject to change in the future.</p> <p>Let's take a few examples to bring this to life a bit more.</p> <pre><code># DEFAULT_FRAMEWORK\n{\n  \"all\": \"napalm\"\n}\n</code></pre> <p>Using the previous example, everything will use the napalm dispatcher, this is in fact the default settings</p> <pre><code># DEFAULT_FRAMEWORK\n{\n  \"all\": \"napalm\",\n  \"fortinet\": \"netmiko\"\n}\n</code></pre> <p>Using the previous example, everything will use the napalm dispatcher except fortinet, which would use netmiko.</p> <pre><code># DEFAULT_FRAMEWORK\n{\n  \"all\": \"napalm\",\n  \"fortinet\": \"netmiko\"\n}\n# GET_CONFIG_FRAMEWORK\n{\n  \"arista_eos\": \"netmiko\",\n  \"cisco_nxos\": \"netmiko\"\n}\n</code></pre> <p>Using the previous example, everything will use the napalm dispatcher except fortinet and when using the <code>get_config</code> method for <code>arista_eos</code> and <code>cisco_nxos</code>, use netmiko.</p> <p>As you can see, you now have the flexibility to control which network_driver will use which framework for every method, as each constance setting is sanely named to match the method name (e.g. <code>GET_CONFIG_FRAMEWORK</code> maps the <code>get_config</code> method). Additionally, if the current <code>network_driver</code> and associated <code>network_driver_mappings</code> is not sufficient as is, you can extend the NETWORK DRIVER settings as well.</p> <p>Golden Config leverages the config framework from constance, please refer to that documentation for how to use. You can access your configurations from your name in the top right of the UI, followed by <code>Admin -&gt; Configuration -&gt; Config</code> and locate your setting.</p>"},{"location":"user/app_getting_started.html#what-are-the-next-steps","title":"What are the next steps?","text":"<p>You can check out the Use Cases section for more examples.</p>"},{"location":"user/app_overview.html","title":"App Overview","text":"<p>This document provides an overview of the App including critical information and important considerations when applying it to your Nautobot environment.</p> <p>Note</p> <p>Throughout this documentation, the terms \"app\" and \"plugin\" will be used interchangeably.</p>"},{"location":"user/app_overview.html#description","title":"Description","text":"<p>When engineers are starting their network automation journey, everybody asks where and how they should start. Their immediate thought is coming up with methods of automating changes within their environments. However, doing so can be scary for those who are risk averse about automation making changes. The question then comes about how automation can be used to help solve some of the big problems facing network teams today. One of those problems that we've repeatedly heard from our customers and fellow network engineers is around configuration drift. This issue typically occurs for multiple reasons:</p> <ul> <li>Lack of standardization for device configurations</li> <li>Multiple individuals independently making changes</li> <li>Mergers and acquisitions</li> </ul> <p>Thankfully, this issue can be addressed without making any changes on your devices. You might ask, \u201cHow do I do that?\u201d That is where the Golden Configuration app for Nautobot comes in. The Golden Configuration app is comprised of four components:</p> <ul> <li>Configuration Backup</li> <li>Source of Truth Aggregation</li> <li>Configuration Intended</li> <li>Configuration Compliance</li> </ul> <p>Info</p> <p>The four components are not hard requirements, the application is flexible and can be updated to leverage any of these components if they already exist in another system or automated process.</p> <p>Utilizing these components, you can define the Golden Configuration standard for each of your devices and compare their adherence to that standard, otherwise known as their configuration compliance.</p>"},{"location":"user/app_overview.html#audience-user-personas-who-should-use-this-app","title":"Audience (User Personas) - Who should use this App?","text":"<ul> <li>Network Engineers interested in Network Automation, Infrastructure as Code, etc.</li> <li>Network shops that have difficult time ensuring their configurations are to standard</li> <li>Network shops looking for a backup configuration solution</li> <li>Network shops looking for generating configurations</li> </ul>"},{"location":"user/app_overview.html#authors-and-maintainers","title":"Authors and Maintainers","text":"<ul> <li>Ken Celenza (@itdependsnetworks)</li> <li>Jeff Kala (@jeffkala)</li> </ul>"},{"location":"user/app_overview.html#nautobot-features-used","title":"Nautobot Features Used","text":"<ul> <li>Dynamic Groups</li> <li>Jobs</li> <li>Job Buttons</li> <li>Secret Groups</li> <li>Git Repositories</li> <li>Git as a Data Source</li> <li>GraphQL Saved Queries</li> </ul>"},{"location":"user/app_overview.html#extras","title":"Extras","text":"<p>The extras and features that Golden Config utilizes are covered in depth in App Use Cases.</p>"},{"location":"user/app_use_cases.html","title":"Using the App","text":"<p>This document describes common use-cases and scenarios for this App.</p>"},{"location":"user/app_use_cases.html#general-usage","title":"General Usage","text":""},{"location":"user/app_use_cases.html#home","title":"Home","text":"<p>The Home view is a portal to understand what the status of the devices are.</p> <p></p> <p>Some of the information described in this view, may not be immediately obvious.</p> <ul> <li>The Backup/Intended/Compliance status will always show the last time the job was successfully ran for that device, but there are several conditions it may be in.<ul> <li>Green with a date indicates that the run was successful, which was the last time the job ran.</li> <li>Red with a date indicates the last time the job ran successfully, with the last time the job was attempted shown when you mouse over the date.</li> <li>A red double-dashed icon indicated the job has never been successful</li> </ul> </li> <li>The icons are provided in the following order, that largely matches the status.<ul> <li>Backups</li> <li>Intended</li> <li>Unix Diff</li> <li>SoT aggregation data</li> <li>Run job</li> </ul> </li> </ul> <p>The first four bring up a \"modal\" or \"dialogue box\" which has a detailed view for a dedicated page. The run job brings the user to a job to run all three components against all of the devices.</p>"},{"location":"user/app_use_cases.html#jobs","title":"Jobs","text":"<p>There are a series of Jobs that are registered via the App. They can be viewed from the standard Jobs view.</p> <p></p> <p>Each Job attempts to provide sane error handling, and respects the <code>debug</code> flag to provide more information.</p> <p></p>"},{"location":"user/app_use_cases.html#application-settings","title":"Application Settings","text":"<p>The golden configuration app settings can be found by navigating to <code>Golden Config -&gt; Settings</code> button. Select one of the Settings, under the <code>Golden Configuration</code> section. Since Golden Configuration App version 1.0, the app allows for multiple settings to be configured by the User. Each of the settings, has the individual repositories and configuration details, as well as a Dynamic Group. You could use a combination of settings to customize your Configuration Compliance behavior. Settings have a name and a weight. The weight parameter indicates the priority of given Settings - the higher the weight, the device matching the Dynamic Group defined will be assigned to the scope. At the same moment, each device will be matched up to maximum of only one <code>Settings.</code> In case of the same weight, the sorting is performed by the name.</p> <p></p> <p>To create new settings click on the <code>+Add</code> button. To update existing settings click on one of the <code>Settings</code> name.</p> Setting Explanation Backup Repositories The Git Repository where your backup configurations will be found. Backup Path A Jinja template which defines the path and name of backup files within the backup repository. The variable <code>obj</code> is available as the device instance object of a given device, as is the case for all Jinja templates. e.g. <code>{{obj.location.name\\|slugify}}/{{obj.name}}.cfg</code> Intended Repositories The Git Repository where your intended configuration state files will be found. Intended Path A Jinja template which defines the path and name of intended configuration state files within the intended state repository. e.g. <code>{{obj.location.name\\|slugify}}/{{obj.name}}.intended_cfg</code> Jinja Repository The Git Repository where your jinja templates will be found. Jinja Path A Jinja template which defines the path (within the repository) and name of the Jinja template file. e.g. <code>{{obj.platform.network_driver}}/{{obj.role.name}}/main.j2</code> Dynamic Group The scope of devices on which Golden Config's jobs can operate. GraphQL Query A query that is evaluated and used to render the config. The query must start with <code>query ($device_id: ID!)</code>. <p>Note</p> <p>Each of these will be further detailed in their respective sections.</p>"},{"location":"user/app_use_cases.html#dynamic-group","title":"Dynamic Group","text":"<p>Note</p> <p>Starting in Golden Config v1.2 and onwards the original implementation of scope has been deprecated in favor of Dynamic Groups from Nautobot. During the migrations any Golden Config Setting scope attribute will be migrated to Dynamic Groups. All settings require a Dynamic Group, if the original scope is not set to allow ALL Devices a Dynamic Group will be created without a filter applied which will is the equivalent of all Devices.</p> <p>The Dynamic Group provides a filter that will limit the list of devices in scope of a Golden Config Setting. In the Golden Config Home view the Dynamic Group is used to limit the Devices that are displayed, if a Device does not match the filter of a Dynamic Group it is considered out of scope for GoldenConfig and will not show on the Golden Config Settings view. All jobs in Golden Config also use the Dynamic Group to know which Devices are in scope. A job can optionally further refine the scope, but the outer bound would be based on what is defined in the Dynamic Group. The options are best described by leveraging the Devices list view, search features (the filtering shown on the side of the Devices.) Building a query there, will provide the exact keys expected.</p>"},{"location":"user/app_use_cases.html#scope-of-devices","title":"Scope Of Devices","text":"<p>Within the Detail view of a Golden Config Setting the section to denote the scope of devices links back to the Dynamic Group that is assigned and renders the filter attribute of the Dynamic Group as JSON. All updates to the scope of Devices must be done via the Dynamic Group not directly on the Golden Config Setting.</p> <p></p> <p>The below configurations of scope can either be removed or specified for pre 1.2 only, the same logic applies in 1.2 and onwards but via DynamicGroups.</p> <p>Filtering to specific platforms, based on their name.</p> <pre><code>{\n  \"platform\": [\n    \"Cisco IOS\",\n    \"Cisco NXOS\",\n    \"Arista EOS\",\n    \"Juniper Junos\"\n  ]\n}\n</code></pre> <p>Adding a \"has_primary_ip\" check.</p> <pre><code>{\n  \"platform\": [\n    \"Cisco IOS\",\n    \"Cisco NXOS\",\n    \"Arista EOS\",\n    \"Juniper Junos\"\n  ],\n  \"has_primary_ip\": \"True\"\n}\n</code></pre> <p>When viewing the settings, the scope of devices is actually a link to the query built in the Devices view. Click that link to understand which devices are permitted by the filter.</p>"},{"location":"user/app_use_cases.html#create-secret-groups","title":"Create Secret Groups","text":"<p>Info</p> <p>Unless you are only using configuration compliance with backup and intended configurations in repositories that do not require credentials, you will have to go through these steps.</p> <p>The Git Settings requires a Secret Group to be attached which in turn requires a Secret to be required. The Secret can use any provider, you are encouraged to read the Nautobot docs on Secret Providers, but for our purposes we will simply use the Environment Variable option, so keep in mind that detail during the coming instructions.</p> <p>Create a new secret by navigating to <code>Secrets -&gt; Secret -&gt; add (button)</code>.</p> <p>Info</p> <p>See GitHub Personal Access Token for an example method to generate a token in GitHub.</p> <p>Parameters:</p> Field Explanation Name User friendly name for secret. Provider The Secret Provider to the docs. Parameter This will be dependant based on the provider. <p>For our example, let's configure and create with:</p> Field Value Name GIT-TOKEN Provider Environment Variable Variable NAUTOBOT_GOLDEN_CONFIG_GIT_TOKEN. <p></p> <p>Depending on your provider, you may also need a username, so you would repeat the process such as:</p> Field Explanation Name GIT-TOKEN Provider Environment Variable Variable NAUTOBOT_GOLDEN_CONFIG_GIT_USERNAME. <p>Now we need to create the Secret Group, navigate to <code>Secrets -&gt; Secret Group -&gt; add (button)</code>.</p> <p>For our example, let's configure and create with:</p> Field Value Name Git Secret Group Access Type HTTP(S) Secret Type Token Secret GIT-TOKEN. <p>Tip</p> <p>If your instance requires a username as well, please ensure to add that as well.</p> <p></p> <p>The steps to add the variables to your environment are outside the scope of this document and may or may not be needed depending on how you manage your Secrets in your environment, but please be mindful of ensuring the Secrets end up on your system.</p>"},{"location":"user/app_use_cases.html#git-settings","title":"Git Settings","text":"<p>The app makes heavy use of the Nautobot git data sources feature. There are up to three repositories used in the application. This set of instructions will walk an operator through setting up the backup repository. The steps are the same, except for the \"Provides\" field name chosen.</p> <p>In order to setup this repository, go to Nautobot and navigate to the Data Sources Git integration. <code>Extensibility -&gt; Git Repositories</code>.</p> <p></p> <p>From the Git Repositories page we can add the Backup repository.</p> <p>Click on <code>Add</code>.</p> <p>You will now be presented with a page to fill in the repository details.</p> <p>Parameters:</p> Field Explanation Name User friendly name for the backup repo. Slug Auto-generated based on the <code>name</code> provided. Remote URL The URL pointing to the Git repo that stores the backup configuration files. Current git url usage is limited to <code>http</code> or <code>https</code>. Branch The branch in the Git repo to use. Defaults to <code>main</code>. Secrets Group The secret group configured that will define you credential information. Provides Valid providers for Git Repo. <p>Note</p> <p>When Secret Group is used for a Repository the secrets type HTTP(S) is required for this plugin, as shown previously.</p> <p></p> <p>Select <code>backup configs</code> and click on <code>Create</code>.</p> <p>Once you click <code>Create</code> and the repository syncs, the main page will now show the repo along with its status. </p> <p>For their respective features, the \"Provides\" field could be backup intended configs and jinja templates.</p>"},{"location":"user/app_use_cases.html#apps-buttons","title":"Apps Buttons","text":"<p>The apps buttons provides you with the ability to navigate to Run the script, overview report, and detailed report.</p>"},{"location":"user/app_use_cases.html#run-script","title":"Run Script","text":"<p>This can be accessed via the Apps drop-down via <code>Run Script</code> button of the <code>Home</code> view, the user will be provided a form of the Job (as described above), which will allow the user to limit the scope of the request.</p>"},{"location":"user/app_use_cases.html#device-template-content","title":"Device Template Content","text":"<p>The app makes use of template content <code>right_page</code> in order to use display in-line the status of that device in the traditional Nautobot view. From here you can click the link to see the detail compliance view.</p>"},{"location":"user/app_use_cases.html#location-template-content","title":"Location Template Content","text":"<p>The app makes use of template content <code>right_page</code> in order to use display in-line the status of that entire location in the traditional Nautobot view. This sums the total for all locations for parent locations.</p>"},{"location":"user/app_use_cases.html#api","title":"API","text":"<p>To run the job programmatically, reference the nautobot documentation for the proper API call. Pay special attention to the <code>class_path</code> definition.</p>"},{"location":"user/app_use_cases.html#feature-enablement","title":"Feature Enablement","text":"<p>Enabling features such as backup or compliance, will render those parts of the UI visible. It is worth noting that disabling features does not provide any garbage collection and it is up to the operator to remove such data.</p>"},{"location":"user/app_use_cases.html#network-operating-system-support","title":"Network Operating System Support","text":"<p>The version of OS's supported is documented in the FAQ and is controlled the platform network_driver. The platform network_driver must be exactly as expected or leverage a configuration option--which is described the the FAQ--for the app to work.</p>"},{"location":"user/app_use_cases.html#use-cases-and-common-workflows","title":"Use-cases and common workflows","text":"<p>This app enable four (4) key use cases.</p> <ol> <li>Configuration Backups - Is a Nornir process to connect to devices, optionally parse out lines/secrets, backup the configuration, and save to a Git repository.</li> <li>Intended Configuration - Is a Nornir process to generate configuration based on a Git repo of Jinja files to combine with a GraphQL generated data and a Git repo to store the intended configuration.</li> <li>Source of Truth Aggregation - Is a GraphQL query per device that creates a data structure used in the generation of configuration.</li> <li>Configuration Compliance - Is a process to run comparison of the actual (via backups) and intended (via Jinja file creation) CLI configurations upon saving the actual and intended configuration. This is started by either a Nornir process for cli-like configurations or calling the API for json-like configurations</li> </ol> <p>Notice</p> <p>The operators of their own Nautobot instance are welcome to use any combination of these features. Though the appearance may seem like they are tightly coupled, this isn't actually the case. For example, one can obtain backup configurations from their current RANCID/Oxidized process and simply provide a Git Repo of the location of the backup configurations, and the compliance process would work the same way. Also, another user may only want to generate configurations, but not want to use other features, which is perfectly fine to do so.</p>"},{"location":"user/app_use_cases.html#screenshots","title":"Screenshots","text":"<p>There are many features and capabilities the app provides into the Nautobot ecosystem. The following screenshots are intended to provide a quick visual overview of some of these features.</p> <p>The golden configuration is driven by jobs that run a series of tasks and the result is captured in this overview.</p> <p></p> <p>The compliance report provides a high-level overview on the compliance of your network. </p> <p>The compliance overview will provide a per device and feature overview on the compliance of your network devices. </p> <p>Drilling into a specific device and feature, you can get an immediate detailed understanding of your device. </p> <p></p>"},{"location":"user/external_interactions.html","title":"External Interactions","text":"<p>This document describes external dependencies and prerequisites for this App to operate, including system requirements, API endpoints, interconnection or integrations to other applications or services, and similar topics.</p>"},{"location":"user/external_interactions.html#from-the-app-to-other-systems","title":"From the App to Other Systems","text":"<ul> <li>Git integrations are required, this is generally <code>tcp/22</code> or <code>tcp/443</code> to the git repository.<ul> <li>An account with privileges to read and/or write (depending on features used) with git.</li> </ul> </li> <li>When using backup configurations, will require access to the port of the network device, usually <code>tcp/22</code> or <code>tcp/443</code>.<ul> <li>An account with privileges to read configurations.</li> </ul> </li> </ul>"},{"location":"user/external_interactions.html#nautobot-rest-api-endpoints","title":"Nautobot REST API endpoints","text":"<ul> <li>Documentation of the API is provided by OpenAPI (formerly Swagger) docs.</li> </ul>"},{"location":"user/faq.html","title":"Frequently Asked Questions","text":""},{"location":"user/faq.html#why-doesnt-the-compliance-behavior-work-the-way-i-expected-it-to","title":"Why doesn't the compliance behavior work the way I expected it to?","text":"<p>There are many ways to consider golden configs as shown in this blog. We cannot provide accommodations for all versions as it will both bloat the system, create a more complex system, and ultimately run into conflicting interpretations. Keeping the process focused but allowing anyone to override their interpretation of how compliance should work is both a powerful (via sane defaults) and complete (via custom compliance) solution.</p> <p>Any other interpretations of how compliance should be viewed are encouraged to use custom compliance option.</p>"},{"location":"user/faq.html#why-dont-the-configurations-match-like-the-vendor-cli","title":"Why don't the configurations match like the vendor cli?","text":"<p>A vendor processes configuration understanding constructs such as knowing that <code>int g0/0</code> and <code>interface GigabitEthernet0/0</code> are the same. Each one of these rules a subject to a given vendor's OS implementation. The ability to track these changes for all vendors/OS/versions is nearly impossible. Additionally, this practice would be error prone and not follow the principal of least astonishment. Notwithstanding a major change in the network industry, adjusting this strategy is outside the scope of the app.</p> <p>Instead, the operator is required to ensure their configurations match exactly as the configurations show in the running configuration. This includes all spacing, special characters, or literally anything that result in a string comparison not returning true.</p> <p>Any other interpretations of how compliance should be viewed are encouraged to use custom compliance option.</p>"},{"location":"user/faq.html#why-doesnt-the-config-overview-page-reflect-the-inclusion-changes-immediately","title":"Why doesn't the config overview page reflect the inclusion changes immediately?","text":"<p>On a technical level, those changes enable the model <code>GoldenConfig</code> to not filter out the newly included devices, but this does not add to the model. In order to be included, a new job needs to be ran which will create an entry within <code>GoldenConfig</code>, any of the 3 jobs that successfully run will create such an entry.</p>"},{"location":"user/faq.html#why-arent-configurations-generated-or-compliance-generated-real-time","title":"Why aren't configurations generated or compliance generated real time?","text":"<p>The app make no assumptions about your intention and expects the operator to manage the configurations as they see fit. As as example, in preparation for a change, one may update data to reflect these changes, but not want to generate or run compliance against these configurations.</p> <p>Additionally, configurations generated would have to either update the Git Repo immediately or generate locally only and not update the Git Repo, both of which may not be as the user expected.</p> <p>The current design allows for the maximum amount of use cases and make little assumptions how the user wants to manage their configurations. That being said, education about how the process works is important as inevitably any design choice will not be line with another person's pre-conceived notions. There are a myriad of technical issues to be considered before any change can be made to this process.</p>"},{"location":"user/faq.html#why-not-predefine-a-list-of-remove-and-substitute-lines-within-backup-configurations","title":"Why not predefine a list of remove and substitute lines within backup configurations?","text":"<p>Backup configurations solutions are simple to start with and grow to hundreds or thousands of requests. That added complexity is not something that is in scope for the project.</p> <p>Many people will have different opinions about what should or should not be filtered or substituted. Providing the flexibility allows the user to have it operate as they intend it, without burdening the apps goals.</p>"},{"location":"user/faq.html#why-not-predefine-the-configuration-feature-map","title":"Why not predefine the configuration feature map?","text":"<p>The process is based on an opinion on what defines a feature, for one organization BGP may include the prefix configuration and another it would not.</p> <p>Understanding that there will never be consensus on what should go into a feature it becomes obvious why the users must maintain such configuration.</p>"},{"location":"user/faq.html#what-are-the-supported-platforms-for-compliance-jobs-how-do-i-configure-a-device-with-a-specific-os","title":"What are the supported platforms for Compliance jobs? How do I configure a device with a specific OS?","text":"<p>The current supported platform and the associated default platform network_driver names are the following for:</p> <ul> <li>arista_eos</li> <li>aruba_aoscx</li> <li>bigip_f5</li> <li>cisco_aireos</li> <li>cisco_asa</li> <li>cisco_ios</li> <li>cisco_ios_xr</li> <li>citrix_netscaler</li> <li>cisco_nxos</li> <li>extreme_netiron</li> <li>fortinet_fortios</li> <li>juniper_junos</li> <li>linux</li> <li>mikrotik_routeros</li> <li>mrv_optiswitch</li> <li>nokia_sros</li> <li>paloalto_panos</li> </ul> <p>The expected \"network_os\" parameter must be set using the platform <code>network_driver</code>, which then in turn provides you the <code>network_driver_mappings</code> to map out the framework, such as netmiko and napalm. This should solve most use cases, but occasionally you may want to extend this mapping, for further understand see the docs and simply update the NETWORK_DRIVER configuration.</p> <p>Here is an example Device object representation, e.g. <code>device.platform.network_driver_mappings</code> to help provide some context.</p> <pre><code>{\n    \"ansible\": \"cisco.nxos.nxos\",\n    \"hier_config\": \"nxos\",\n    \"napalm\": \"nxos\",\n    \"netmiko\": \"cisco_nxos\",\n    \"netutils_parser\": \"cisco_nxos\",\n    \"ntc_templates\": \"cisco_nxos\",\n    \"pyats\": \"nxos\",\n    \"pyntc\": \"cisco_nxos_nxapi\",\n    \"scrapli\": \"cisco_nxos\",\n}\n</code></pre>"},{"location":"user/faq.html#what-are-the-supported-platforms-for-backup-and-intended-configuration-jobs-how-do-i-configure-a-device-with-a-specific-os","title":"What are the supported platforms for Backup and Intended Configuration jobs? How do I configure a device with a specific OS?","text":"<p>The current supported platform and the associated default platform network_driver names are the following for:</p> <ul> <li>arista_eos</li> <li>cisco_asa</li> <li>cisco_ios</li> <li>cisco_ios_xr</li> <li>cisco_nxos</li> <li>juniper_junos</li> <li>mikrotik_routeros</li> <li>mikrotik_routeros_api</li> <li>ruckus_fastiron</li> <li>ruckus_smartzone_api</li> </ul> <p>In many use cases, this can be extended with a custom dispatcher for nornir tasks, which is controlled in the nornir-nautobot repository. Additionally you can \"roll your own\" dispatcher with the <code>custom_dispatcher</code> configuration parameter to map and/or extend for your environment. Please see the instructions there for further details.</p>"},{"location":"user/faq.html#why-not-provide-the-corrective-configurations","title":"Why not provide the corrective configurations?","text":"<p>Configuration enforcement is a difficult problem to attack. While potentially could integrate with a system to provide the enforcement, this is currently out-of-scope for the app.</p>"},{"location":"user/faq.html#why-does-the-compliance-section-scroll-so-much","title":"Why does the compliance section scroll so much?","text":"<p>The real estate optimizations is not the best for the configuration compliance overview right now. Users are suggested to review the best practices described in the configuration compliance section. Over time, the hope is to optimize this.</p>"},{"location":"user/faq.html#why-cant-i-get-access-to-the-name-key-when-generating-configuration","title":"Why can't I get access to the name key when generating configuration?","text":"<p>All data created by GraphQL is unpacked with the <code>**data</code> operator. There is a namespace issue with Nornir using name as a keyword as well. The recommended approach is to use GraphQL aliasing. An example would be <code>hostname: name</code> or <code>inventory_hostname: name</code> to workaround this issue.</p>"},{"location":"user/faq.html#it-seems-that-golden-config-has-caused-an-issue-with-migrations","title":"It seems that Golden Config has caused an issue with migrations","text":"<p>With the original Git Data Source implementation, passwords were stored in the database, encrypted with your <code>SECRET_KEY</code>. If you change your secret key, often the first migration that may cause an issue will be Golden Config, as shown here:</p> <pre><code>  Applying ipam.0006_ipaddress_nat_outside_list... OK\n  Applying ipam.0007_add_natural_indexing... OK\n  Applying nautobot_golden_config.0006_multi_repo_support_temp_field...Traceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/django/db/models/fields/related_descriptors.py\", line 173, in __get__\n    rel_obj = self.field.get_cached_value(instance)\n  File \"/usr/local/lib/python3.11/site-packages/django/db/models/fields/mixins.py\", line 15, in get_cached_value\n    return instance._state.fields_cache[cache_name]\nKeyError: 'backup_repository'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n&lt;omitted&gt;\n  File \"/usr/local/lib/python3.11/site-packages/cryptography/hazmat/backends/openssl/hmac.py\", line 85, in verify\n    raise InvalidSignature(\"Signature did not match digest.\")\ncryptography.exceptions.InvalidSignature: Signature did not match digest.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n&lt;omitted&gt;\n  File \"/usr/local/lib/python3.11/site-packages/django_cryptography/core/signing.py\", line 239, in unsign\n    raise BadSignature(\ndjango.core.signing.BadSignature: Signature \"b'A9QMEEeCk2+tAc6naf2KDiZBvACNWGNHGMPJ/SHOYY8=\\n'\" does not match\nERROR: 1\n</code></pre> <p>If you receive this error, the issue is the secret key has been changed, and does not have anything to do with the Golden Config app. You can either delete the entries from your data source and the reference to those in the Golden Config settings or revert the secret key back so it matches the original deployment. Any issues opened will be closed and this faq referred to. If you still need help, feel free to join the Slack community.</p>"},{"location":"user/faq.html#i-got-a-preemptively-failed-error-but-i-know-my-system-is-setup-correctly","title":"I got a <code>preemptively failed</code> error, but I know my system is setup correctly?","text":"<p>These errors have been accurate so far, that is not to say that there is no way they could be a bug, but most commonly they have worked as expected thus far. Common issues include.</p> <ul> <li>Incorrectly configured Secrets</li> <li>Filtering to nothing when presumption is the filter works a certain way</li> <li>Referencing an OS that is not recognized</li> </ul> <p>There is an ongoing effort to better document each troubleshooting case.</p>"},{"location":"user/faq.html#why-is-the-_isnull-on-datetime-filters-considered-experimental","title":"Why is the <code>_isnull</code> on DateTime filters considered experimental?","text":"<p>There are various ways we can create a programmatic interface, which may change the behavior or name, for now it should be considered experimental as we may update this strategy.</p>"},{"location":"user/faq.html#i-received-an-error-attributeerrornpfloatwas-removed-in-the-numpy-20-release-usenpfloat64instead-what-should-i-do_","title":"I received an error <code>AttributeError:</code>np.float<code>was removed in the NumPy 2.0 release. Use</code>np.float64<code>instead.</code> what should I do?_","text":"<p>Due to an incompatiblitly between DeepDiff and numPy, you must find a version of those two that are compatible with each other. See here for more information. The easiest thing to do is upgrade them both.</p>"},{"location":"user/troubleshooting/troubleshoot_credentials.html","title":"Troubleshooting Credentials","text":"<p>Credentials are an important aspect of the Golden Config application. In order to capture backup configs the application must have credentials to login to network devices. Golden Config simply utilizes another library to generate the inventory and to populate the credentials to use.</p> <p>At the time of writing this there are three main credentials types that Golden Config can utilize.</p> <ul> <li>Environment Variables</li> <li>Configuration Settings Variables</li> <li>Nautobot Integrated Secrets Group Functionality</li> </ul> <p>These are documented in the Nautobot Plugin Nornir documentation.</p>"},{"location":"user/troubleshooting/troubleshoot_credentials.html#no-usernamepassword-preemptively-failed","title":"No Username/Password Preemptively Failed","text":"<p>This will cover some things to check for each of the credentials classes supported.</p> <ul> <li> <p>Environment Variables</p> <ul> <li>Make sure the <code>PLUGIN_CONFIG</code> is correct and the credentials class do not have a typo.</li> </ul> <pre><code>PLUGINS_CONFIG = {\n\"nautobot_plugin_nornir\": {\n    \"nornir_settings\": {\n       \"credentials\": \"nautobot_plugin_nornir.plugins.credentials.env_vars.CredentialsEnvVars\"\n        },\n    }\n}\n</code></pre> <ul> <li>Make sure the three environment variables are defined and accessible in the worker node. Please refer here for details:<ul> <li>NAPALM_USERNAME</li> <li>NAPALM_PASSWORD</li> <li>DEVICE_SECRET</li> </ul> </li> </ul> </li> <li> <p>Configuration Settings Variables</p> <ul> <li>Make sure the <code>PLUGIN_CONFIG</code> is correct and the credentials class do not have a typo.</li> <li>Make sure the <code>username</code>, <code>password</code>, and <code>secret</code> is nested under <code>nautobot_plugin_nornir</code> and not under <code>nornir_settings</code>.</li> </ul> <pre><code>PLUGINS_CONFIG = {\n    \"nautobot_plugin_nornir\": {\n        \"nornir_settings\": {\n            \"credentials\": \"nautobot_plugin_nornir.plugins.credentials.settings_vars.CredentialsSettingsVars\",\n        },\n        \"username\": \"ntc\",\n        \"password\": \"password123\",\n        \"secret\": \"password123\",\n    }\n}\n</code></pre> <p>Info</p> <p>A common pattern is to have these username/password/secrets reference \"other\" environment variables using the <code>os.getenv()</code> python function. This pattern works well, but the environment variables MUST be resolvable from within the workers environment.</p> </li> <li> <p>Nautobot Integrated Secrets Group Functionality</p> <p>This credentials class uses the Nautobot core functionality for secrets/secret_groups. There is some caveats to this feature and some troubleshooting tips are provided below.</p> <ul> <li>Make sure the <code>PLUGIN_CONFIG</code> is correct and the credentials class do not have a typo.</li> </ul> <pre><code>PLUGINS_CONFIG = {\n    \"nautobot_plugin_nornir\": {\n        \"nornir_settings\": {\n            \"credentials\": \"nautobot_plugin_nornir.plugins.credentials.nautobot_secrets.CredentialsNautobotSecrets\",\n        }\n    }\n}\n</code></pre> <ul> <li>Make sure you have the <code>secrets</code> defined and properly linked to environment variables or text file(s).</li> <li> <p>Make sure the <code>secrets</code> are assigned to a <code>secret_group</code> and that the proper \"types\" are used.</p> <p>Warn</p> <p>This credentials class is expecting some defaults to be used to auto load the credentials. The below \"types\" must be used if the default PLUGIN_CONFIG from above is used. If the <code>Access Type</code> needs to be changed see Nautobot Secrets Nornir Docs.</p> <ul> <li>Access Type = \"Generic\" and Secret_Type = \"Username\" and linked to the secret objects that links to the username.</li> <li>Access Type = \"Generic\" and Secret_Type = \"Password\" and linked to the secret objects that links to the password.</li> <li>Access Type = \"Generic\" and Secret_Type = \"Secret\" and linked to the secret objects that links to the secret.</li> </ul> </li> <li> <p>Make sure the <code>secret_group</code> is applied to the device.</p> <ul> <li>Edit device object and save it with a secret_group that identifies the credentials for that device.</li> </ul> </li> </ul> </li> </ul>"},{"location":"user/troubleshooting/troubleshoot_dispatchers.html","title":"Troubleshooting Dispatchers","text":"<p>At a high-level the default dispatchers that Golden Config uses are actually sourced from another open source library. nornir-nautobot contains the Nornir tasks that define the methods that Golden Config utilizes.</p>"},{"location":"user/troubleshooting/troubleshoot_dispatchers.html#dispatcher-sender","title":"Dispatcher Sender","text":"<p>This dispatcher task is explained in the nornir-nautobot docs, but provided here is a simple overview.</p> <ul> <li>If exists check <code>custom_dispatcher</code>, for network_driver, if a custom_dispatcher is used but not found, fail immediately</li> <li>Check for framework &amp; driver <code>f\"nornir_nautobot.plugins.tasks.dispatcher.{network_driver}.{framework.title()}{network_driver_title}\"</code></li> <li>Check for default, e.g. <code>f\"nornir_nautobot.plugins.tasks.dispatcher.default.{framework.title()}Default\"</code></li> </ul> <p>Info</p> <p>Where <code>framework</code> is a library like <code>netmiko</code> or <code>napalm</code> and <code>network_driver</code> is the platform like <code>cisco_ios</code> or <code>arista_eos</code>.</p>"},{"location":"user/troubleshooting/troubleshoot_dispatchers.html#cannot-import-is-the-library-installed","title":"Cannot import  is the library installed? <p>This occurs when a Golden Config job is executed with a Nautobot <code>platform</code>, and that platform network_driver is not found for the Nornir \"method\" the job is attempting to run.</p> <p>How is the dispatcher loaded? Please review the 3 previous sections for understanding how it is is loaded.</p> <p>This error is actually generated here in the NAPALM core code.</p> <p>Some steps to consider to troubleshooting this:</p> <ol> <li> <p>PIP install the NAPALM plugin into the Nautobot environment from PYPI. </p> <p>As an example if you wanted to use NAPALMs Palo Alto plugin you'd need that library installed in the environment.</p> <pre><code>pip install napalm-panos\n</code></pre> </li> <li> <p>Is the platform network_driver being used something that is handled by default?</p> <p>Check the default dispatcher network os driver name. Change your platform's network_driver to match the default naming which is following the driver names from Netmiko.</p> </li> </ol>","text":""},{"location":"user/troubleshooting/troubleshoot_general.html","title":"General Troubleshooting Tips and Tricks","text":"<p>This troubleshooting article provides general troubleshooting tips and tricks for the Golden Configuration app.</p>"},{"location":"user/troubleshooting/troubleshoot_general.html#where-are-the-logs","title":"Where are the logs?","text":"<p>Golden config logs to the nautobot-worker facility. Where those logs are on specific deployments can vary on how the specific Nautobot instance was deployed and how. In general look in <code>journalctl</code> for logs for the system service defined for the worker. If the deployment is container based look in the celery worker logs for the specific container running that functionality.</p>"},{"location":"user/troubleshooting/troubleshoot_general.html#this-job-is-not-enabled-to-be-run","title":"This job is not enabled to be run.","text":"<p>If you attempt to run any of the components of golden config and you see <code>This job is not enabled to be run.</code> on the job execution page this means you simply do not have the job enabled in Nautobot.</p> <p>To fix this follow the steps below:</p> <ol> <li>Navigate to Jobs -&gt; Jobs.</li> <li>Click on the job you're attempting to execute. Click <code>edit</code>.</li> <li>Toggle the <code>enabled</code> field button.</li> <li>Retest</li> </ol>"},{"location":"user/troubleshooting/troubleshoot_general.html#wheres-the-rerun-job-button","title":"Where's the rerun job button?","text":"<p>By default Nautobot utilizes the job models field <code>Has sensitive variables</code> to determine whether a job execution will have a rerun button present on the page. If you've validated there is in fact no sensitive data in the job you can update this field. </p> <ol> <li>Navigate to Jobs -&gt; Jobs.</li> <li>Click on the job you're attempting to execute. Click <code>edit</code>.</li> <li>Scroll to <code>Has sensitive variables</code> field button.</li> <li>Toggle the <code>Override default value</code> button and then you can uncheck the <code>Has sensitive variables</code> toggle.</li> <li>Retest</li> </ol>"},{"location":"user/troubleshooting/troubleshoot_general.html#missing-the-required-global-setting","title":"Missing the required global setting","text":"<p>Golden config relies on multiple application specific settings to function. In most cases a job fails fast in these situations with errors similar to the screenshot posted below. </p> <p></p> <p>To fix this follow the steps below:</p> <ol> <li>Navigate to Golden Config -&gt; Settings.</li> <li>Click on the specific setting in use. Note: <code>Default Settings</code> is auto created upon application installation.</li> <li>Ensure all settings and <code>paths</code> are configured.</li> </ol> <p>See Getting Started for more information.</p>"},{"location":"user/troubleshooting/troubleshoot_general.html#attempting-to-connect-to-ip-and-port-22-failed","title":"Attempting to connect to IP  and port: 22 failed. <p>This one is specific to running a configuration backup job. Specially within the <code>Backup Test</code> Golden Config Backup settings. This indicates that from the nautobot worker a tcp ping check against the management IP on port 22 was unsuccessful.</p> <p></p> <p>Suggestions:</p> <ul> <li>Validate from the Nautobot worker you can manually reach the IP + port of the system.</li> </ul>","text":""},{"location":"user/troubleshooting/troubleshoot_general.html#general-connectivity-issues","title":"General Connectivity Issues <p>Golden config uses Nornir for the framework that connects to devices and accomplishes a task. At the time of writing this the default dispatcher that Golden config uses are based off of <code>nornir_netmiko</code> and <code>nornir_napalm</code> functionality, this is a implementation detail at this time and is not a limitation.</p> <p>Some generic issues that can be encountered tend to provide default exception logging directly from these underlying Nornir extensions. Most of which should be troubleshot in the same general manner.</p> <ul> <li>Validate from the Nautobot worker you can manually reach the IP + port of the system.</li> <li>Validate the device is not just slow to respond. (Exception tends to be related to the prompt not being found.)</li> <li>Test with underlying library optimizations disabled. E.g. Netmiko's fast_cli set to False.</li> </ul> <p>If none of these troubleshooting steps helped identify the problem please visit the more specific troubleshooting steps.</p> <ul> <li>Troubleshoot Credentials</li> <li>Troubleshoot Dispatchers</li> </ul>","text":""},{"location":"user/troubleshooting/troubleshoot_general.html#detailed-diagrams","title":"Detailed Diagrams <p>Golden config flow diagrams are available on the repositories wiki.</p>","text":""}]}