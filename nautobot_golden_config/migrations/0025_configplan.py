# Generated by Django 3.2.16 on 2023-06-21 15:03

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.extras.models.mixins
import nautobot.extras.models.statuses
import taggit.managers
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("dcim", "0019_device_redundancy_group_data_migration"),
        ("extras", "0053_relationship_required_on"),
        ("nautobot_golden_config", "0024_convert_custom_compliance_rules"),
    ]

    operations = [
        migrations.CreateModel(
            name="ConfigPlan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("plan_type", models.CharField(max_length=20)),
                ("config_set", models.TextField()),
                ("change_control_id", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="config_plan", to="dcim.device"
                    ),
                ),
                (
                    "feature",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="config_plan",
                        to="nautobot_golden_config.compliancefeature",
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="extras.status"
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ("device",),
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
    ]
